/bin/ls
0x16000:
if
    0x0000000000016000: mov esi, dword ptr [r13]
    0x0000000000016004: add r13, 4
    0x0000000000016008: lea eax, [rsi - 0x1010101]
    0x000000000001600e: not esi
    0x0000000000016010: and eax, esi
    0x0000000000016012: and eax, 0x80808080
    0x0000000000016017: je 0x16000
then
    L := 0x16000 (2)
else
    if
        0x0000000000016019: mov esi, eax
        0x000000000001601b: mov qword ptr [rsp + 0x18], rdx
        0x0000000000016020: shr esi, 0x10
        0x0000000000016023: test eax, 0x8080
        0x0000000000016028: cmove eax, esi
        0x000000000001602b: lea rsi, [r13 + 2]
        0x000000000001602f: mov ecx, eax
        0x0000000000016031: cmove r13, rsi
        0x0000000000016035: add cl, al
        0x0000000000016037: sbb r13, 3
        0x000000000001603b: sub r13, qword ptr [rsp + 8]
        0x0000000000016040: cmp qword ptr [rsp], 0
        0x0000000000016045: lea rax, [rdx + r13]
        0x0000000000016049: jne 0x1613a
    then
        0x000000000001613a: add rax, qword ptr [rsp]
        0x000000000001613e: mov rdi, r15
        0x0000000000016141: lea rcx, [rax + 2]
        0x0000000000016145: lea rsi, [rax + 3]
        0x0000000000016149: mov qword ptr [rsp], rcx
        0x000000000001614d: call 0x3c90
        0x0000000000016152: mov rdx, qword ptr [rsp + 0x18]
        0x0000000000016157: mov r12, rax
        0x000000000001615a: jmp 0x16068
        L := 0x16068 (2)
    else
        0x000000000001604f: lea rcx, [rax + 2]
        0x0000000000016053: lea rdi, [rax + 3]
        0x0000000000016057: mov qword ptr [rsp], rcx
        0x000000000001605b: call 0x3e78
        0x0000000000016060: mov rdx, qword ptr [rsp + 0x18]
        0x0000000000016065: mov r12, rax
        L := 0x16068 (2)
    fi
fi

0xc024:
if
    0x000000000000c024: mov rdi, rbp
    0x000000000000c027: call 0x3b20
    0x000000000000c02c: test eax, eax
    0x000000000000c02e: jne 0xc018
then
    if
        0x000000000000c018: add rbx, 0x10
        0x000000000000c01c: mov rsi, qword ptr [rbx]
        0x000000000000c01f: test rsi, rsi
        0x000000000000c022: je 0xc030
    then
        L := 0xc030 (2)
    else
        L := 0xc024 (2)
    fi
else
    L := 0xc030 (2)
fi

0x1002e:
if
    0x000000000001002e: call 0x3c00
    0x0000000000010033: cmp eax, -1
    0x0000000000010036: movsxd rdx, eax
    0x0000000000010039: jne 0x10047
then
    L := 0x10047 (2)
else
    0x000000000001003b: mov dword ptr [r15], 0xfffd
    0x0000000000010042: mov edx, 1
    L := 0x10047 (2)
fi

0xc030:
if
    0x000000000000c030: mov rbx, qword ptr [rbx + 8]
    0x000000000000c034: xor edi, edi
    0x000000000000c036: mov edx, 5
    0x000000000000c03b: lea rsi, [rip + 0xbd1e]
    0x000000000000c042: test rbx, rbx
    0x000000000000c045: je 0xc108
then
    if
        0x000000000000c108: call 0x3930
        0x000000000000c10d: lea rcx, [rip + 0xdea4]
        0x000000000000c114: lea rdx, [rip + 0xbc5c]
        0x000000000000c11b: mov rsi, rax
        0x000000000000c11e: mov edi, 1
        0x000000000000c123: xor eax, eax
        0x000000000000c125: call 0x3cd0
        0x000000000000c12a: xor esi, esi
        0x000000000000c12c: mov edi, 5
        0x000000000000c131: call 0x3cc0
        0x000000000000c136: test rax, rax
        0x000000000000c139: je 0xc153
    then
        L := 0xc153 (2)
    else
        if
            0x000000000000c13b: lea rsi, [rip + 0xbc43]
            0x000000000000c142: mov edx, 3
            0x000000000000c147: mov rdi, rax
            0x000000000000c14a: call 0x3800
            0x000000000000c14f: test eax, eax
            0x000000000000c151: jne 0xc18e
        then
            0x000000000000c18e: mov rbx, rbp
            L := 0xc191 (2)
        else
            L := 0xc153 (2)
        fi
    fi
else
    if
        0x000000000000c04b: call 0x3930
        0x000000000000c050: lea rcx, [rip + 0xdf61]
        0x000000000000c057: lea rdx, [rip + 0xbd19]
        0x000000000000c05e: mov rsi, rax
        0x000000000000c061: mov edi, 1
        0x000000000000c066: xor eax, eax
        0x000000000000c068: call 0x3cd0
        0x000000000000c06d: xor esi, esi
        0x000000000000c06f: mov edi, 5
        0x000000000000c074: call 0x3cc0
        0x000000000000c079: test rax, rax
        0x000000000000c07c: je 0xc09a
    then
        L := 0xc09a (3)
    else
        if
            0x000000000000c07e: lea rsi, [rip + 0xbd00]
            0x000000000000c085: mov edx, 3
            0x000000000000c08a: mov rdi, rax
            0x000000000000c08d: call 0x3800
            0x000000000000c092: test eax, eax
            0x000000000000c094: jne 0xc191
        then
            L := 0xc191 (2)
        else
            L := 0xc09a (3)
        fi
    fi
fi

0x12037:
0x0000000000012037: mov qword ptr [rip + 0x20f3c2], rbx
0x000000000001203e: mov qword ptr [rip + 0x20e263], rbx
0x0000000000012045: pop rbx
0x0000000000012046: ret 
L := 0x0 (130)

0x8038:
if
    0x0000000000008038: test r8d, 0x400
    0x000000000000803f: jne 0x8070
then
    if
        0x0000000000008070: mov edi, 0x11
        0x0000000000008075: call 0x5c50
        0x000000000000807a: test al, al
        0x000000000000807c: je 0x8041
    then
        L := 0x8041 (2)
    else
        0x000000000000807e: mov ecx, 0x110
        0x0000000000008083: jmp 0x7e27
        L := 0x7e27 (18)
    fi
else
    L := 0x8041 (2)
fi

0x403b:
if
    0x000000000000403b: lea rdi, [rip + 0x13d73]
    0x0000000000004042: mov qword ptr [rip + 0x21d263], 0x50
    0x000000000000404d: call 0x37a0
    0x0000000000004052: test rax, rax
    0x0000000000004055: mov r12, rax
    0x0000000000004058: je 0x4063
then
    L := 0x4063 (4)
else
    if
        0x000000000000405a: cmp byte ptr [rax], 0
        0x000000000000405d: jne 0x4d3d
    then
        if
            0x0000000000004d3d: mov rdi, rax
            0x0000000000004d40: call 0x5ca0
            0x0000000000004d45: test al, al
            0x0000000000004d47: jne 0x4063
        then
            L := 0x4063 (4)
        else
            0x0000000000004d4d: mov rdi, r12
            0x0000000000004d50: call 0x13ce0
            0x0000000000004d55: lea rsi, [rip + 0x1536c]
            0x0000000000004d5c: mov r12, rax
            0x0000000000004d5f: xor edi, edi
            0x0000000000004d61: mov edx, 5
            0x0000000000004d66: call 0x3930
            0x0000000000004d6b: mov rcx, r12
            0x0000000000004d6e: mov rdx, rax
            0x0000000000004d71: xor esi, esi
            0x0000000000004d73: xor edi, edi
            0x0000000000004d75: xor eax, eax
            0x0000000000004d77: call 0x3d20
            0x0000000000004d7c: jmp 0x4063
            L := 0x4063 (4)
        fi
    else
        L := 0x4063 (4)
    fi
fi

0xa040:
0x000000000000a040: mov dword ptr [rbx + 0xac], eax
L := 0xa046 (5)

0x8041:
if
    0x0000000000008041: mov edi, 0x15
    0x0000000000008046: call 0x5c50
    0x000000000000804b: test al, al
    0x000000000000804d: je 0x8100
then
    L := 0x8100 (2)
else
    if
        0x0000000000008053: cmp byte ptr [r14 + 0xc0], 0
        0x000000000000805b: je 0x8100
    then
        L := 0x8100 (2)
    else
        0x0000000000008061: mov ecx, 0x150
        0x0000000000008066: jmp 0x7e27
        L := 0x7e27 (18)
    fi
fi

0xa046:
if
    0x000000000000a046: mov rdi, r15
    0x000000000000a049: call 0x3e70
    0x000000000000a04e: mov eax, dword ptr [rbx + 0x30]
    0x000000000000a051: and eax, 0xf000
    0x000000000000a056: cmp eax, 0xa000
    0x000000000000a05b: je 0xa485
then
    L := 0xa485 (2)
else
    0x000000000000a061: jmp 0x9bb2
    L := 0x9bb2 (3)
fi

0x10047:
if
    0x0000000000010047: add rdx, rbp
    0x000000000001004a: cmp r14, rdx
    0x000000000001004d: jae 0x10020
then
    if
        0x0000000000010020: add r15, 4
        0x0000000000010024: mov edi, dword ptr [r15]
        0x0000000000010027: mov rbp, rdx
        0x000000000001002a: test edi, edi
        0x000000000001002c: je 0x1004f
    then
        L := 0x1004f (3)
    else
        L := 0x1002e (2)
    fi
else
    L := 0x1004f (3)
fi

0x1004f:
0x000000000001004f: mov r14, qword ptr [rsp + 8]
0x0000000000010054: mov rdx, qword ptr [rsp + 0x20]
0x0000000000010059: mov rsi, qword ptr [rsp]
0x000000000001005d: mov dword ptr [r15], 0
0x0000000000010064: mov rdi, r14
0x0000000000010067: call 0x3d80
0x000000000001006c: mov r15, rax
0x000000000001006f: jmp 0xfd8e
L := 0xfd8e (5)

0x4063:
if
    0x0000000000004063: lea r12, [rsp + 0x30]
    0x0000000000004068: xor eax, eax
    0x000000000000406a: mov esi, 0x5413
    0x000000000000406f: mov edi, 1
    0x0000000000004074: mov rdx, r12
    0x0000000000004077: call 0x3a80
    0x000000000000407c: cmp eax, -1
    0x000000000000407f: je 0x4092
then
    L := 0x4092 (3)
else
    if
        0x0000000000004081: movzx eax, word ptr [rsp + 0x32]
        0x0000000000004086: test ax, ax
        0x0000000000004089: je 0x4092
    then
        L := 0x4092 (3)
    else
        0x000000000000408b: mov qword ptr [rip + 0x21d21e], rax
        L := 0x4092 (3)
    fi
fi

0x16068:
if
    0x0000000000016068: test r12, r12
    0x000000000001606b: je 0x1615f
then
    0x000000000001615f: mov rdi, r15
    0x0000000000016162: lea r15, [rip + 0x1ae1]
    0x0000000000016169: call 0x3e70
    0x000000000001616e: mov rdi, r14
    0x0000000000016171: call 0x161a0
    0x0000000000016176: jmp 0x15f0b
    L := 0x15f0b (3)
else
    if
        0x0000000000016071: mov r15, qword ptr [rsp]
        0x0000000000016075: mov rdi, -2
        0x000000000001607c: mov rsi, qword ptr [rsp + 0x10]
        0x0000000000016081: sub rdi, rdx
        0x0000000000016084: add rdx, 1
        0x0000000000016088: sub r15, r13
        0x000000000001608b: add rdi, r15
        0x000000000001608e: add rdi, r12
        0x0000000000016091: call 0x3b80
        0x0000000000016096: mov rsi, qword ptr [rsp + 8]
        0x000000000001609b: lea rdi, [r12 + r15 - 1]
        0x00000000000160a0: lea rdx, [r13 + 1]
        0x00000000000160a4: mov r15, r12
        0x00000000000160a7: call 0x3b80
        0x00000000000160ac: mov rax, qword ptr [r14 + 8]
        0x00000000000160b0: cmp rax, qword ptr [r14 + 0x10]
        0x00000000000160b4: jb 0x15f6f
    then
        L := 0x15f6f (2)
    else
        L := 0x160ba (2)
    fi
fi

0xa070:
if
    0x000000000000a070: cmp byte ptr [rip + 0x21729b], 0
    0x000000000000a077: je 0x9b82
then
    L := 0x9b82 (4)
else
    if
        0x000000000000a07d: mov edi, 0x15
        0x000000000000a082: mov byte ptr [rbp - 0x390], dl
        0x000000000000a088: call 0x5c50
        0x000000000000a08d: test al, al
        0x000000000000a08f: movzx edx, byte ptr [rbp - 0x390]
        0x000000000000a096: je 0x9b82
    then
        L := 0x9b82 (4)
    else
        if
            0x000000000000a09c: call 0x37f0
            0x000000000000a0a1: mov r14, qword ptr [rbx + 0x18]
            0x000000000000a0a5: cmp r14, qword ptr [rip + 0x21624c]
            0x000000000000a0ac: movzx edx, byte ptr [rbp - 0x390]
            0x000000000000a0b3: mov dword ptr [rax], 0x5f
            0x000000000000a0b9: je 0xa0c2
        then
            L := 0xa0c2 (2)
        else
            0x000000000000a0bb: mov qword ptr [rip + 0x216236], r14
            L := 0xa0c2 (2)
        fi
    fi
fi

0x6090:
if
    0x0000000000006090: push rbx
    0x0000000000006091: mov rbx, rdi
    0x0000000000006094: mov rdi, qword ptr [rdi]
    0x0000000000006097: call 0x3e70
    0x000000000000609c: mov rdi, qword ptr [rbx + 8]
    0x00000000000060a0: call 0x3e70
    0x00000000000060a5: mov rdi, qword ptr [rbx + 0x10]
    0x00000000000060a9: call 0x3e70
    0x00000000000060ae: mov rdi, qword ptr [rbx + 0xb0]
    0x00000000000060b5: lea rax, [rip + 0x219f66]
    0x00000000000060bc: cmp rdi, rax
    0x00000000000060bf: je 0x60d0
then
    0x00000000000060d0: pop rbx
    0x00000000000060d1: ret 
    L := 0x0 (130)
else
    0x00000000000060c1: pop rbx
    0x00000000000060c2: jmp 0x3da0
    0x0000000000003da0: jmp qword ptr [rip + 0x21c1ba]
    L := 0x21ff60 (1)
fi

0x4092:
if
    0x0000000000004092: lea rdi, [rip + 0x13d24]
    0x0000000000004099: call 0x37a0
    0x000000000000409e: test rax, rax
    0x00000000000040a1: mov r13, rax
    0x00000000000040a4: mov qword ptr [rip + 0x21d211], 8
    0x00000000000040af: je 0x40d7
then
    L := 0x40d7 (3)
else
    if
        0x00000000000040b1: xor r8d, r8d
        0x00000000000040b4: xor edx, edx
        0x00000000000040b6: xor esi, esi
        0x00000000000040b8: mov rcx, r12
        0x00000000000040bb: mov rdi, rax
        0x00000000000040be: call 0x14950
        0x00000000000040c3: test eax, eax
        0x00000000000040c5: jne 0x51ef
    then
        0x00000000000051ef: mov rdi, r13
        0x00000000000051f2: call 0x13ce0
        0x00000000000051f7: lea rsi, [rip + 0x14f0a]
        0x00000000000051fe: mov r13, rax
        0x0000000000005201: xor edi, edi
        0x0000000000005203: mov edx, 5
        0x0000000000005208: call 0x3930
        0x000000000000520d: mov rcx, r13
        0x0000000000005210: mov rdx, rax
        0x0000000000005213: xor esi, esi
        0x0000000000005215: xor edi, edi
        0x0000000000005217: xor eax, eax
        0x0000000000005219: call 0x3d20
        0x000000000000521e: jmp 0x40d7
        L := 0x40d7 (3)
    else
        0x00000000000040cb: mov rax, qword ptr [rsp + 0x30]
        0x00000000000040d0: mov qword ptr [rip + 0x21d1e9], rax
        L := 0x40d7 (3)
    fi
fi

0x12090:
0x0000000000012090: lea rax, [rip + 0x8624]
0x0000000000012097: lea rdx, [rip + 0x8f94]
0x000000000001209e: cmp ebx, 9
0x00000000000120a1: cmovne rax, rdx
0x00000000000120a5: add rsp, 8
0x00000000000120a9: pop rbx
0x00000000000120aa: pop rbp
0x00000000000120ab: ret 
L := 0x0 (130)

0x10098:
if
    0x0000000000010098: mov rax, qword ptr [r12]
    0x000000000001009c: cmp rax, rbp
    0x000000000001009f: jae 0xfea0
then
    0x000000000000fea0: mov qword ptr [rsp + 8], 0
    L := 0xfea9 (2)
else
    0x00000000000100a5: mov rax, qword ptr [rsp + 8]
    0x00000000000100aa: add rax, 1
    0x00000000000100ae: mov qword ptr [rsp + 0x20], rax
    0x00000000000100b3: jmp 0xfff0
    L := 0xfff0 (2)
fi

0xc09a:
0x000000000000c09a: lea rsi, [rip + 0xdf87]
0x000000000000c0a1: xor edi, edi
0x000000000000c0a3: mov edx, 5
0x000000000000c0a8: call 0x3930
0x000000000000c0ad: lea rdx, [rip + 0xdf04]
0x000000000000c0b4: mov rcx, rbp
0x000000000000c0b7: mov rsi, rax
0x000000000000c0ba: mov edi, 1
0x000000000000c0bf: xor eax, eax
0x000000000000c0c1: call 0x3cd0
0x000000000000c0c6: cmp rbp, rbx
0x000000000000c0c9: lea rcx, [rip + 0xbc4d]
0x000000000000c0d0: lea rbp, [rip + 0xbb73]
0x000000000000c0d7: cmove rbp, rcx
L := 0xc0db (2)

0x80a3:
if
    0x00000000000080a3: test r8b, 2
    0x00000000000080a7: je 0x80c0
then
    L := 0x80c0 (2)
else
    if
        0x00000000000080a9: mov edi, 0x13
        0x00000000000080ae: call 0x5c50
        0x00000000000080b3: test al, al
        0x00000000000080b5: mov ecx, 0x130
        0x00000000000080ba: jne 0x7e27
    then
        L := 0x7e27 (18)
    else
        L := 0x80c0 (2)
    fi
fi

0x160ba:
if
    0x00000000000160ba: mov rdi, r14
    0x00000000000160bd: call 0x3790
    0x00000000000160c2: cmp eax, -1
    0x00000000000160c5: mov edi, eax
    0x00000000000160c7: jne 0x15f7a
then
    L := 0x15f7a (2)
else
    L := 0x160cd (3)
fi

0x80c0:
if
    0x00000000000080c0: and r8d, 0x200
    0x00000000000080c7: mov ecx, 0x60
    0x00000000000080cc: je 0x7e27
then
    L := 0x7e27 (18)
else
    0x00000000000080d2: mov edi, 0x12
    0x00000000000080d7: call 0x5c50
    0x00000000000080dc: cmp al, 1
    0x00000000000080de: sbb rcx, rcx
    0x00000000000080e1: and cl, 0x40
    0x00000000000080e4: add rcx, 0x120
    0x00000000000080eb: jmp 0x7e27
    L := 0x7e27 (18)
fi

0xa0c2:
0x000000000000a0c2: mov byte ptr [rbx + 0xc0], 0
0x000000000000a0c9: jmp 0x9b82
L := 0x9b82 (4)

0x160cd:
if
    0x00000000000160cd: mov rdi, r14
    0x00000000000160d0: call 0x161a0
    0x00000000000160d5: mov rax, qword ptr [rsp]
    0x00000000000160d9: test rax, rax
    0x00000000000160dc: je 0x15f04
then
    L := 0x15f04 (3)
else
    0x00000000000160e2: mov byte ptr [r15 + rax], 0
    0x00000000000160e7: jmp 0x15f0b
    L := 0x15f0b (3)
fi

0x40d7:
if
    0x00000000000040d7: lea r13, [rip + 0x124ba]
    0x00000000000040de: mov byte ptr [rsp + 0x10], 0
    0x00000000000040e3: mov byte ptr [rsp + 8], 0
    0x00000000000040e8: xor r14d, r14d
    0x00000000000040eb: mov r15d, 1
    0x00000000000040f1: nop dword ptr [rax]
    0x00000000000040f8: lea rcx, [rip + 0x21b1e1]
    0x00000000000040ff: lea rdx, [rip + 0x16042]
    0x0000000000004106: mov r8, r12
    0x0000000000004109: mov rsi, rbx
    0x000000000000410c: mov edi, ebp
    0x000000000000410e: mov dword ptr [rsp + 0x30], 0xffffffff
    0x0000000000004116: call 0x3980
    0x000000000000411b: cmp eax, -1
    0x000000000000411e: je 0x48b8
then
    if
        0x00000000000048b8: cmp qword ptr [rip + 0x21ca60], 0
        0x00000000000048c0: je 0x4edb
    then
        if
            0x0000000000004edb: lea rdi, [rip + 0x12f83]
            0x0000000000004ee2: call 0x37a0
            0x0000000000004ee7: lea rdx, [rip + 0x21c432]
            0x0000000000004eee: lea rsi, [rip + 0x21c433]
            0x0000000000004ef5: mov r13, rax
            0x0000000000004ef8: mov rdi, rax
            0x0000000000004efb: call 0xf720
            0x0000000000004f00: test r13, r13
            0x0000000000004f03: je 0x5717
        then
            if
                0x0000000000005717: lea rdi, [rip + 0x1274a]
                0x000000000000571e: call 0x37a0
                0x0000000000005723: test rax, rax
                0x0000000000005726: jne 0x4f09
            then
                L := 0x4f09 (2)
            else
                0x000000000000572c: jmp 0x4f23
                L := 0x4f23 (2)
            fi
        else
            L := 0x4f09 (2)
        fi
    else
        L := 0x48c6 (3)
    fi
else
    if
        0x0000000000004124: add eax, 0x83
        0x0000000000004129: cmp eax, 0x113
        0x000000000000412e: ja 0x5699
    then
        L := 0x5699 (2)
    else
        0x0000000000004134: movsxd rax, dword ptr [r13 + rax*4]
        0x0000000000004139: add rax, r13
        0x000000000000413c: jmp rax
        L := 0x0 (130)
    fi
fi

0xc0db:
0x000000000000c0db: lea rsi, [rip + 0xdf66]
0x000000000000c0e2: xor edi, edi
0x000000000000c0e4: mov edx, 5
0x000000000000c0e9: call 0x3930
0x000000000000c0ee: mov rcx, rbp
0x000000000000c0f1: mov rsi, rax
0x000000000000c0f4: mov rdx, rbx
0x000000000000c0f7: mov edi, 1
0x000000000000c0fc: xor eax, eax
0x000000000000c0fe: call 0x3cd0
0x000000000000c103: jmp 0xbb72
L := 0xbb72 (2)

0x60e0:
if
    0x00000000000060e0: cmp qword ptr [rip + 0x21b2c8], 0
    0x00000000000060e8: push rbx
    0x00000000000060e9: je 0x610d
then
    L := 0x610d (2)
else
    0x00000000000060eb: xor ebx, ebx
    0x00000000000060ed: nop dword ptr [rax]
    L := 0x60f0 (2)
fi

0xa0ea:
if
    0x000000000000a0ea: mov esi, 2
    0x000000000000a0ef: mov rdi, r12
    0x000000000000a0f2: call 0xc640
    0x000000000000a0f7: test rax, rax
    0x000000000000a0fa: mov qword ptr [rbx + 0x10], rax
    0x000000000000a0fe: jne 0x9b1c
then
    L := 0x9b1c (4)
else
    0x000000000000a104: lea rsi, [rip + 0xdb5a]
    0x000000000000a10b: xor edi, edi
    0x000000000000a10d: mov edx, 5
    0x000000000000a112: call 0x3930
    0x000000000000a117: movzx edi, r13b
    0x000000000000a11b: mov rdx, r12
    0x000000000000a11e: mov rsi, rax
    0x000000000000a121: call 0x69a0
    0x000000000000a126: jmp 0x9b1c
    L := 0x9b1c (4)
fi

0x60f0:
if
    0x00000000000060f0: mov rax, qword ptr [rip + 0x21b2a9]
    0x00000000000060f7: mov rdi, qword ptr [rax + rbx*8]
    0x00000000000060fb: add rbx, 1
    0x00000000000060ff: call 0x6090
    0x0000000000006104: cmp qword ptr [rip + 0x21b2a5], rbx
    0x000000000000610b: ja 0x60f0
then
    L := 0x60f0 (2)
else
    L := 0x610d (2)
fi

0xe100:
if
    0x000000000000e100: push r15
    0x000000000000e102: push r14
    0x000000000000e104: lea rax, [rip - 0x7db]
    0x000000000000e10b: push r13
    0x000000000000e10d: push r12
    0x000000000000e10f: mov r12, rdx
    0x000000000000e112: push rbp
    0x000000000000e113: push rbx
    0x000000000000e114: mov r13, rcx
    0x000000000000e117: mov rbp, rdi
    0x000000000000e11a: mov edi, 0x50
    0x000000000000e11f: mov r15, rsi
    0x000000000000e122: sub rsp, 8
    0x000000000000e126: test rdx, rdx
    0x000000000000e129: mov r14, r8
    0x000000000000e12c: cmove r12, rax
    0x000000000000e130: lea rax, [rip - 0x7f7]
    0x000000000000e137: test rcx, rcx
    0x000000000000e13a: cmove r13, rax
    0x000000000000e13e: call 0x3e78
    0x000000000000e143: test rax, rax
    0x000000000000e146: mov rbx, rax
    0x000000000000e149: je 0xe1fa
then
    L := 0xe1fa (3)
else
    if
        0x000000000000e14f: test r15, r15
        0x000000000000e152: lea rdi, [rax + 0x28]
        0x000000000000e156: je 0xe210
    then
        if
            0x000000000000e210: lea rax, [rip + 0xc1a9]
            0x000000000000e217: mov qword ptr [rbx + 0x28], rax
            0x000000000000e21b: call 0xdaa0
            0x000000000000e220: test al, al
            0x000000000000e222: movss xmm1, dword ptr [rip + 0xc1be]
            0x000000000000e22a: je 0xe1f0
        then
            L := 0xe1f0 (7)
        else
            if
                0x000000000000e22c: test rbp, rbp
                0x000000000000e22f: js 0xe27b
            then
                L := 0xe27b (2)
            else
                L := 0xe231 (2)
            fi
        fi
    else
        if
            0x000000000000e15c: mov qword ptr [rax + 0x28], r15
            0x000000000000e160: call 0xdaa0
            0x000000000000e165: test al, al
            0x000000000000e167: je 0xe1f0
        then
            L := 0xe1f0 (7)
        else
            if
                0x000000000000e16d: cmp byte ptr [r15 + 0x10], 0
                0x000000000000e172: je 0xe270
            then
                if
                    0x000000000000e270: test rbp, rbp
                    0x000000000000e273: movss xmm1, dword ptr [r15 + 8]
                    0x000000000000e279: jns 0xe231
                then
                    L := 0xe231 (2)
                else
                    L := 0xe27b (2)
                fi
            else
                L := 0xe178 (3)
            fi
        fi
    fi
fi

0x8100:
if
    0x0000000000008100: and r8d, 0x49
    0x0000000000008104: je 0x8120
then
    L := 0x8120 (2)
else
    if
        0x0000000000008106: mov edi, 0xe
        0x000000000000810b: call 0x5c50
        0x0000000000008110: test al, al
        0x0000000000008112: je 0x8120
    then
        L := 0x8120 (2)
    else
        0x0000000000008114: mov ecx, 0xe0
        0x0000000000008119: jmp 0x7e27
        L := 0x7e27 (18)
    fi
fi

0x16100:
if
    0x0000000000016100: cmp eax, 0xa
    0x0000000000016103: je 0x16130
then
    L := 0x16130 (2)
else
    if
        0x0000000000016105: test dl, dl
        0x0000000000016107: je 0x16130
    then
        L := 0x16130 (2)
    else
        L := 0x16109 (2)
    fi
fi

0x16109:
if
    0x0000000000016109: mov rax, qword ptr [r14 + 8]
    0x000000000001610d: cmp rax, qword ptr [r14 + 0x10]
    0x0000000000016111: jb 0x160f0
then
    0x00000000000160f0: lea rdx, [rax + 1]
    0x00000000000160f4: mov qword ptr [r14 + 8], rdx
    0x00000000000160f8: movzx eax, byte ptr [rax]
    0x00000000000160fb: mov edx, 1
    L := 0x16100 (2)
else
    0x0000000000016113: mov rdi, r14
    0x0000000000016116: call 0x3790
    0x000000000001611b: cmp eax, -1
    0x000000000001611e: setne dl
    0x0000000000016121: jmp 0x16100
    L := 0x16100 (2)
fi

0x610d:
0x000000000000610d: mov qword ptr [rip + 0x21b298], 0
0x0000000000006118: mov byte ptr [rip + 0x21b28a], 0
0x000000000000611f: mov byte ptr [rip + 0x21b23e], 0
0x0000000000006126: mov dword ptr [rip + 0x21b230], 0
0x0000000000006130: mov dword ptr [rip + 0x21b222], 0
0x000000000000613a: mov dword ptr [rip + 0x21b214], 0
0x0000000000006144: mov dword ptr [rip + 0x21b202], 0
0x000000000000614e: mov dword ptr [rip + 0x21b1f4], 0
0x0000000000006158: mov dword ptr [rip + 0x21b1e6], 0
0x0000000000006162: mov dword ptr [rip + 0x21b1e8], 0
0x000000000000616c: mov dword ptr [rip + 0x21b1ce], 0
0x0000000000006176: mov dword ptr [rip + 0x21b1c0], 0
0x0000000000006180: mov dword ptr [rip + 0x21b1b2], 0
0x000000000000618a: pop rbx
0x000000000000618b: ret 
L := 0x0 (130)

0x8120:
if
    0x0000000000008120: cmp qword ptr [r14 + 0x28], 1
    0x0000000000008125: jbe 0x7fa0
then
    L := 0x7fa0 (3)
else
    if
        0x000000000000812b: mov edi, 0x16
        0x0000000000008130: call 0x5c50
        0x0000000000008135: test al, al
        0x0000000000008137: je 0x7fa0
    then
        L := 0x7fa0 (3)
    else
        0x000000000000813d: mov ecx, 0x160
        0x0000000000008142: jmp 0x7e27
        L := 0x7e27 (18)
    fi
fi

0x16130:
if
    0x0000000000016130: cmp eax, -1
    0x0000000000016133: je 0x160cd
then
    L := 0x160cd (3)
else
    0x0000000000016135: jmp 0x15f61
    L := 0x15f61 (4)
fi

0xc153:
0x000000000000c153: lea rsi, [rip + 0xdece]
0x000000000000c15a: mov edx, 5
0x000000000000c15f: xor edi, edi
0x000000000000c161: mov rbx, rbp
0x000000000000c164: call 0x3930
0x000000000000c169: lea rdx, [rip + 0xde48]
0x000000000000c170: mov rcx, rbp
0x000000000000c173: mov rsi, rax
0x000000000000c176: mov edi, 1
0x000000000000c17b: xor eax, eax
0x000000000000c17d: lea rbp, [rip + 0xbb99]
0x000000000000c184: call 0x3cd0
0x000000000000c189: jmp 0xc0db
L := 0xc0db (2)

0x12160:
if
    0x0000000000012160: push r15
    0x0000000000012162: push r14
    0x0000000000012164: mov r15d, r8d
    0x0000000000012167: push r13
    0x0000000000012169: push r12
    0x000000000001216b: mov r14, rdi
    0x000000000001216e: push rbp
    0x000000000001216f: push rbx
    0x0000000000012170: mov ebx, r9d
    0x0000000000012173: mov r13, rsi
    0x0000000000012176: mov rbp, rcx
    0x0000000000012179: and ebx, 2
    0x000000000001217c: sub rsp, 0xb8
    0x0000000000012183: mov rax, qword ptr [rsp + 0xf0]
    0x000000000001218b: mov qword ptr [rsp + 0x10], rdx
    0x0000000000012190: mov dword ptr [rsp + 8], r8d
    0x0000000000012195: mov dword ptr [rsp + 0x78], r9d
    0x000000000001219a: mov qword ptr [rsp + 0x20], rax
    0x000000000001219f: mov rax, qword ptr [rsp + 0xf8]
    0x00000000000121a7: mov qword ptr [rsp + 0x68], rax
    0x00000000000121ac: mov rax, qword ptr [rsp + 0x100]
    0x00000000000121b4: mov qword ptr [rsp + 0x60], rax
    0x00000000000121b9: mov rax, qword ptr fs:[0x28]
    0x00000000000121c2: mov qword ptr [rsp + 0xa8], rax
    0x00000000000121ca: xor eax, eax
    0x00000000000121cc: call 0x3940
    0x00000000000121d1: cmp r15d, 0xa
    0x00000000000121d5: mov qword ptr [rsp + 0x58], rax
    0x00000000000121da: ja 0x1338f
then
    0x000000000001338f: call 0x37e0
    0x0000000000013394: nop 
    0x0000000000013396: nop word ptr cs:[rax + rax]
    L := 0x133a0 (3)
else
    0x00000000000121e0: lea rcx, [rip + 0x8539]
    0x00000000000121e7: mov edx, r15d
    0x00000000000121ea: movsxd rax, dword ptr [rcx + rdx*4]
    0x00000000000121ee: add rax, rcx
    0x00000000000121f1: jmp rax
    L := 0x0 (130)
fi

0x816c:
0x000000000000816c: shl rax, 4
0x0000000000008170: mov rcx, rax
0x0000000000008173: jmp 0x7e27
L := 0x7e27 (18)

0xa177:
if
    0x000000000000a177: test eax, eax
    0x000000000000a179: mov edx, r13d
    0x000000000000a17c: je 0x9b5e
then
    L := 0x9b5e (3)
else
    0x000000000000a182: jmp 0xa6be
    L := 0xa6be (2)
fi

0xe178:
if
    0x000000000000e178: mov rdi, rbp
    0x000000000000e17b: call 0xd890
    0x000000000000e180: mov edx, 8
    0x000000000000e185: mov rbp, rax
    0x000000000000e188: xor ecx, ecx
    0x000000000000e18a: mov rax, rdx
    0x000000000000e18d: mul rbp
    0x000000000000e190: jo 0xe2aa
then
    0x000000000000e2aa: mov ecx, 1
    0x000000000000e2af: jmp 0xe196
    L := 0xe196 (2)
else
    L := 0xe196 (2)
fi

0x6190:
if
    0x0000000000006190: push rbp
    0x0000000000006191: push rbx
    0x0000000000006192: mov rbx, rdi
    0x0000000000006195: mov rdx, rbx
    0x0000000000006198: mov rcx, -1
    0x000000000000619f: mov esi, 2
    0x00000000000061a4: sub rsp, 0x18
    0x00000000000061a8: mov r8, qword ptr [rip + 0x21b121]
    0x00000000000061af: lea rdi, [rsp + 6]
    0x00000000000061b4: mov rax, qword ptr fs:[0x28]
    0x00000000000061bd: mov qword ptr [rsp + 8], rax
    0x00000000000061c2: xor eax, eax
    0x00000000000061c4: call 0x13660
    0x00000000000061c9: movzx edx, byte ptr [rsp + 6]
    0x00000000000061ce: cmp byte ptr [rbx], dl
    0x00000000000061d0: je 0x61f0
then
    0x00000000000061f0: mov rbp, rax
    0x00000000000061f3: mov rdi, rbx
    0x00000000000061f6: call 0x3950
    0x00000000000061fb: cmp rax, rbp
    0x00000000000061fe: setne al
    0x0000000000006201: jmp 0x61d7
    L := 0x61d7 (2)
else
    0x00000000000061d2: mov eax, 1
    L := 0x61d7 (2)
fi

0xc191:
0x000000000000c191: lea rsi, [rip + 0xde48]
0x000000000000c198: xor edi, edi
0x000000000000c19a: mov edx, 5
0x000000000000c19f: call 0x3930
0x000000000000c1a4: mov rdx, rbp
0x000000000000c1a7: mov rsi, rax
0x000000000000c1aa: mov edi, 1
0x000000000000c1af: xor eax, eax
0x000000000000c1b1: call 0x3cd0
0x000000000000c1b6: jmp 0xc09a
L := 0xc09a (3)

0x16191:
0x0000000000016191: lea rdi, [rax + 0xf]
0x0000000000016195: add r12, 1
0x0000000000016199: jmp 0x15ea8
L := 0x15ea8 (2)

0xe196:
if
    0x000000000000e196: test rax, rax
    0x000000000000e199: js 0xe1f0
then
    L := 0xe1f0 (7)
else
    if
        0x000000000000e19b: test rcx, rcx
        0x000000000000e19e: jne 0xe1f0
    then
        L := 0xe1f0 (7)
    else
        if
            0x000000000000e1a0: test rbp, rbp
            0x000000000000e1a3: mov qword ptr [rbx + 0x10], rbp
            0x000000000000e1a7: je 0xe1f0
        then
            L := 0xe1f0 (7)
        else
            if
                0x000000000000e1a9: mov esi, 0x10
                0x000000000000e1ae: mov rdi, rbp
                0x000000000000e1b1: call 0x3b00
                0x000000000000e1b6: test rax, rax
                0x000000000000e1b9: mov qword ptr [rbx], rax
                0x000000000000e1bc: je 0xe1f0
            then
                L := 0xe1f0 (7)
            else
                0x000000000000e1be: shl rbp, 4
                0x000000000000e1c2: mov qword ptr [rbx + 0x18], 0
                0x000000000000e1ca: mov qword ptr [rbx + 0x20], 0
                0x000000000000e1d2: add rbp, rax
                0x000000000000e1d5: mov qword ptr [rbx + 0x30], r12
                0x000000000000e1d9: mov qword ptr [rbx + 0x38], r13
                0x000000000000e1dd: mov qword ptr [rbx + 8], rbp
                0x000000000000e1e1: mov qword ptr [rbx + 0x40], r14
                0x000000000000e1e5: mov qword ptr [rbx + 0x48], 0
                0x000000000000e1ed: jmp 0xe1fa
                L := 0xe1fa (3)
            fi
        fi
    fi
fi

0x161a0:
if
    0x00000000000161a0: push r12
    0x00000000000161a2: push rbp
    0x00000000000161a3: push rbx
    0x00000000000161a4: mov rbx, rdi
    0x00000000000161a7: call 0x3bc0
    0x00000000000161ac: test eax, eax
    0x00000000000161ae: mov rdi, rbx
    0x00000000000161b1: js 0x16207
then
    L := 0x16207 (2)
else
    if
        0x00000000000161b3: call 0x3c70
        0x00000000000161b8: test eax, eax
        0x00000000000161ba: jne 0x161e8
    then
        if
            0x00000000000161e8: mov rdi, rbx
            0x00000000000161eb: call 0x3bc0
            0x00000000000161f0: xor esi, esi
            0x00000000000161f2: mov edx, 1
            0x00000000000161f7: mov edi, eax
            0x00000000000161f9: call 0x3a10
            0x00000000000161fe: cmp rax, -1
            0x0000000000016202: jne 0x161bc
        then
            L := 0x161bc (2)
        else
            L := 0x16204 (2)
        fi
    else
        L := 0x161bc (2)
    fi
fi

0x161bc:
if
    0x00000000000161bc: mov rdi, rbx
    0x00000000000161bf: call 0x16220
    0x00000000000161c4: test eax, eax
    0x00000000000161c6: je 0x16204
then
    L := 0x16204 (2)
else
    if
        0x00000000000161c8: call 0x37f0
        0x00000000000161cd: mov r12d, dword ptr [rax]
        0x00000000000161d0: mov rdi, rbx
        0x00000000000161d3: mov rbp, rax
        0x00000000000161d6: call 0x38f0
        0x00000000000161db: test r12d, r12d
        0x00000000000161de: jne 0x16210
    then
        0x0000000000016210: mov dword ptr [rbp], r12d
        0x0000000000016214: mov eax, 0xffffffff
        0x0000000000016219: jmp 0x161e0
        L := 0x161e0 (2)
    else
        L := 0x161e0 (2)
    fi
fi

0xc1c0:
0x000000000000c1c0: push r15
0x000000000000c1c2: push r14
0x000000000000c1c4: mov eax, 0x401
0x000000000000c1c9: push r13
0x000000000000c1cb: push r12
0x000000000000c1cd: mov r13, rdi
0x000000000000c1d0: push rbp
0x000000000000c1d1: push rbx
0x000000000000c1d2: lea rbx, [rsi + 1]
0x000000000000c1d6: movabs r14, 0x3fffffffffffffff
0x000000000000c1e0: movabs r15, 0x7ffffffffffffffe
0x000000000000c1ea: sub rsp, 8
0x000000000000c1ee: cmp rsi, 0x401
0x000000000000c1f5: cmovae rbx, rax
0x000000000000c1f9: nop dword ptr [rax]
L := 0xc200 (2)

0x61d7:
if
    0x00000000000061d7: mov rcx, qword ptr [rsp + 8]
    0x00000000000061dc: xor rcx, qword ptr fs:[0x28]
    0x00000000000061e5: jne 0x6203
then
    0x0000000000006203: call 0x3970
    0x0000000000006208: nop dword ptr [rax + rax]
    if
        0x0000000000006210: push r14
        0x0000000000006212: push r13
        0x0000000000006214: push r12
        0x0000000000006216: push rbp
        0x0000000000006217: mov r12d, esi
        0x000000000000621a: push rbx
        0x000000000000621b: mov rbx, rdi
        0x000000000000621e: call 0x3950
        0x0000000000006223: lea rcx, [rax + 1]
        0x0000000000006227: mov eax, 3
        0x000000000000622c: mul rcx
        0x000000000000622f: jo 0x62d2
    then
        0x00000000000062d2: mov esi, 1
        0x00000000000062d7: jmp 0x6237
        L := 0x6237 (2)
    else
        0x0000000000006235: xor esi, esi
        L := 0x6237 (2)
    fi
else
    0x00000000000061e7: add rsp, 0x18
    0x00000000000061eb: pop rbx
    0x00000000000061ec: pop rbp
    0x00000000000061ed: ret 
    L := 0x0 (130)
fi

0x161e0:
0x00000000000161e0: pop rbx
0x00000000000161e1: pop rbp
0x00000000000161e2: pop r12
0x00000000000161e4: ret 
L := 0x0 (130)

0xa1e6:
if
    0x000000000000a1e6: mov eax, dword ptr [rbx + 0x30]
    0x000000000000a1e9: and eax, 0xb000
    0x000000000000a1ee: cmp eax, 0x2000
    0x000000000000a1f3: jne 0xa430
then
    if
        0x000000000000a430: mov rdi, qword ptr [rbx + 0x48]
        0x000000000000a434: mov r8, qword ptr [rip + 0x215bdd]
        0x000000000000a43b: lea rsi, [rbp - 0x2d0]
        0x000000000000a442: mov edx, dword ptr [rip + 0x216ed4]
        0x000000000000a448: mov ecx, 1
        0x000000000000a44d: call 0xed10
        0x000000000000a452: xor esi, esi
        0x000000000000a454: mov rdi, rax
        0x000000000000a457: call 0x10370
        0x000000000000a45c: cmp eax, dword ptr [rip + 0x216eda]
        0x000000000000a462: jle 0x9c7e
    then
        L := 0x9c7e (5)
    else
        L := 0xa468 (2)
    fi
else
    if
        0x000000000000a1f9: mov rax, qword ptr [rbx + 0x40]
        0x000000000000a1fd: lea r13, [rbp - 0x2d0]
        0x000000000000a204: mov rsi, r13
        0x000000000000a207: mov rdi, rax
        0x000000000000a20a: shr rax, 0x20
        0x000000000000a20e: shr rdi, 8
        0x000000000000a212: mov edx, edi
        0x000000000000a214: mov rdi, rax
        0x000000000000a217: and edx, 0xfff
        0x000000000000a21d: and edi, 0xfffff000
        0x000000000000a223: or edi, edx
        0x000000000000a225: call 0xfcf0
        0x000000000000a22a: mov rdi, rax
        0x000000000000a22d: call 0x3950
        0x000000000000a232: cmp eax, dword ptr [rip + 0x21710c]
        0x000000000000a238: jle 0xa240
    then
        L := 0xa240 (2)
    else
        0x000000000000a23a: mov dword ptr [rip + 0x217104], eax
        L := 0xa240 (2)
    fi
fi

0xe1f0:
0x000000000000e1f0: mov rdi, rbx
0x000000000000e1f3: xor ebx, ebx
0x000000000000e1f5: call 0x3e70
L := 0xe1fa (3)

0xe1fa:
0x000000000000e1fa: add rsp, 8
0x000000000000e1fe: mov rax, rbx
0x000000000000e201: pop rbx
0x000000000000e202: pop rbp
0x000000000000e203: pop r12
0x000000000000e205: pop r13
0x000000000000e207: pop r14
0x000000000000e209: pop r15
0x000000000000e20b: ret 
L := 0x0 (130)

0xc200:
if
    0x000000000000c200: mov rdi, rbx
    0x000000000000c203: call 0x3e78
    0x000000000000c208: test rax, rax
    0x000000000000c20b: mov rbp, rax
    0x000000000000c20e: je 0xc24b
then
    L := 0xc24b (5)
else
    L := 0xc210 (2)
fi

0x16204:
0x0000000000016204: mov rdi, rbx
L := 0x16207 (2)

0x16207:
0x0000000000016207: pop rbx
0x0000000000016208: pop rbp
0x0000000000016209: pop r12
0x000000000001620b: jmp 0x38f0
0x00000000000038f0: jmp qword ptr [rip + 0x21c412]
L := 0x21fd08 (1)

0x1020b:
0x000000000001020b: add rbx, 1
0x000000000001020f: add ebp, 1
L := 0x10212 (3)

0x10212:
if
    0x0000000000010212: cmp rbx, r13
    0x0000000000010215: jae 0x102dd
then
    L := 0x102dd (7)
else
    L := 0x1021b (2)
fi

0xc210:
if
    0x000000000000c210: mov rdx, rbx
    0x000000000000c213: mov rsi, rax
    0x000000000000c216: mov rdi, r13
    0x000000000000c219: call 0x38b0
    0x000000000000c21e: test rax, rax
    0x000000000000c221: mov r12, rax
    0x000000000000c224: js 0xc278
then
    if
        0x000000000000c278: call 0x37f0
        0x000000000000c27d: cmp dword ptr [rax], 0x22
        0x000000000000c280: je 0xc226
    then
        L := 0xc226 (2)
    else
        0x000000000000c282: mov rdi, rbp
        0x000000000000c285: xor ebp, ebp
        0x000000000000c287: call 0x3e70
        0x000000000000c28c: jmp 0xc24b
        L := 0xc24b (5)
    fi
else
    L := 0xc226 (2)
fi

0x1021b:
if
    0x000000000001021b: movzx eax, byte ptr [rbx]
    0x000000000001021e: cmp al, 0x3f
    0x0000000000010220: jle 0x10200
then
    if
        0x0000000000010200: cmp al, 0x25
        0x0000000000010202: jge 0x1020b
    then
        L := 0x1020b (5)
    else
        if
            0x0000000000010204: sub eax, 0x20
            0x0000000000010207: cmp al, 3
            0x0000000000010209: ja 0x10231
        then
            L := 0x10231 (3)
        else
            L := 0x1020b (5)
        fi
    fi
else
    if
        0x0000000000010222: cmp al, 0x41
        0x0000000000010224: jl 0x10231
    then
        L := 0x10231 (3)
    else
        if
            0x0000000000010226: cmp al, 0x5f
            0x0000000000010228: jle 0x1020b
        then
            L := 0x1020b (5)
        else
            if
                0x000000000001022a: sub eax, 0x61
                0x000000000001022d: cmp al, 0x1d
                0x000000000001022f: jbe 0x1020b
            then
                L := 0x1020b (5)
            else
                L := 0x10231 (3)
            fi
        fi
    fi
fi

0x16220:
if
    0x0000000000016220: test rdi, rdi
    0x0000000000016223: push rbx
    0x0000000000016224: mov rbx, rdi
    0x0000000000016227: je 0x1623a
then
    L := 0x1623a (3)
else
    if
        0x0000000000016229: call 0x3c70
        0x000000000001622e: test eax, eax
        0x0000000000016230: je 0x1623a
    then
        L := 0x1623a (3)
    else
        if
            0x0000000000016232: test dword ptr [rbx], 0x100
            0x0000000000016238: jne 0x16248
        then
            0x0000000000016248: mov rdi, rbx
            0x000000000001624b: mov edx, 1
            0x0000000000016250: xor esi, esi
            0x0000000000016252: call 0x16260
            0x0000000000016257: mov rdi, rbx
            0x000000000001625a: pop rbx
            0x000000000001625b: jmp 0x3c10
            L := 0x3c10 (2)
        else
            L := 0x1623a (3)
        fi
    fi
fi

0xc226:
if
    0x000000000000c226: cmp rbx, r12
    0x000000000000c229: ja 0xc290
then
    0x000000000000c290: mov byte ptr [rbp + r12], 0
    0x000000000000c296: jmp 0xc24b
    L := 0xc24b (5)
else
    if
        0x000000000000c22b: mov rdi, rbp
        0x000000000000c22e: call 0x3e70
        0x000000000000c233: cmp rbx, r14
        0x000000000000c236: ja 0xc260
    then
        if
            0x000000000000c260: cmp rbx, r15
            0x000000000000c263: ja 0xc2a0
        then
            0x000000000000c2a0: call 0x37f0
            0x000000000000c2a5: xor ebp, ebp
            0x000000000000c2a7: mov dword ptr [rax], 0xc
            0x000000000000c2ad: jmp 0xc24b
            L := 0xc24b (5)
        else
            0x000000000000c265: movabs rbx, 0x7fffffffffffffff
            0x000000000000c26f: jmp 0xc200
            L := 0xc200 (2)
        fi
    else
        if
            0x000000000000c238: add rbx, rbx
            0x000000000000c23b: mov rdi, rbx
            0x000000000000c23e: call 0x3e78
            0x000000000000c243: test rax, rax
            0x000000000000c246: mov rbp, rax
            0x000000000000c249: jne 0xc210
        then
            L := 0xc210 (2)
        else
            L := 0xc24b (5)
        fi
    fi
fi

0xe231:
0x000000000000e231: pxor xmm0, xmm0
0x000000000000e235: cvtsi2ss xmm0, rbp
L := 0xe23a (2)

0x10231:
0x0000000000010231: mov qword ptr [r12], 0
0x0000000000010239: jmp 0x10260
L := 0x10260 (2)

0x6237:
if
    0x0000000000006237: test rax, rax
    0x000000000000623a: js 0x62dc
then
    L := 0x62dc (2)
else
    if
        0x0000000000006240: test rsi, rsi
        0x0000000000006243: jne 0x62dc
    then
        L := 0x62dc (2)
    else
        0x0000000000006249: lea rdi, [rcx + rcx*2]
        0x000000000000624d: lea r14, [rip + 0x21ad8c]
        0x0000000000006254: call 0x14480
        0x0000000000006259: mov r13, rax
        0x000000000000625c: mov rbp, rax
        L := 0x625f (3)
    fi
fi

0xe23a:
if
    0x000000000000e23a: divss xmm0, xmm1
    0x000000000000e23e: ucomiss xmm0, dword ptr [rip + 0xc1a7]
    0x000000000000e245: jae 0xe1f0
then
    L := 0xe1f0 (7)
else
    if
        0x000000000000e247: ucomiss xmm0, dword ptr [rip + 0xc1a2]
        0x000000000000e24e: jb 0xe2a0
    then
        0x000000000000e2a0: cvttss2si rbp, xmm0
        0x000000000000e2a5: jmp 0xe178
        L := 0xe178 (3)
    else
        0x000000000000e250: subss xmm0, dword ptr [rip + 0xc198]
        0x000000000000e258: movabs rax, 0x8000000000000000
        0x000000000000e262: cvttss2si rbp, xmm0
        0x000000000000e267: xor rbp, rax
        0x000000000000e26a: jmp 0xe178
        L := 0xe178 (3)
    fi
fi

0x1623a:
0x000000000001623a: mov rdi, rbx
0x000000000001623d: pop rbx
0x000000000001623e: jmp 0x3c10
L := 0x3c10 (2)

0xa240:
if
    0x000000000000a240: mov rax, qword ptr [rbx + 0x40]
    0x000000000000a244: mov rsi, r13
    0x000000000000a247: movzx edx, al
    0x000000000000a24a: shr rax, 0xc
    0x000000000000a24e: mov rdi, rax
    0x000000000000a251: xor dil, dil
    0x000000000000a254: or edi, edx
    0x000000000000a256: call 0xfcf0
    0x000000000000a25b: mov rdi, rax
    0x000000000000a25e: call 0x3950
    0x000000000000a263: mov edx, dword ptr [rip + 0x2170d7]
    0x000000000000a269: cmp eax, edx
    0x000000000000a26b: jle 0xa275
then
    L := 0xa275 (2)
else
    0x000000000000a26d: mov dword ptr [rip + 0x2170cd], eax
    0x000000000000a273: mov edx, eax
    L := 0xa275 (2)
fi

0xc24b:
0x000000000000c24b: add rsp, 8
0x000000000000c24f: mov rax, rbp
0x000000000000c252: pop rbx
0x000000000000c253: pop rbp
0x000000000000c254: pop r12
0x000000000000c256: pop r13
0x000000000000c258: pop r14
0x000000000000c25a: pop r15
0x000000000000c25c: ret 
L := 0x0 (130)

0x10251:
if
    0x0000000000010251: mov rdi, r12
    0x0000000000010254: add rbx, r15
    0x0000000000010257: call 0x3e10
    0x000000000001025c: test eax, eax
    0x000000000001025e: jne 0x10212
then
    L := 0x10212 (3)
else
    L := 0x10260 (2)
fi

0x625f:
if
    0x000000000000625f: movzx eax, byte ptr [rbx]
    0x0000000000006262: test al, al
    0x0000000000006264: je 0x628e
then
    L := 0x628e (2)
else
    L := 0x6266 (2)
fi

0x10260:
if
    0x0000000000010260: mov rdx, r13
    0x0000000000010263: mov rcx, r12
    0x0000000000010266: mov rsi, rbx
    0x0000000000010269: sub rdx, rbx
    0x000000000001026c: mov rdi, r14
    0x000000000001026f: call 0x15310
    0x0000000000010274: cmp rax, -1
    0x0000000000010278: mov r15, rax
    0x000000000001027b: je 0x102c8
then
    if
        0x00000000000102c8: test byte ptr [rsp + 0xc], 1
        0x00000000000102cd: je 0x1020b
    then
        L := 0x1020b (5)
    else
        0x00000000000102d3: nop dword ptr [rax + rax]
        L := 0x102d8 (4)
    fi
else
    if
        0x000000000001027d: cmp rax, -2
        0x0000000000010281: je 0x10300
    then
        if
            0x0000000000010300: test byte ptr [rsp + 0xc], 1
            0x0000000000010305: jne 0x102d8
        then
            L := 0x102d8 (4)
        else
            0x0000000000010307: add ebp, 1
            0x000000000001030a: mov rbx, r13
            0x000000000001030d: jmp 0x10212
            L := 0x10212 (3)
        fi
    else
        if
            0x0000000000010283: mov edi, dword ptr [rsp + 0x1c]
            0x0000000000010287: test rax, rax
            0x000000000001028a: mov eax, 1
            0x000000000001028f: cmove r15, rax
            0x0000000000010293: call 0x3c00
            0x0000000000010298: test eax, eax
            0x000000000001029a: jns 0x10240
        then
            if
                0x0000000000010240: mov ecx, 0x7fffffff
                0x0000000000010245: sub ecx, ebp
                0x0000000000010247: cmp ecx, eax
                0x0000000000010249: jl 0x10360
            then
                L := 0x10360 (2)
            else
                0x000000000001024f: add ebp, eax
                L := 0x10251 (3)
            fi
        else
            if
                0x000000000001029c: test byte ptr [rsp + 0xc], 2
                0x00000000000102a1: jne 0x102d8
            then
                L := 0x102d8 (4)
            else
                if
                    0x00000000000102a3: mov edi, dword ptr [rsp + 0x1c]
                    0x00000000000102a7: call 0x3870
                    0x00000000000102ac: test eax, eax
                    0x00000000000102ae: jne 0x10251
                then
                    L := 0x10251 (3)
                else
                    if
                        0x00000000000102b0: cmp ebp, 0x7fffffff
                        0x00000000000102b6: je 0x10360
                    then
                        L := 0x10360 (2)
                    else
                        0x00000000000102bc: add ebp, 1
                        0x00000000000102bf: jmp 0x10251
                        L := 0x10251 (3)
                    fi
                fi
            fi
        fi
    fi
fi

0x16260:
if
    0x0000000000016260: mov rax, qword ptr [rdi + 8]
    0x0000000000016264: cmp qword ptr [rdi + 0x10], rax
    0x0000000000016268: je 0x16270
then
    if
        0x0000000000016270: mov rax, qword ptr [rdi + 0x20]
        0x0000000000016274: cmp qword ptr [rdi + 0x28], rax
        0x0000000000016278: jne 0x1626a
    then
        L := 0x1626a (3)
    else
        if
            0x000000000001627a: cmp qword ptr [rdi + 0x48], 0
            0x000000000001627f: jne 0x1626a
        then
            L := 0x1626a (3)
        else
            if
                0x0000000000016281: push r12
                0x0000000000016283: push rbp
                0x0000000000016284: mov r12d, edx
                0x0000000000016287: push rbx
                0x0000000000016288: mov rbp, rsi
                0x000000000001628b: mov rbx, rdi
                0x000000000001628e: call 0x3bc0
                0x0000000000016293: mov edx, r12d
                0x0000000000016296: mov rsi, rbp
                0x0000000000016299: mov edi, eax
                0x000000000001629b: call 0x3a10
                0x00000000000162a0: cmp rax, -1
                0x00000000000162a4: je 0x162b2
            then
                L := 0x162b2 (2)
            else
                0x00000000000162a6: and dword ptr [rbx], 0xffffffef
                0x00000000000162a9: mov qword ptr [rbx + 0x90], rax
                0x00000000000162b0: xor eax, eax
                L := 0x162b2 (2)
            fi
        fi
    fi
else
    L := 0x1626a (3)
fi

0x6266:
if
    0x0000000000006266: add rbx, 1
    0x000000000000626a: cmp al, 0x2f
    0x000000000000626c: jne 0x6273
then
    L := 0x6273 (2)
else
    if
        0x000000000000626e: test r12b, r12b
        0x0000000000006271: jne 0x62c8
    then
        0x00000000000062c8: mov byte ptr [rbp], 0x2f
        0x00000000000062cc: add rbp, 1
        0x00000000000062d0: jmp 0x625f
        L := 0x625f (3)
    else
        L := 0x6273 (2)
    fi
fi

0x1626a:
0x000000000001626a: jmp 0x3d40
0x0000000000003d40: jmp qword ptr [rip + 0x21c1ea]
L := 0x21ff30 (1)

0x6273:
if
    0x0000000000006273: movzx edx, al
    0x0000000000006276: cmp byte ptr [r14 + rdx], 0
    0x000000000000627b: mov r8, rdx
    0x000000000000627e: je 0x62a0
then
    0x00000000000062a0: lea rcx, [rip + 0x11952]
    0x00000000000062a7: mov rdi, rbp
    0x00000000000062aa: mov rdx, -1
    0x00000000000062b1: mov esi, 1
    0x00000000000062b6: xor eax, eax
    0x00000000000062b8: add rbp, 3
    0x00000000000062bc: call 0x3e60
    0x00000000000062c1: jmp 0x625f
    L := 0x625f (3)
else
    if
        0x0000000000006280: mov byte ptr [rbp], al
        0x0000000000006283: movzx eax, byte ptr [rbx]
        0x0000000000006286: add rbp, 1
        0x000000000000628a: test al, al
        0x000000000000628c: jne 0x6266
    then
        L := 0x6266 (2)
    else
        L := 0x628e (2)
    fi
fi

0xa275:
if
    0x000000000000a275: mov eax, dword ptr [rip + 0x2170c9]
    0x000000000000a27b: lea eax, [rdx + rax + 2]
    0x000000000000a27f: cmp eax, dword ptr [rip + 0x2170b7]
    0x000000000000a285: jle 0x9c7e
then
    L := 0x9c7e (5)
else
    0x000000000000a28b: jmp 0xa468
    L := 0xa468 (2)
fi

0xe27b:
0x000000000000e27b: mov rax, rbp
0x000000000000e27e: pxor xmm0, xmm0
0x000000000000e282: shr rax, 1
0x000000000000e285: and ebp, 1
0x000000000000e288: or rax, rbp
0x000000000000e28b: cvtsi2ss xmm0, rax
0x000000000000e290: addss xmm0, xmm0
0x000000000000e294: jmp 0xe23a
L := 0xe23a (2)

0x628e:
0x000000000000628e: mov byte ptr [rbp], 0
0x0000000000006292: mov rax, r13
0x0000000000006295: pop rbx
0x0000000000006296: pop rbp
0x0000000000006297: pop r12
0x0000000000006299: pop r13
0x000000000000629b: pop r14
0x000000000000629d: ret 
L := 0x0 (130)

0xa29d:
if
    0x000000000000a29d: call 0x37f0
    0x000000000000a2a2: mov rcx, rax
    0x000000000000a2a5: mov eax, dword ptr [rax]
    0x000000000000a2a7: cmp eax, 0x5f
    0x000000000000a2aa: sete sil
    0x000000000000a2ae: cmp eax, 0x3d
    0x000000000000a2b1: sete dl
    0x000000000000a2b4: sub eax, 0x16
    0x000000000000a2b7: or edx, esi
    0x000000000000a2b9: and eax, 0xffffffef
    0x000000000000a2bc: je 0xa2c3
then
    L := 0xa2c3 (2)
else
    if
        0x000000000000a2be: test sil, sil
        0x000000000000a2c1: je 0xa2ce
    then
        L := 0xa2ce (2)
    else
        L := 0xa2c3 (2)
    fi
fi

0x162b2:
0x00000000000162b2: pop rbx
0x00000000000162b3: pop rbp
0x00000000000162b4: pop r12
0x00000000000162b6: ret 
L := 0x0 (130)

0xc2c0:
if
    0x000000000000c2c0: push r15
    0x000000000000c2c2: push r14
    0x000000000000c2c4: mov r15, rsi
    0x000000000000c2c7: push r13
    0x000000000000c2c9: push r12
    0x000000000000c2cb: mov r13, rcx
    0x000000000000c2ce: push rbp
    0x000000000000c2cf: push rbx
    0x000000000000c2d0: mov rbp, rdx
    0x000000000000c2d3: sub rsp, 0x28
    0x000000000000c2d7: mov qword ptr [rsp + 8], rdi
    0x000000000000c2dc: mov qword ptr [rsp + 0x18], rdx
    0x000000000000c2e1: call 0x3950
    0x000000000000c2e6: mov r14, qword ptr [r15]
    0x000000000000c2e9: mov qword ptr [rsp], -1
    0x000000000000c2f1: test r14, r14
    0x000000000000c2f4: je 0xc3ad
then
    L := 0xc3ad (3)
else
    0x000000000000c2fa: mov r12, rax
    0x000000000000c2fd: mov byte ptr [rsp + 0x17], 0
    0x000000000000c302: xor ebx, ebx
    0x000000000000c304: jmp 0xc357
    L := 0xc357 (3)
fi

0xa2c3:
0x000000000000a2c3: mov rax, qword ptr [rbx + 0x18]
0x000000000000a2c7: mov qword ptr [rip + 0x216022], rax
L := 0xa2ce (2)

0xa2ce:
if
    0x000000000000a2ce: lea rax, [rip + 0x215d4d]
    0x000000000000a2d5: test dl, dl
    0x000000000000a2d7: mov qword ptr [rbx + 0xb0], rax
    0x000000000000a2de: je 0xa550
then
    0x000000000000a550: mov dword ptr [rbx + 0xbc], 0
    L := 0xa55a (2)
else
    L := 0xa2e4 (2)
fi

0x102d8:
0x00000000000102d8: mov ebp, 0xffffffff
L := 0x102dd (7)

0x62dc:
0x00000000000062dc: call 0x146d0
0x00000000000062e1: nop dword ptr [rax + rax]
0x00000000000062e6: nop word ptr cs:[rax + rax]
if
    0x00000000000062f0: push rbx
    0x00000000000062f1: mov rbx, qword ptr [rip + 0x21b0b8]
    0x00000000000062f8: mov rax, rbx
    0x00000000000062fb: shr rax, 1
    0x00000000000062fe: add rax, rbx
    0x0000000000006301: cmp rax, qword ptr [rip + 0x21b090]
    0x0000000000006308: ja 0x6400
then
    if
        0x0000000000006400: mov rdi, qword ptr [rip + 0x21af99]
        0x0000000000006407: call 0x3e70
        0x000000000000640c: mov edx, 0x18
        0x0000000000006411: xor ecx, ecx
        0x0000000000006413: mov rax, rdx
        0x0000000000006416: mul rbx
        0x0000000000006419: jo 0x6476
    then
        L := 0x6476 (2)
    else
        L := 0x641b (2)
    fi
else
    L := 0x630e (2)
fi

0x102dd:
if
    0x00000000000102dd: mov rsi, qword ptr [rsp + 0x28]
    0x00000000000102e2: xor rsi, qword ptr fs:[0x28]
    0x00000000000102eb: mov eax, ebp
    0x00000000000102ed: jne 0x1036a
then
    0x000000000001036a: call 0x3970
    0x000000000001036f: nop 
    0x0000000000010370: push rbp
    0x0000000000010371: push rbx
    0x0000000000010372: mov ebp, esi
    0x0000000000010374: mov rbx, rdi
    0x0000000000010377: sub rsp, 8
    0x000000000001037b: call 0x3950
    0x0000000000010380: add rsp, 8
    0x0000000000010384: mov edx, ebp
    0x0000000000010386: mov rdi, rbx
    0x0000000000010389: pop rbx
    0x000000000001038a: pop rbp
    0x000000000001038b: mov rsi, rax
    0x000000000001038e: jmp 0x101b0
    if
        0x00000000000101b0: push r15
        0x00000000000101b2: push r14
        0x00000000000101b4: push r13
        0x00000000000101b6: push r12
        0x00000000000101b8: lea r13, [rdi + rsi]
        0x00000000000101bc: push rbp
        0x00000000000101bd: push rbx
        0x00000000000101be: mov rbx, rdi
        0x00000000000101c1: sub rsp, 0x38
        0x00000000000101c5: mov rax, qword ptr fs:[0x28]
        0x00000000000101ce: mov qword ptr [rsp + 0x28], rax
        0x00000000000101d3: xor eax, eax
        0x00000000000101d5: mov dword ptr [rsp + 0xc], edx
        0x00000000000101d9: call 0x3940
        0x00000000000101de: cmp rax, 1
        0x00000000000101e2: jbe 0x10318
    then
        if
            0x0000000000010318: xor ebp, ebp
            0x000000000001031a: cmp rbx, r13
            0x000000000001031d: jae 0x102dd
        then
            L := 0x102dd (7)
        else
            0x000000000001031f: call 0x3e50
            0x0000000000010324: mov edx, dword ptr [rsp + 0xc]
            0x0000000000010328: mov rcx, qword ptr [rax]
            0x000000000001032b: xor ebp, ebp
            0x000000000001032d: and edx, 2
            L := 0x10330 (2)
        fi
    else
        if
            0x00000000000101e8: xor ebp, ebp
            0x00000000000101ea: cmp rbx, r13
            0x00000000000101ed: jae 0x102dd
        then
            L := 0x102dd (7)
        else
            0x00000000000101f3: lea r12, [rsp + 0x20]
            0x00000000000101f8: lea r14, [rsp + 0x1c]
            0x00000000000101fd: jmp 0x1021b
            L := 0x1021b (2)
        fi
    fi
else
    0x00000000000102ef: add rsp, 0x38
    0x00000000000102f3: pop rbx
    0x00000000000102f4: pop rbp
    0x00000000000102f5: pop r12
    0x00000000000102f7: pop r13
    0x00000000000102f9: pop r14
    0x00000000000102fb: pop r15
    0x00000000000102fd: ret 
    L := 0x0 (130)
fi

0xa2e4:
if
    0x000000000000a2e4: mov eax, dword ptr [rip + 0x21704e]
    0x000000000000a2ea: test eax, eax
    0x000000000000a2ec: je 0xa7f0
then
    0x000000000000a7f0: xor r14d, r14d
    0x000000000000a7f3: jmp 0xa4a0
    L := 0xa4a0 (2)
else
    0x000000000000a2f2: mov dword ptr [rbx + 0xbc], 0
    0x000000000000a2fc: jmp 0x9b9f
    L := 0x9b9f (2)
fi

0x630e:
if
    0x000000000000630e: test rbx, rbx
    0x0000000000006311: je 0x6342
then
    L := 0x6342 (2)
else
    0x0000000000006313: lea rcx, [rbx + rbx*4]
    0x0000000000006317: mov rax, qword ptr [rip + 0x21b0a2]
    0x000000000000631e: mov rdx, qword ptr [rip + 0x21b07b]
    0x0000000000006325: lea rcx, [rcx + rcx*4]
    0x0000000000006329: lea rcx, [rax + rcx*8]
    0x000000000000632d: nop dword ptr [rax]
    L := 0x6330 (2)
fi

0xa31b:
if
    0x000000000000a31b: mov rdi, qword ptr [rbp - 0x388]
    0x000000000000a322: mov byte ptr [rbp - 0x392], r8b
    0x000000000000a329: mov byte ptr [rbp - 0x391], dl
    0x000000000000a32f: mov byte ptr [rbp - 0x390], cl
    0x000000000000a335: call 0x3950
    0x000000000000a33a: mov rdi, r15
    0x000000000000a33d: mov r12, rax
    0x000000000000a340: call 0x3950
    0x000000000000a345: lea rax, [r12 + rax + 0x20]
    0x000000000000a34a: movzx ecx, byte ptr [rbp - 0x390]
    0x000000000000a351: movzx r10d, byte ptr [r15 + 1]
    0x000000000000a356: movzx edx, byte ptr [rbp - 0x391]
    0x000000000000a35d: movzx r8d, byte ptr [rbp - 0x392]
    0x000000000000a365: and rax, 0xfffffffffffffff0
    0x000000000000a369: sub rsp, rax
    0x000000000000a36c: lea rdi, [rsp + 0xf]
    0x000000000000a371: and rdi, 0xfffffffffffffff0
    0x000000000000a375: cmp cl, 0x2e
    0x000000000000a378: mov r12, rdi
    0x000000000000a37b: je 0xa4f0
then
    if
        0x000000000000a4f0: test r10b, r10b
        0x000000000000a4f3: mov rax, rdi
        0x000000000000a4f6: je 0xa3bd
    then
        L := 0xa3bd (4)
    else
        0x000000000000a4fc: jmp 0xa381
        L := 0xa381 (2)
    fi
else
    L := 0xa381 (2)
fi

0x6330:
if
    0x0000000000006330: mov qword ptr [rdx], rax
    0x0000000000006333: add rax, 0xc8
    0x0000000000006339: add rdx, 8
    0x000000000000633d: cmp rcx, rax
    0x0000000000006340: jne 0x6330
then
    L := 0x6330 (2)
else
    L := 0x6342 (2)
fi

0x10330:
if
    0x0000000000010330: add rbx, 1
    0x0000000000010334: movzx eax, byte ptr [rbx - 1]
    0x0000000000010338: movzx eax, word ptr [rcx + rax*2]
    0x000000000001033c: test ah, 0x40
    0x000000000001033f: jne 0x10349
then
    L := 0x10349 (2)
else
    if
        0x0000000000010341: test edx, edx
        0x0000000000010343: jne 0x102d8
    then
        L := 0x102d8 (4)
    else
        if
            0x0000000000010345: test al, 2
            0x0000000000010347: jne 0x10354
        then
            L := 0x10354 (2)
        else
            L := 0x10349 (2)
        fi
    fi
fi

0x16340:
if
    0x0000000000016340: lea rax, [rip + 0x209cc1]
    0x0000000000016347: test rax, rax
    0x000000000001634a: je 0x16360
then
    0x0000000000016360: xor edx, edx
    0x0000000000016362: xor esi, esi
    0x0000000000016364: jmp 0x3d70
    L := 0x3d70 (2)
else
    0x000000000001634c: mov rdx, qword ptr [rax]
    0x000000000001634f: xor esi, esi
    0x0000000000016351: jmp 0x3d70
    L := 0x3d70 (2)
fi

0x6342:
if
    0x0000000000006342: cmp dword ptr [rip + 0x21afe7], -1
    0x0000000000006349: je 0x63fc
then
    L := 0x63fc (2)
else
    if
        0x000000000000634f: lea rdi, [rip + 0x219faa]
        0x0000000000006356: call 0x3ae0
        0x000000000000635b: test eax, eax
        0x000000000000635d: mov ecx, dword ptr [rip + 0x21afcd]
        0x0000000000006363: je 0x63b0
    then
        0x00000000000063b0: mov rsi, qword ptr [rip + 0x21aff9]
        0x00000000000063b7: mov rdi, qword ptr [rip + 0x21afe2]
        L := 0x63be (2)
    else
        if
            0x0000000000006365: cmp ecx, 3
            0x0000000000006368: je 0x6457
        then
            0x0000000000006457: lea rcx, [rip + 0x1066a]
            0x000000000000645e: lea rsi, [rip + 0x1179b]
            0x0000000000006465: lea rdi, [rip + 0x1179d]
            0x000000000000646c: mov edx, 0xee5
            0x0000000000006471: call 0x3a30
            L := 0x6476 (2)
        else
            if
                0x000000000000636e: mov rsi, qword ptr [rip + 0x21b03b]
                0x0000000000006375: mov rdi, qword ptr [rip + 0x21b024]
                0x000000000000637c: test rsi, rsi
                0x000000000000637f: je 0x63a3
            then
                L := 0x63a3 (2)
            else
                0x0000000000006381: mov rdx, qword ptr [rip + 0x21b038]
                0x0000000000006388: lea r8, [rdi + rsi*8]
                0x000000000000638c: mov rax, rdi
                0x000000000000638f: nop 
                L := 0x6390 (2)
            fi
        fi
    fi
fi

0xc347:
if
    0x000000000000c347: add rbx, 1
    0x000000000000c34b: add rbp, r13
    0x000000000000c34e: mov r14, qword ptr [r15 + rbx*8]
    0x000000000000c352: test r14, r14
    0x000000000000c355: je 0xc398
then
    L := 0xc398 (2)
else
    L := 0xc357 (3)
fi

0x10349:
if
    0x0000000000010349: cmp ebp, 0x7fffffff
    0x000000000001034f: je 0x102dd
then
    L := 0x102dd (7)
else
    0x0000000000010351: add ebp, 1
    L := 0x10354 (2)
fi

0xe350:
if
    0x000000000000e350: push r12
    0x000000000000e352: push rbp
    0x000000000000e353: mov r12, rdi
    0x000000000000e356: push rbx
    0x000000000000e357: cmp qword ptr [rdi + 0x40], 0
    0x000000000000e35c: mov rbp, qword ptr [rdi]
    0x000000000000e35f: mov rax, qword ptr [rdi + 8]
    0x000000000000e363: je 0xe3b3
then
    L := 0xe3b3 (3)
else
    if
        0x000000000000e365: cmp qword ptr [rdi + 0x20], 0
        0x000000000000e36a: je 0xe3b3
    then
        L := 0xe3b3 (3)
    else
        if
            0x000000000000e36c: cmp rbp, rax
            0x000000000000e36f: jae 0xe3ec
        then
            L := 0xe3ec (3)
        else
            0x000000000000e371: nop dword ptr [rax]
            L := 0xe378 (2)
        fi
    fi
fi

0x10354:
if
    0x0000000000010354: cmp r13, rbx
    0x0000000000010357: jne 0x10330
then
    L := 0x10330 (2)
else
    0x0000000000010359: jmp 0x102dd
    L := 0x102dd (7)
fi

0xc357:
if
    0x000000000000c357: mov rsi, qword ptr [rsp + 8]
    0x000000000000c35c: mov rdx, r12
    0x000000000000c35f: mov rdi, r14
    0x000000000000c362: call 0x3800
    0x000000000000c367: test eax, eax
    0x000000000000c369: jne 0xc347
then
    L := 0xc347 (3)
else
    if
        0x000000000000c36b: mov rdi, r14
        0x000000000000c36e: call 0x3950
        0x000000000000c373: cmp rax, r12
        0x000000000000c376: je 0xc3d0
    then
        0x000000000000c3d0: mov qword ptr [rsp], rbx
        0x000000000000c3d4: jmp 0xc3ad
        L := 0xc3ad (3)
    else
        if
            0x000000000000c378: cmp qword ptr [rsp], -1
            0x000000000000c37d: jne 0xc310
        then
            if
                0x000000000000c310: mov rax, qword ptr [rsp + 0x18]
                0x000000000000c315: test rax, rax
                0x000000000000c318: je 0xc3c0
            then
                0x000000000000c3c0: mov byte ptr [rsp + 0x17], 1
                0x000000000000c3c5: jmp 0xc347
                L := 0xc347 (3)
            else
                0x000000000000c31e: mov rdi, qword ptr [rsp]
                0x000000000000c322: mov rdx, r13
                0x000000000000c325: mov rsi, rbp
                0x000000000000c328: imul rdi, r13
                0x000000000000c32c: add rdi, rax
                0x000000000000c32f: call 0x3ad0
                0x000000000000c334: test eax, eax
                0x000000000000c336: movzx eax, byte ptr [rsp + 0x17]
                0x000000000000c33b: mov ecx, 1
                0x000000000000c340: cmovne eax, ecx
                0x000000000000c343: mov byte ptr [rsp + 0x17], al
                L := 0xc347 (3)
            fi
        else
            if
                0x000000000000c37f: mov qword ptr [rsp], rbx
                0x000000000000c383: add rbx, 1
                0x000000000000c387: add rbp, r13
                0x000000000000c38a: mov r14, qword ptr [r15 + rbx*8]
                0x000000000000c38e: test r14, r14
                0x000000000000c391: jne 0xc357
            then
                L := 0xc357 (3)
            else
                0x000000000000c393: nop dword ptr [rax + rax]
                L := 0xc398 (2)
            fi
        fi
    fi
fi

0x10360:
0x0000000000010360: mov ebp, 0x7fffffff
0x0000000000010365: jmp 0x102dd
L := 0x102dd (7)

0xe378:
if
    0x000000000000e378: mov rdi, qword ptr [rbp]
    0x000000000000e37c: test rdi, rdi
    0x000000000000e37f: je 0xe3a6
then
    L := 0xe3a6 (2)
else
    0x000000000000e381: mov rbx, rbp
    0x000000000000e384: jmp 0xe393
    L := 0xe393 (2)
fi

0xa381:
0x000000000000a381: mov rsi, r15
0x000000000000a384: jmp 0xa39b
L := 0xa39b (2)

0x6390:
if
    0x0000000000006390: mov qword ptr [rax], rdx
    0x0000000000006393: add rax, 8
    0x0000000000006397: add rdx, 0xc8
    0x000000000000639e: cmp rax, r8
    0x00000000000063a1: jne 0x6390
then
    L := 0x6390 (2)
else
    L := 0x63a3 (2)
fi

0xe393:
if
    0x000000000000e393: call qword ptr [r12 + 0x40]
    0x000000000000e398: mov rbx, qword ptr [rbx + 8]
    0x000000000000e39c: test rbx, rbx
    0x000000000000e39f: jne 0xe390
then
    0x000000000000e390: mov rdi, qword ptr [rbx]
    L := 0xe393 (2)
else
    0x000000000000e3a1: mov rax, qword ptr [r12 + 8]
    L := 0xe3a6 (2)
fi

0xc398:
0x000000000000c398: cmp byte ptr [rsp + 0x17], 0
0x000000000000c39d: mov rax, -2
0x000000000000c3a4: cmove rax, qword ptr [rsp]
0x000000000000c3a9: mov qword ptr [rsp], rax
L := 0xc3ad (3)

0xa39b:
if
    0x000000000000a39b: lea rax, [rdi + 1]
    0x000000000000a39f: add rsi, 1
    0x000000000000a3a3: test r10b, r10b
    0x000000000000a3a6: mov byte ptr [rax - 1], cl
    0x000000000000a3a9: jne 0xa390
then
    0x000000000000a390: mov ecx, r10d
    0x000000000000a393: movzx r10d, byte ptr [rsi + 1]
    0x000000000000a398: mov rdi, rax
    L := 0xa39b (2)
else
    if
        0x000000000000a3ab: cmp r15, rsi
        0x000000000000a3ae: jae 0xa3bd
    then
        L := 0xa3bd (4)
    else
        if
            0x000000000000a3b0: cmp byte ptr [rsi - 1], 0x2f
            0x000000000000a3b4: je 0xa3bd
        then
            L := 0xa3bd (4)
        else
            0x000000000000a3b6: mov byte ptr [rax], 0x2f
            0x000000000000a3b9: lea rax, [rdi + 2]
            L := 0xa3bd (4)
        fi
    fi
fi

0x63a3:
0x00000000000063a3: mov eax, 1
0x00000000000063a8: jmp 0x63be
L := 0x63be (2)

0xe3a6:
if
    0x000000000000e3a6: add rbp, 0x10
    0x000000000000e3aa: cmp rax, rbp
    0x000000000000e3ad: ja 0xe378
then
    L := 0xe378 (2)
else
    0x000000000000e3af: mov rbp, qword ptr [r12]
    L := 0xe3b3 (3)
fi

0xc3ad:
0x000000000000c3ad: mov rax, qword ptr [rsp]
0x000000000000c3b1: add rsp, 0x28
0x000000000000c3b5: pop rbx
0x000000000000c3b6: pop rbp
0x000000000000c3b7: pop r12
0x000000000000c3b9: pop r13
0x000000000000c3bb: pop r14
0x000000000000c3bd: pop r15
0x000000000000c3bf: ret 
L := 0x0 (130)

0xe3b3:
if
    0x000000000000e3b3: cmp rbp, rax
    0x000000000000e3b6: jae 0xe3ec
then
    L := 0xe3ec (3)
else
    0x000000000000e3b8: nop dword ptr [rax + rax]
    L := 0xe3c0 (2)
fi

0xa3bd:
if
    0x000000000000a3bd: test dl, dl
    0x000000000000a3bf: je 0xa3e2
then
    L := 0xa3e2 (2)
else
    0x000000000000a3c1: mov rcx, qword ptr [rbp - 0x388]
    0x000000000000a3c8: nop dword ptr [rax + rax]
    L := 0xa3d0 (2)
fi

0x63be:
0x00000000000063be: cmp ecx, 4
0x00000000000063c1: mov edx, 0
0x00000000000063c6: cmove edx, dword ptr [rip + 0x21af67]
0x00000000000063cd: cdqe 
0x00000000000063cf: movzx r8d, byte ptr [rip + 0x21af1d]
0x00000000000063d7: add edx, ecx
0x00000000000063d9: lea rdx, [rax + rdx*2]
0x00000000000063dd: movzx eax, byte ptr [rip + 0x21af4b]
0x00000000000063e4: lea rax, [rax + rdx*2]
0x00000000000063e8: lea rdx, [r8 + rax*2]
0x00000000000063ec: lea rax, [rip + 0x218c0d]
0x00000000000063f3: mov rdx, qword ptr [rax + rdx*8]
0x00000000000063f7: call 0x105e0
L := 0x63fc (2)

0xe3c0:
if
    0x000000000000e3c0: mov rdi, qword ptr [rbp + 8]
    0x000000000000e3c4: test rdi, rdi
    0x000000000000e3c7: je 0xe3e1
then
    L := 0xe3e1 (2)
else
    0x000000000000e3c9: nop dword ptr [rax]
    L := 0xe3d0 (2)
fi

0xe3d0:
if
    0x000000000000e3d0: mov rbx, qword ptr [rdi + 8]
    0x000000000000e3d4: call 0x3e70
    0x000000000000e3d9: test rbx, rbx
    0x000000000000e3dc: mov rdi, rbx
    0x000000000000e3df: jne 0xe3d0
then
    L := 0xe3d0 (2)
else
    L := 0xe3e1 (2)
fi

0xa3d0:
if
    0x000000000000a3d0: add rcx, 1
    0x000000000000a3d4: add rax, 1
    0x000000000000a3d8: mov byte ptr [rax - 1], dl
    0x000000000000a3db: movzx edx, byte ptr [rcx]
    0x000000000000a3de: test dl, dl
    0x000000000000a3e0: jne 0xa3d0
then
    L := 0xa3d0 (2)
else
    L := 0xa3e2 (2)
fi

0x103e0:
0x00000000000103e0: add rsp, 0x38
0x00000000000103e4: pop rbx
0x00000000000103e5: pop rbp
0x00000000000103e6: pop r12
0x00000000000103e8: pop r13
0x00000000000103ea: pop r14
0x00000000000103ec: pop r15
0x00000000000103ee: ret 
L := 0x0 (130)

0xe3e1:
if
    0x000000000000e3e1: add rbp, 0x10
    0x000000000000e3e5: cmp qword ptr [r12 + 8], rbp
    0x000000000000e3ea: ja 0xe3c0
then
    L := 0xe3c0 (2)
else
    L := 0xe3ec (3)
fi

0xa3e2:
0x000000000000a3e2: mov byte ptr [rax], 0
0x000000000000a3e5: jmp 0x9b13
L := 0x9b13 (3)

0xc3e0:
if
    0x000000000000c3e0: cmp rdx, -1
    0x000000000000c3e4: push r12
    0x000000000000c3e6: mov edx, 5
    0x000000000000c3eb: push rbp
    0x000000000000c3ec: mov r12, rsi
    0x000000000000c3ef: push rbx
    0x000000000000c3f0: mov rbp, rdi
    0x000000000000c3f3: je 0xc440
then
    0x000000000000c440: lea rsi, [rip + 0xde5e]
    0x000000000000c447: xor edi, edi
    0x000000000000c449: call 0x3930
    0x000000000000c44e: mov rbx, rax
    0x000000000000c451: jmp 0xc406
    L := 0xc406 (2)
else
    0x000000000000c3f5: lea rsi, [rip + 0xdec4]
    0x000000000000c3fc: xor edi, edi
    0x000000000000c3fe: call 0x3930
    0x000000000000c403: mov rbx, rax
    L := 0xc406 (2)
fi

0xe3ec:
if
    0x000000000000e3ec: mov rdi, qword ptr [r12 + 0x48]
    0x000000000000e3f1: test rdi, rdi
    0x000000000000e3f4: je 0xe411
then
    L := 0xe411 (2)
else
    0x000000000000e3f6: nop word ptr cs:[rax + rax]
    L := 0xe400 (2)
fi

0x63fc:
0x00000000000063fc: pop rbx
0x00000000000063fd: ret 
L := 0x0 (130)

0xe400:
if
    0x000000000000e400: mov rbx, qword ptr [rdi + 8]
    0x000000000000e404: call 0x3e70
    0x000000000000e409: test rbx, rbx
    0x000000000000e40c: mov rdi, rbx
    0x000000000000e40f: jne 0xe400
then
    L := 0xe400 (2)
else
    L := 0xe411 (2)
fi

0xc406:
0x000000000000c406: mov rsi, rbp
0x000000000000c409: mov edi, 1
0x000000000000c40e: call 0x13cc0
0x000000000000c413: mov rdx, r12
0x000000000000c416: mov rbp, rax
0x000000000000c419: mov esi, 8
0x000000000000c41e: xor edi, edi
0x000000000000c420: call 0x138f0
0x000000000000c425: mov r8, rbp
0x000000000000c428: mov rdx, rbx
0x000000000000c42b: mov rcx, rax
0x000000000000c42e: pop rbx
0x000000000000c42f: pop rbp
0x000000000000c430: pop r12
0x000000000000c432: xor esi, esi
0x000000000000c434: xor edi, edi
0x000000000000c436: xor eax, eax
0x000000000000c438: jmp 0x3d20
0x0000000000003d20: jmp qword ptr [rip + 0x21c1fa]
L := 0x21ff20 (1)

0xe411:
0x000000000000e411: mov rdi, qword ptr [r12]
0x000000000000e415: call 0x3e70
0x000000000000e41a: pop rbx
0x000000000000e41b: mov rdi, r12
0x000000000000e41e: pop rbp
0x000000000000e41f: pop r12
0x000000000000e421: jmp 0x3e70
L := 0x3e70 (2)

0x641b:
if
    0x000000000000641b: test rax, rax
    0x000000000000641e: mov eax, 1
    0x0000000000006423: cmovs rcx, rax
    0x0000000000006427: test rcx, rcx
    0x000000000000642a: jne 0x647d
then
    0x000000000000647d: call 0x146d0
    0x0000000000006482: nop dword ptr [rax]
    0x0000000000006486: nop word ptr cs:[rax + rax]
    L := 0x6490 (2)
else
    0x000000000000642c: lea rdi, [rbx + rbx*2]
    0x0000000000006430: shl rdi, 3
    0x0000000000006434: call 0x14480
    0x0000000000006439: mov rbx, qword ptr [rip + 0x21af70]
    0x0000000000006440: mov qword ptr [rip + 0x21af59], rax
    0x0000000000006447: lea rax, [rbx + rbx*2]
    0x000000000000644b: mov qword ptr [rip + 0x21af46], rax
    0x0000000000006452: jmp 0x630e
    L := 0x630e (2)
fi

0xe430:
if
    0x000000000000e430: push r12
    0x000000000000e432: push rbp
    0x000000000000e433: mov rbp, rdi
    0x000000000000e436: push rbx
    0x000000000000e437: sub rsp, 0x60
    0x000000000000e43b: mov r12, qword ptr [rdi + 0x28]
    0x000000000000e43f: mov rax, qword ptr fs:[0x28]
    0x000000000000e448: mov qword ptr [rsp + 0x58], rax
    0x000000000000e44d: xor eax, eax
    0x000000000000e44f: cmp byte ptr [r12 + 0x10], 0
    0x000000000000e455: jne 0xe4a8
then
    L := 0xe4a8 (3)
else
    if
        0x000000000000e457: test rsi, rsi
        0x000000000000e45a: js 0xe5d8
    then
        0x000000000000e5d8: mov rax, rsi
        0x000000000000e5db: pxor xmm0, xmm0
        0x000000000000e5df: shr rax, 1
        0x000000000000e5e2: and esi, 1
        0x000000000000e5e5: or rax, rsi
        0x000000000000e5e8: cvtsi2ss xmm0, rax
        0x000000000000e5ed: addss xmm0, xmm0
        0x000000000000e5f1: jmp 0xe469
        L := 0xe469 (2)
    else
        0x000000000000e460: pxor xmm0, xmm0
        0x000000000000e464: cvtsi2ss xmm0, rsi
        L := 0xe469 (2)
    fi
fi

0x10432:
0x0000000000010432: mov rax, qword ptr [rsp + 0x28]
0x0000000000010437: mov r15, qword ptr [rsp + 0x18]
0x000000000001043c: xor r12d, r12d
0x000000000001043f: mov qword ptr [rsp + 8], 0
0x0000000000010448: mov rbp, qword ptr [rax]
0x000000000001044b: nop dword ptr [rax + rax]
L := 0x10450 (2)

0x10450:
if
    0x0000000000010450: mov rsi, rbp
    0x0000000000010453: mov rdi, r14
    0x0000000000010456: add r12, 1
    0x000000000001045a: call rbx
    0x000000000001045c: test eax, eax
    0x000000000001045e: jle 0x10484
then
    L := 0x10484 (2)
else
    L := 0x10460 (2)
fi

0x10460:
if
    0x0000000000010460: add r15, 1
    0x0000000000010464: cmp qword ptr [rsp], r15
    0x0000000000010468: mov qword ptr [r13 + r12*8 - 8], rbp
    0x000000000001046d: je 0x104b0
then
    0x00000000000104b0: mov rax, qword ptr [rsp + 8]
    0x00000000000104b5: lea rdi, [r13 + r12*8]
    0x00000000000104ba: mov r12, qword ptr [rsp + 0x18]
    0x00000000000104bf: mov rcx, qword ptr [rsp + 0x10]
    0x00000000000104c4: add rsp, 0x38
    0x00000000000104c8: pop rbx
    0x00000000000104c9: sub r12, rax
    0x00000000000104cc: pop rbp
    0x00000000000104cd: lea rdx, [r12*8]
    0x00000000000104d5: lea rsi, [rcx + rax*8]
    0x00000000000104d9: pop r12
    0x00000000000104db: pop r13
    0x00000000000104dd: pop r14
    0x00000000000104df: pop r15
    0x00000000000104e1: jmp 0x3b80
    L := 0x3b80 (2)
else
    if
        0x000000000001046f: mov rbp, qword ptr [r13 + r15*8]
        0x0000000000010474: mov rdi, r14
        0x0000000000010477: add r12, 1
        0x000000000001047b: mov rsi, rbp
        0x000000000001047e: call rbx
        0x0000000000010480: test eax, eax
        0x0000000000010482: jg 0x10460
    then
        L := 0x10460 (2)
    else
        L := 0x10484 (2)
    fi
fi

0xa468:
0x000000000000a468: mov dword ptr [rip + 0x216ece], eax
0x000000000000a46e: jmp 0x9c7e
L := 0x9c7e (5)

0xe469:
if
    0x000000000000e469: divss xmm0, dword ptr [r12 + 8]
    0x000000000000e470: ucomiss xmm0, dword ptr [rip + 0xbf75]
    0x000000000000e477: jae 0xe5b0
then
    L := 0xe5b0 (4)
else
    if
        0x000000000000e47d: ucomiss xmm0, dword ptr [rip + 0xbf6c]
        0x000000000000e484: jb 0xe600
    then
        0x000000000000e600: cvttss2si rsi, xmm0
        0x000000000000e605: jmp 0xe4a8
        L := 0xe4a8 (3)
    else
        0x000000000000e48a: subss xmm0, dword ptr [rip + 0xbf5e]
        0x000000000000e492: movabs rax, 0x8000000000000000
        0x000000000000e49c: cvttss2si rsi, xmm0
        0x000000000000e4a1: xor rsi, rax
        0x000000000000e4a4: nop dword ptr [rax]
        L := 0xe4a8 (3)
    fi
fi

0x6476:
0x0000000000006476: mov ecx, 1
0x000000000000647b: jmp 0x641b
L := 0x641b (2)

0xa478:
if
    0x000000000000a478: cmp byte ptr [rip + 0x216e7e], 0
    0x000000000000a47f: jne 0x9f48
then
    L := 0x9f48 (2)
else
    L := 0xa485 (2)
fi

0x14480:
if
    0x0000000000014480: push rbx
    0x0000000000014481: mov rbx, rdi
    0x0000000000014484: call 0x3e78
    0x0000000000014489: test rax, rax
    0x000000000001448c: jne 0x14493
then
    L := 0x14493 (2)
else
    if
        0x000000000001448e: test rbx, rbx
        0x0000000000014491: jne 0x14495
    then
        if
            0x0000000000014495: call 0x146d0
            0x000000000001449a: nop word ptr [rax + rax]
            0x00000000000144a0: mov rax, rdi
            0x00000000000144a3: mul rsi
            0x00000000000144a6: mov rdi, rax
            0x00000000000144a9: seto al
            0x00000000000144ac: test rdi, rdi
            0x00000000000144af: js 0x144bb
        then
            L := 0x144bb (2)
        else
            if
                0x00000000000144b1: movzx eax, al
                0x00000000000144b4: test rax, rax
                0x00000000000144b7: jne 0x144bb
            then
                L := 0x144bb (2)
            else
                0x00000000000144b9: jmp 0x14480
                L := 0x14480 (2)
            fi
        fi
    else
        L := 0x14493 (2)
    fi
fi

0x10484:
if
    0x0000000000010484: add qword ptr [rsp + 8], 1
    0x000000000001048a: mov qword ptr [r13 + r12*8 - 8], r14
    0x000000000001048f: mov rax, qword ptr [rsp + 8]
    0x0000000000010494: cmp qword ptr [rsp + 0x18], rax
    0x0000000000010499: je 0x103e0
then
    L := 0x103e0 (4)
else
    0x000000000001049f: mov rdx, qword ptr [rsp + 0x10]
    0x00000000000104a4: mov r14, qword ptr [rdx + rax*8]
    0x00000000000104a8: jmp 0x10450
    L := 0x10450 (2)
fi

0xa485:
0x000000000000a485: mov dword ptr [rbx + 0xa8], 6
0x000000000000a48f: jmp 0x9bc7
L := 0x9bc7 (4)

0x6490:
0x0000000000006490: push rbp
0x0000000000006491: push rbx
0x0000000000006492: mov rbp, rsi
0x0000000000006495: mov rbx, rdi
0x0000000000006498: sub rsp, 8
0x000000000000649c: call 0x37f0
0x00000000000064a1: mov dword ptr [rax], 0
0x00000000000064a7: add rsp, 8
0x00000000000064ab: mov rsi, rbp
0x00000000000064ae: mov rdi, rbx
0x00000000000064b1: pop rbx
0x00000000000064b2: pop rbp
0x00000000000064b3: jmp 0x3c50
0x0000000000003c50: jmp qword ptr [rip + 0x21c262]
L := 0x21feb8 (1)

0x14493:
0x0000000000014493: pop rbx
0x0000000000014494: ret 
L := 0x0 (130)

0xa4a0:
if
    0x000000000000a4a0: mov rax, qword ptr [rip + 0x215e41]
    0x000000000000a4a7: cmp qword ptr [rbx + 0x18], rax
    0x000000000000a4ab: je 0xa6a0
then
    0x000000000000a6a0: mov dword ptr [rcx], 0x5f
    0x000000000000a6a6: xor eax, eax
    L := 0xa6a8 (3)
else
    if
        0x000000000000a4b1: mov dword ptr [rcx], 0
        0x000000000000a4b7: mov rsi, r15
        0x000000000000a4ba: mov rdi, r12
        0x000000000000a4bd: mov qword ptr [rbp - 0x390], rcx
        0x000000000000a4c4: call 0xcec0
        0x000000000000a4c9: test eax, eax
        0x000000000000a4cb: mov rcx, qword ptr [rbp - 0x390]
        0x000000000000a4d2: jle 0xa800
    then
        if
            0x000000000000a800: mov edx, dword ptr [rcx]
            0x000000000000a802: shr eax, 0x1f
            0x000000000000a805: lea ecx, [rdx - 0x16]
            0x000000000000a808: and ecx, 0xffffffef
            0x000000000000a80b: je 0xa816
        then
            L := 0xa816 (2)
        else
            if
                0x000000000000a80d: cmp edx, 0x5f
                0x000000000000a810: jne 0xa6a8
            then
                L := 0xa6a8 (3)
            else
                L := 0xa816 (2)
            fi
        fi
    else
        0x000000000000a4d8: xor eax, eax
        0x000000000000a4da: mov ecx, 1
        0x000000000000a4df: mov edx, 2
        0x000000000000a4e4: jmp 0x9f11
        L := 0x9f11 (3)
    fi
fi

0xe4a8:
if
    0x000000000000e4a8: mov rdi, rsi
    0x000000000000e4ab: call 0xd890
    0x000000000000e4b0: mov edx, 8
    0x000000000000e4b5: mov rbx, rax
    0x000000000000e4b8: xor ecx, ecx
    0x000000000000e4ba: mov rax, rdx
    0x000000000000e4bd: mul rbx
    0x000000000000e4c0: jo 0xe65f
then
    L := 0xe65f (2)
else
    L := 0xe4c6 (2)
fi

0x144bb:
0x00000000000144bb: sub rsp, 8
0x00000000000144bf: call 0x146d0
0x00000000000144c4: nop 
0x00000000000144c6: nop word ptr cs:[rax + rax]
0x00000000000144d0: jmp 0x14480
L := 0x14480 (2)

0xe4c6:
if
    0x000000000000e4c6: test rax, rax
    0x000000000000e4c9: mov eax, 1
    0x000000000000e4ce: cmovs rcx, rax
    0x000000000000e4d2: test rbx, rbx
    0x000000000000e4d5: je 0xe5b0
then
    L := 0xe5b0 (4)
else
    if
        0x000000000000e4db: and ecx, 1
        0x000000000000e4de: jne 0xe5b0
    then
        L := 0xe5b0 (4)
    else
        if
            0x000000000000e4e4: cmp qword ptr [rbp + 0x10], rbx
            0x000000000000e4e8: je 0xe610
        then
            0x000000000000e610: mov ebx, 1
            0x000000000000e615: jmp 0xe5b2
            L := 0xe5b2 (4)
        else
            if
                0x000000000000e4ee: mov esi, 0x10
                0x000000000000e4f3: mov rdi, rbx
                0x000000000000e4f6: call 0x3b00
                0x000000000000e4fb: test rax, rax
                0x000000000000e4fe: mov qword ptr [rsp], rax
                0x000000000000e502: je 0xe5b0
            then
                L := 0xe5b0 (4)
            else
                if
                    0x000000000000e508: mov qword ptr [rsp + 0x10], rbx
                    0x000000000000e50d: shl rbx, 4
                    0x000000000000e511: mov qword ptr [rsp + 0x28], r12
                    0x000000000000e516: add rbx, rax
                    0x000000000000e519: mov rax, qword ptr [rbp + 0x30]
                    0x000000000000e51d: mov r12, rsp
                    0x000000000000e520: xor edx, edx
                    0x000000000000e522: mov rsi, rbp
                    0x000000000000e525: mov rdi, r12
                    0x000000000000e528: mov qword ptr [rsp + 8], rbx
                    0x000000000000e52d: mov qword ptr [rsp + 0x18], 0
                    0x000000000000e536: mov qword ptr [rsp + 0x30], rax
                    0x000000000000e53b: mov rax, qword ptr [rbp + 0x38]
                    0x000000000000e53f: mov qword ptr [rsp + 0x20], 0
                    0x000000000000e548: mov qword ptr [rsp + 0x38], rax
                    0x000000000000e54d: mov rax, qword ptr [rbp + 0x40]
                    0x000000000000e551: mov qword ptr [rsp + 0x40], rax
                    0x000000000000e556: mov rax, qword ptr [rbp + 0x48]
                    0x000000000000e55a: mov qword ptr [rsp + 0x48], rax
                    0x000000000000e55f: call 0xdb20
                    0x000000000000e564: test al, al
                    0x000000000000e566: mov ebx, eax
                    0x000000000000e568: jne 0xe620
                then
                    0x000000000000e620: mov rdi, qword ptr [rbp]
                    0x000000000000e624: call 0x3e70
                    0x000000000000e629: mov rax, qword ptr [rsp]
                    0x000000000000e62d: mov qword ptr [rbp], rax
                    0x000000000000e631: mov rax, qword ptr [rsp + 8]
                    0x000000000000e636: mov qword ptr [rbp + 8], rax
                    0x000000000000e63a: mov rax, qword ptr [rsp + 0x10]
                    0x000000000000e63f: mov qword ptr [rbp + 0x10], rax
                    0x000000000000e643: mov rax, qword ptr [rsp + 0x18]
                    0x000000000000e648: mov qword ptr [rbp + 0x18], rax
                    0x000000000000e64c: mov rax, qword ptr [rsp + 0x48]
                    0x000000000000e651: mov qword ptr [rbp + 0x48], rax
                    0x000000000000e655: jmp 0xe5b2
                    L := 0xe5b2 (4)
                else
                    if
                        0x000000000000e56e: mov rax, qword ptr [rsp + 0x48]
                        0x000000000000e573: mov edx, 1
                        0x000000000000e578: mov rsi, r12
                        0x000000000000e57b: mov rdi, rbp
                        0x000000000000e57e: mov qword ptr [rbp + 0x48], rax
                        0x000000000000e582: call 0xdb20
                        0x000000000000e587: test al, al
                        0x000000000000e589: je 0xe669
                    then
                        L := 0xe669 (2)
                    else
                        if
                            0x000000000000e58f: xor edx, edx
                            0x000000000000e591: mov rsi, r12
                            0x000000000000e594: mov rdi, rbp
                            0x000000000000e597: call 0xdb20
                            0x000000000000e59c: test al, al
                            0x000000000000e59e: je 0xe669
                        then
                            L := 0xe669 (2)
                        else
                            0x000000000000e5a4: mov rdi, qword ptr [rsp]
                            0x000000000000e5a8: call 0x3e70
                            0x000000000000e5ad: jmp 0xe5b2
                            L := 0xe5b2 (4)
                        fi
                    fi
                fi
            fi
        fi
    fi
fi

0x144e0:
if
    0x00000000000144e0: test rsi, rsi
    0x00000000000144e3: push rbx
    0x00000000000144e4: mov rbx, rsi
    0x00000000000144e7: jne 0x144ee
then
    L := 0x144ee (2)
else
    if
        0x00000000000144e9: test rdi, rdi
        0x00000000000144ec: jne 0x14508
    then
        0x0000000000014508: call 0x3e70
        0x000000000001450d: xor eax, eax
        0x000000000001450f: pop rbx
        0x0000000000014510: ret 
        L := 0x0 (130)
    else
        L := 0x144ee (2)
    fi
fi

0x144ee:
if
    0x00000000000144ee: mov rsi, rbx
    0x00000000000144f1: call 0x3c90
    0x00000000000144f6: test rax, rax
    0x00000000000144f9: jne 0x14500
then
    L := 0x14500 (2)
else
    if
        0x00000000000144fb: test rbx, rbx
        0x00000000000144fe: jne 0x14511
    then
        if
            0x0000000000014511: call 0x146d0
            0x0000000000014516: nop word ptr cs:[rax + rax]
            0x0000000000014520: mov rax, rsi
            0x0000000000014523: mul rdx
            0x0000000000014526: mov rsi, rax
            0x0000000000014529: seto al
            0x000000000001452c: test rsi, rsi
            0x000000000001452f: js 0x1453b
        then
            L := 0x1453b (2)
        else
            if
                0x0000000000014531: movzx eax, al
                0x0000000000014534: test rax, rax
                0x0000000000014537: jne 0x1453b
            then
                L := 0x1453b (2)
            else
                0x0000000000014539: jmp 0x144e0
                L := 0x144e0 (3)
            fi
        fi
    else
        L := 0x14500 (2)
    fi
fi

0x14500:
0x0000000000014500: pop rbx
0x0000000000014501: ret 
L := 0x0 (130)

0x1453b:
if
    0x000000000001453b: sub rsp, 8
    0x000000000001453f: call 0x146d0
    0x0000000000014544: nop 
    0x0000000000014546: nop word ptr cs:[rax + rax]
    0x0000000000014550: test rdi, rdi
    0x0000000000014553: mov r9, rdx
    0x0000000000014556: mov rcx, qword ptr [rsi]
    0x0000000000014559: je 0x14590
then
    if
        0x0000000000014590: test rcx, rcx
        0x0000000000014593: je 0x145b8
    then
        L := 0x145b8 (2)
    else
        L := 0x14595 (2)
    fi
else
    if
        0x000000000001455b: xor edx, edx
        0x000000000001455d: movabs rax, 0x5555555555555554
        0x0000000000014567: div r9
        0x000000000001456a: cmp rax, rcx
        0x000000000001456d: jbe 0x145ab
    then
        L := 0x145ab (3)
    else
        0x000000000001456f: mov rax, rcx
        0x0000000000014572: shr rax, 1
        0x0000000000014575: lea rcx, [rax + rcx + 1]
        L := 0x1457a (2)
    fi
fi

0xa540:
0x000000000000a540: mov dword ptr [rbx + 0xa8], 3
0x000000000000a54a: jmp 0x9bc7
L := 0x9bc7 (4)

0x10548:
if
    0x0000000000010548: mov rsi, r15
    0x000000000001054b: mov rdi, r14
    0x000000000001054e: add r12, 8
    0x0000000000010552: call rbx
    0x0000000000010554: test eax, eax
    0x0000000000010556: jle 0x1057d
then
    L := 0x1057d (2)
else
    L := 0x10558 (2)
fi

0x10558:
if
    0x0000000000010558: add rbp, 1
    0x000000000001055c: cmp qword ptr [rsp + 0x18], rbp
    0x0000000000010561: mov qword ptr [r12 - 8], r15
    0x0000000000010566: je 0x105af
then
    L := 0x105af (2)
else
    if
        0x0000000000010568: mov r15, qword ptr [r13 + rbp*8]
        0x000000000001056d: mov rdi, r14
        0x0000000000010570: add r12, 8
        0x0000000000010574: mov rsi, r15
        0x0000000000010577: call rbx
        0x0000000000010579: test eax, eax
        0x000000000001057b: jg 0x10558
    then
        L := 0x10558 (2)
    else
        L := 0x1057d (2)
    fi
fi

0xa55a:
0x000000000000a55a: mov rdx, r12
0x000000000000a55d: xor edi, edi
0x000000000000a55f: mov esi, 3
0x000000000000a564: call 0x13b10
0x000000000000a569: mov r14, rax
0x000000000000a56c: call 0x37f0
0x000000000000a571: mov esi, dword ptr [rax]
0x000000000000a573: lea rdx, [rip + 0xfd82]
0x000000000000a57a: mov rcx, r14
0x000000000000a57d: xor edi, edi
0x000000000000a57f: xor eax, eax
0x000000000000a581: call 0x3d20
0x000000000000a586: jmp 0x9f25
L := 0x9f25 (2)

0x6570:
if
    0x0000000000006570: push r15
    0x0000000000006572: push r14
    0x0000000000006574: mov r14, rdi
    0x0000000000006577: push r13
    0x0000000000006579: push r12
    0x000000000000657b: movzx r13d, sil
    0x000000000000657f: push rbp
    0x0000000000006580: push rbx
    0x0000000000006581: sub rsp, 8
    0x0000000000006585: test rdi, rdi
    0x0000000000006588: je 0x65a0
then
    L := 0x65a0 (3)
else
    if
        0x000000000000658a: cmp qword ptr [rip + 0x21ae36], 0
        0x0000000000006592: je 0x65a0
    then
        L := 0x65a0 (3)
    else
        0x0000000000006594: mov rsi, rdi
        0x0000000000006597: xor edx, edx
        0x0000000000006599: xor edi, edi
        0x000000000000659b: call 0x5f80
        L := 0x65a0 (3)
    fi
fi

0x1457a:
0x000000000001457a: mov qword ptr [rsi], rcx
0x000000000001457d: imul rcx, r9
0x0000000000014581: mov rsi, rcx
0x0000000000014584: jmp 0x144e0
L := 0x144e0 (3)

0x1057d:
if
    0x000000000001057d: add qword ptr [rsp + 8], 1
    0x0000000000010583: mov qword ptr [r12 - 8], r14
    0x0000000000010588: mov rax, qword ptr [rsp + 8]
    0x000000000001058d: cmp qword ptr [rsp + 0x20], rax
    0x0000000000010592: je 0x105a0
then
    0x00000000000105a0: mov rax, qword ptr [rsp + 0x18]
    0x00000000000105a5: mov qword ptr [rsp + 8], rbp
    0x00000000000105aa: mov qword ptr [rsp + 0x20], rax
    L := 0x105af (2)
else
    0x0000000000010594: mov r14, qword ptr [r13 + rax*8]
    0x0000000000010599: jmp 0x10548
    L := 0x10548 (2)
fi

0x14595:
if
    0x0000000000014595: mov rax, rcx
    0x0000000000014598: mul r9
    0x000000000001459b: seto dl
    0x000000000001459e: test rax, rax
    0x00000000000145a1: movzx edx, dl
    0x00000000000145a4: js 0x145ab
then
    L := 0x145ab (3)
else
    if
        0x00000000000145a6: test rdx, rdx
        0x00000000000145a9: je 0x1457a
    then
        L := 0x1457a (2)
    else
        L := 0x145ab (3)
    fi
fi

0x65a0:
if
    0x00000000000065a0: mov rbx, qword ptr [rip + 0x21ae09]
    0x00000000000065a7: lea r12, [rbx*8 - 8]
    0x00000000000065af: sub rbx, 1
    0x00000000000065b3: cmp rbx, -1
    0x00000000000065b7: je 0x65e9
then
    L := 0x65e9 (2)
else
    0x00000000000065b9: nop dword ptr [rax]
    L := 0x65c0 (2)
fi

0x145ab:
0x00000000000145ab: sub rsp, 8
0x00000000000145af: call 0x146d0
0x00000000000145b4: nop dword ptr [rax]
L := 0x145b8 (2)

0x105af:
0x00000000000105af: mov rax, qword ptr [rsp + 8]
0x00000000000105b4: mov rdx, qword ptr [rsp + 0x20]
0x00000000000105b9: mov rdi, r12
0x00000000000105bc: sub rdx, rax
0x00000000000105bf: lea rsi, [r13 + rax*8]
0x00000000000105c4: shl rdx, 3
0x00000000000105c8: call 0x3b80
0x00000000000105cd: mov rax, qword ptr [rsp + 0x10]
0x00000000000105d2: mov r14, qword ptr [rax]
0x00000000000105d5: jmp 0x10432
L := 0x10432 (2)

0xe5b0:
0x000000000000e5b0: xor ebx, ebx
L := 0xe5b2 (4)

0xe5b2:
if
    0x000000000000e5b2: mov rcx, qword ptr [rsp + 0x58]
    0x000000000000e5b7: xor rcx, qword ptr fs:[0x28]
    0x000000000000e5c0: mov eax, ebx
    0x000000000000e5c2: jne 0xe65a
then
    0x000000000000e65a: call 0x3970
    L := 0xe65f (2)
else
    0x000000000000e5c8: add rsp, 0x60
    0x000000000000e5cc: pop rbx
    0x000000000000e5cd: pop rbp
    0x000000000000e5ce: pop r12
    0x000000000000e5d0: ret 
    L := 0x0 (130)
fi

0x145b8:
0x00000000000145b8: xor edx, edx
0x00000000000145ba: mov eax, 0x80
0x00000000000145bf: xor r8d, r8d
0x00000000000145c2: div r9
0x00000000000145c5: test rax, rax
0x00000000000145c8: sete r8b
0x00000000000145cc: lea rcx, [r8 + rax]
0x00000000000145d0: jmp 0x14595
L := 0x14595 (2)

0x65c0:
if
    0x00000000000065c0: mov rax, qword ptr [rip + 0x21add9]
    0x00000000000065c7: mov rbp, qword ptr [rax + r12]
    0x00000000000065cb: mov eax, dword ptr [rbp + 0xa8]
    0x00000000000065d1: cmp eax, 3
    0x00000000000065d4: je 0x6640
then
    L := 0x6640 (2)
else
    if
        0x00000000000065d6: cmp eax, 9
        0x00000000000065d9: je 0x6640
    then
        L := 0x6640 (2)
    else
        L := 0x65db (5)
    fi
fi

0xa5c1:
0x000000000000a5c1: lea rcx, [rip + 0xd65c]
0x000000000000a5c8: mov r8d, r14d
0x000000000000a5cb: mov edx, 0x15
0x000000000000a5d0: mov esi, 1
0x000000000000a5d5: mov rdi, r13
0x000000000000a5d8: xor eax, eax
0x000000000000a5da: call 0x3e60
0x000000000000a5df: mov rax, r13
L := 0xa5e2 (2)

0x65db:
if
    0x00000000000065db: sub rbx, 1
    0x00000000000065df: sub r12, 8
    0x00000000000065e3: cmp rbx, -1
    0x00000000000065e7: jne 0x65c0
then
    L := 0x65c0 (2)
else
    L := 0x65e9 (2)
fi

0x105e0:
0x00000000000105e0: lea rax, [rdi + rsi*8]
0x00000000000105e4: mov rcx, rdx
0x00000000000105e7: mov rdx, rax
0x00000000000105ea: jmp 0x103a0
if
    0x00000000000103a0: push r15
    0x00000000000103a2: push r14
    0x00000000000103a4: push r13
    0x00000000000103a6: push r12
    0x00000000000103a8: mov r13, rdi
    0x00000000000103ab: push rbp
    0x00000000000103ac: push rbx
    0x00000000000103ad: mov rbx, rcx
    0x00000000000103b0: sub rsp, 0x38
    0x00000000000103b4: cmp rsi, 2
    0x00000000000103b8: mov qword ptr [rsp], rsi
    0x00000000000103bc: mov qword ptr [rsp + 0x10], rdx
    0x00000000000103c1: ja 0x103f0
then
    if
        0x00000000000103f0: mov rax, qword ptr [rsp]
        0x00000000000103f4: mov r15, qword ptr [rsp + 0x10]
        0x00000000000103f9: mov rcx, rax
        0x00000000000103fc: mov rsi, rax
        0x00000000000103ff: mov rdx, r15
        0x0000000000010402: shr rcx, 1
        0x0000000000010405: lea rdi, [rdi + rcx*8]
        0x0000000000010409: sub rsi, rcx
        0x000000000001040c: mov r14, rcx
        0x000000000001040f: mov qword ptr [rsp + 0x18], rcx
        0x0000000000010414: mov rcx, rbx
        0x0000000000010417: mov qword ptr [rsp + 0x28], rdi
        0x000000000001041c: call 0x103a0
        0x0000000000010421: cmp r14, 1
        0x0000000000010425: jne 0x104f0
    then
        0x00000000000104f0: mov r14, qword ptr [rsp]
        0x00000000000104f4: mov r12, qword ptr [rsp + 0x10]
        0x00000000000104f9: mov rcx, rbx
        0x00000000000104fc: mov rsi, qword ptr [rsp + 0x18]
        0x0000000000010501: shr r14, 2
        0x0000000000010505: mov rdx, r12
        0x0000000000010508: lea r15, [r13 + r14*8]
        0x000000000001050d: sub rsi, r14
        0x0000000000010510: mov qword ptr [rsp + 0x20], r14
        0x0000000000010515: mov rbp, r14
        0x0000000000010518: mov rdi, r15
        0x000000000001051b: call 0x103a0
        0x0000000000010520: mov rsi, r14
        0x0000000000010523: mov rcx, rbx
        0x0000000000010526: mov rdx, r12
        0x0000000000010529: mov rdi, r13
        0x000000000001052c: call 0x103a0
        0x0000000000010531: mov r14, qword ptr [r13]
        0x0000000000010535: mov r15, qword ptr [r15]
        0x0000000000010538: mov qword ptr [rsp + 8], 0
        0x0000000000010541: nop dword ptr [rax]
        L := 0x10548 (2)
    else
        0x000000000001042b: mov r14, qword ptr [r13]
        0x000000000001042f: mov qword ptr [r15], r14
        L := 0x10432 (2)
    fi
else
    if
        0x00000000000103c3: jne 0x103e0
    then
        L := 0x103e0 (4)
    else
        if
            0x00000000000103c5: mov r12, qword ptr [rdi + 8]
            0x00000000000103c9: mov rbp, qword ptr [rdi]
            0x00000000000103cc: mov rsi, r12
            0x00000000000103cf: mov rdi, rbp
            0x00000000000103d2: call rcx
            0x00000000000103d4: test eax, eax
            0x00000000000103d6: jle 0x103e0
        then
            L := 0x103e0 (4)
        else
            0x00000000000103d8: mov qword ptr [r13], r12
            0x00000000000103dc: mov qword ptr [r13 + 8], rbp
            L := 0x103e0 (4)
        fi
    fi
fi

0x145e0:
if
    0x00000000000145e0: test rdi, rdi
    0x00000000000145e3: mov rax, qword ptr [rsi]
    0x00000000000145e6: je 0x14610
then
    if
        0x0000000000014610: test rax, rax
        0x0000000000014613: mov edx, 0x80
        0x0000000000014618: cmove rax, rdx
        0x000000000001461c: test rax, rax
        0x000000000001461f: jns 0x14602
    then
        L := 0x14602 (2)
    else
        L := 0x14621 (2)
    fi
else
    if
        0x00000000000145e8: movabs rdx, 0x5555555555555553
        0x00000000000145f2: cmp rax, rdx
        0x00000000000145f5: ja 0x14621
    then
        L := 0x14621 (2)
    else
        0x00000000000145f7: mov rdx, rax
        0x00000000000145fa: shr rdx, 1
        0x00000000000145fd: lea rax, [rdx + rax + 1]
        L := 0x14602 (2)
    fi
fi

0xa5e2:
if
    0x000000000000a5e2: mov ecx, dword ptr [rax]
    0x000000000000a5e4: add rax, 4
    0x000000000000a5e8: lea edx, [rcx - 0x1010101]
    0x000000000000a5ee: not ecx
    0x000000000000a5f0: and edx, ecx
    0x000000000000a5f2: and edx, 0x80808080
    0x000000000000a5f8: je 0xa5e2
then
    L := 0xa5e2 (2)
else
    0x000000000000a5fa: mov ecx, edx
    0x000000000000a5fc: shr ecx, 0x10
    0x000000000000a5ff: test edx, 0x8080
    0x000000000000a605: cmove edx, ecx
    0x000000000000a608: lea rcx, [rax + 2]
    0x000000000000a60c: mov esi, edx
    0x000000000000a60e: cmove rax, rcx
    0x000000000000a612: add sil, dl
    0x000000000000a615: sbb rax, 3
    0x000000000000a619: sub eax, r13d
    L := 0xa61c (2)
fi

0x65e9:
if
    0x00000000000065e9: mov rdx, qword ptr [rip + 0x21adc0]
    0x00000000000065f0: test rdx, rdx
    0x00000000000065f3: je 0x6628
then
    L := 0x6628 (2)
else
    0x00000000000065f5: mov rsi, qword ptr [rip + 0x21ada4]
    0x00000000000065fc: lea rdi, [rsi + rdx*8]
    0x0000000000006600: mov rax, rsi
    0x0000000000006603: xor edx, edx
    0x0000000000006605: nop dword ptr [rax]
    L := 0x6608 (2)
fi

0x14602:
0x0000000000014602: mov qword ptr [rsi], rax
0x0000000000014605: mov rsi, rax
0x0000000000014608: jmp 0x144e0
L := 0x144e0 (3)

0x6608:
if
    0x0000000000006608: mov rcx, qword ptr [rax]
    0x000000000000660b: cmp dword ptr [rcx + 0xa8], 9
    0x0000000000006612: mov qword ptr [rsi + rdx*8], rcx
    0x0000000000006616: setne cl
    0x0000000000006619: add rax, 8
    0x000000000000661d: movzx ecx, cl
    0x0000000000006620: add rdx, rcx
    0x0000000000006623: cmp rdi, rax
    0x0000000000006626: jne 0x6608
then
    L := 0x6608 (2)
else
    L := 0x6628 (2)
fi

0xa61c:
if
    0x000000000000a61c: cmp dword ptr [rip + 0x216d2a], eax
    0x000000000000a622: jge 0x9c42
then
    L := 0x9c42 (3)
else
    0x000000000000a628: mov dword ptr [rip + 0x216d1e], eax
    0x000000000000a62e: jmp 0x9c42
    L := 0x9c42 (3)
fi

0x14621:
0x0000000000014621: sub rsp, 8
0x0000000000014625: call 0x146d0
0x000000000001462a: nop word ptr [rax + rax]
0x0000000000014630: push rbx
0x0000000000014631: mov rbx, rdi
0x0000000000014634: call 0x14480
0x0000000000014639: mov rdx, rbx
0x000000000001463c: xor esi, esi
0x000000000001463e: mov rdi, rax
0x0000000000014641: pop rbx
0x0000000000014642: jmp 0x3a60
0x0000000000003a60: jmp qword ptr [rip + 0x21c35a]
L := 0x21fdc0 (1)

0x6628:
0x0000000000006628: mov qword ptr [rip + 0x21ad81], rdx
0x000000000000662f: add rsp, 8
0x0000000000006633: pop rbx
0x0000000000006634: pop rbp
0x0000000000006635: pop r12
0x0000000000006637: pop r13
0x0000000000006639: pop r14
0x000000000000663b: pop r15
0x000000000000663d: ret 
L := 0x0 (130)

0x6640:
if
    0x0000000000006640: test r14, r14
    0x0000000000006643: mov r15, qword ptr [rbp]
    0x0000000000006647: je 0x66a0
then
    L := 0x66a0 (2)
else
    if
        0x0000000000006649: mov rdi, r15
        0x000000000000664c: call 0xce10
        0x0000000000006651: cmp byte ptr [rax], 0x2e
        0x0000000000006654: je 0x66b8
    then
        if
            0x00000000000066b8: xor edx, edx
            0x00000000000066ba: cmp byte ptr [rax + 1], 0x2e
            0x00000000000066be: sete dl
            0x00000000000066c1: movzx eax, byte ptr [rax + rdx + 1]
            0x00000000000066c6: test al, al
            0x00000000000066c8: je 0x65db
        then
            L := 0x65db (5)
        else
            if
                0x00000000000066ce: cmp al, 0x2f
                0x00000000000066d0: je 0x65db
            then
                L := 0x65db (5)
            else
                0x00000000000066d6: jmp 0x6656
                L := 0x6656 (2)
            fi
        fi
    else
        L := 0x6656 (2)
    fi
fi

0xc640:
if
    0x000000000000c640: push r15
    0x000000000000c642: push r14
    0x000000000000c644: push r13
    0x000000000000c646: push r12
    0x000000000000c648: push rbp
    0x000000000000c649: push rbx
    0x000000000000c64a: sub rsp, 0xe8
    0x000000000000c651: mov rax, qword ptr fs:[0x28]
    0x000000000000c65a: mov qword ptr [rsp + 0xd8], rax
    0x000000000000c662: xor eax, eax
    0x000000000000c664: mov eax, esi
    0x000000000000c666: and eax, 4
    0x000000000000c669: setne byte ptr [rsp + 0x1b]
    0x000000000000c66e: and esi, 3
    0x000000000000c671: mov dword ptr [rsp + 0x1c], eax
    0x000000000000c675: lea eax, [rsi - 1]
    0x000000000000c678: mov dword ptr [rsp + 4], esi
    0x000000000000c67c: test esi, eax
    0x000000000000c67e: jne 0xcbd0
then
    L := 0xcbd0 (2)
else
    if
        0x000000000000c684: test rdi, rdi
        0x000000000000c687: mov r14, rdi
        0x000000000000c68a: je 0xcbd0
    then
        L := 0xcbd0 (2)
    else
        if
            0x000000000000c690: movzx eax, byte ptr [rdi]
            0x000000000000c693: test al, al
            0x000000000000c695: je 0xcc10
        then
            0x000000000000cc10: call 0x37f0
            0x000000000000cc15: xor ebp, ebp
            0x000000000000cc17: mov dword ptr [rax], 2
            0x000000000000cc1d: jmp 0xc860
            L := 0xc860 (6)
        else
            if
                0x000000000000c69b: cmp al, 0x2f
                0x000000000000c69d: je 0xcb60
            then
                L := 0xcb60 (2)
            else
                if
                    0x000000000000c6a3: call 0x14840
                    0x000000000000c6a8: test rax, rax
                    0x000000000000c6ab: mov rbp, rax
                    0x000000000000c6ae: je 0xc860
                then
                    L := 0xc860 (6)
                else
                    if
                        0x000000000000c6b4: mov rdi, rax
                        0x000000000000c6b7: call 0x3950
                        0x000000000000c6bc: cmp rax, 0xfff
                        0x000000000000c6c2: mov r15, rax
                        0x000000000000c6c5: jbe 0xcb80
                    then
                        0x000000000000cb80: mov rdi, rbp
                        0x000000000000cb83: mov esi, 0x1000
                        0x000000000000cb88: call 0x144e0
                        0x000000000000cb8d: mov rbp, rax
                        0x000000000000cb90: add r15, rax
                        0x000000000000cb93: lea rbx, [rax + 0x1000]
                        0x000000000000cb9a: jmp 0xc6d1
                        L := 0xc6d1 (3)
                    else
                        0x000000000000c6cb: add r15, rbp
                        0x000000000000c6ce: mov rbx, r15
                        L := 0xc6d1 (3)
                    fi
                fi
            fi
        fi
    fi
fi

0x6656:
if
    0x0000000000006656: cmp byte ptr [r15], 0x2f
    0x000000000000665a: je 0x66a0
then
    L := 0x66a0 (2)
else
    0x000000000000665c: mov rsi, r15
    0x000000000000665f: xor edx, edx
    0x0000000000006661: mov rdi, r14
    0x0000000000006664: call 0xd200
    0x0000000000006669: mov rsi, qword ptr [rbp + 8]
    0x000000000000666d: mov r15, rax
    0x0000000000006670: mov rdi, rax
    0x0000000000006673: mov edx, r13d
    0x0000000000006676: call 0x5f80
    0x000000000000667b: mov rdi, r15
    0x000000000000667e: call 0x3e70
    L := 0x6683 (2)
fi

0xe65f:
0x000000000000e65f: mov ecx, 1
0x000000000000e664: jmp 0xe4c6
L := 0xe4c6 (2)

0xe669:
0x000000000000e669: call 0x37e0
0x000000000000e66e: nop 
if
    0x000000000000e670: push r13
    0x000000000000e672: push r12
    0x000000000000e674: push rbp
    0x000000000000e675: push rbx
    0x000000000000e676: sub rsp, 0x18
    0x000000000000e67a: mov rax, qword ptr fs:[0x28]
    0x000000000000e683: mov qword ptr [rsp + 8], rax
    0x000000000000e688: xor eax, eax
    0x000000000000e68a: test rsi, rsi
    0x000000000000e68d: je 0xe84d
then
    L := 0xe84d (2)
else
    if
        0x000000000000e693: mov r12, rsp
        0x000000000000e696: xor ecx, ecx
        0x000000000000e698: mov r13, rdx
        0x000000000000e69b: mov rdx, r12
        0x000000000000e69e: mov rbx, rdi
        0x000000000000e6a1: mov rbp, rsi
        0x000000000000e6a4: call 0xd980
        0x000000000000e6a9: test rax, rax
        0x000000000000e6ac: mov rdx, rax
        0x000000000000e6af: je 0xe6e0
    then
        if
            0x000000000000e6e0: mov rax, qword ptr [rbx + 0x18]
            0x000000000000e6e4: test rax, rax
            0x000000000000e6e7: js 0xe760
        then
            if
                0x000000000000e760: mov rdx, rax
                0x000000000000e763: pxor xmm1, xmm1
                0x000000000000e767: and eax, 1
                0x000000000000e76a: shr rdx, 1
                0x000000000000e76d: or rdx, rax
                0x000000000000e770: mov rax, qword ptr [rbx + 0x10]
                0x000000000000e774: cvtsi2ss xmm1, rdx
                0x000000000000e779: mov rdx, qword ptr [rbx + 0x28]
                0x000000000000e77d: test rax, rax
                0x000000000000e780: addss xmm1, xmm1
                0x000000000000e784: jns 0xe703
            then
                L := 0xe703 (2)
            else
                L := 0xe78a (2)
            fi
        else
            if
                0x000000000000e6e9: pxor xmm1, xmm1
                0x000000000000e6ed: mov rdx, qword ptr [rbx + 0x28]
                0x000000000000e6f1: cvtsi2ss xmm1, rax
                0x000000000000e6f6: mov rax, qword ptr [rbx + 0x10]
                0x000000000000e6fa: test rax, rax
                0x000000000000e6fd: js 0xe78a
            then
                L := 0xe78a (2)
            else
                L := 0xe703 (2)
            fi
        fi
    else
        if
            0x000000000000e6b1: xor eax, eax
            0x000000000000e6b3: test r13, r13
            0x000000000000e6b6: je 0xe6bc
        then
            L := 0xe6bc (5)
        else
            0x000000000000e6b8: mov qword ptr [r13], rdx
            L := 0xe6bc (5)
        fi
    fi
fi

0x6683:
if
    0x0000000000006683: cmp dword ptr [rbp + 0xa8], 9
    0x000000000000668a: jne 0x65db
then
    L := 0x65db (5)
else
    0x0000000000006690: mov rdi, rbp
    0x0000000000006693: call 0x6090
    0x0000000000006698: jmp 0x65db
    L := 0x65db (5)
fi

0xa688:
0x000000000000a688: mov rdi, r14
0x000000000000a68b: call 0x146b0
0x000000000000a690: mov r15, rax
0x000000000000a693: jmp 0x9fcb
L := 0x9fcb (2)

0x66a0:
0x00000000000066a0: mov rsi, qword ptr [rbp + 8]
0x00000000000066a4: mov edx, r13d
0x00000000000066a7: mov rdi, r15
0x00000000000066aa: call 0x5f80
0x00000000000066af: jmp 0x6683
L := 0x6683 (2)

0xa6a8:
0x000000000000a6a8: mov ecx, r14d
0x000000000000a6ab: jmp 0x9efc
L := 0x9efc (2)

0x146b0:
0x00000000000146b0: push rbx
0x00000000000146b1: mov rbx, rdi
0x00000000000146b4: call 0x3950
0x00000000000146b9: mov rdi, rbx
0x00000000000146bc: lea rsi, [rax + 1]
0x00000000000146c0: pop rbx
0x00000000000146c1: jmp 0x14680
0x0000000000014680: push rbp
0x0000000000014681: push rbx
0x0000000000014682: mov rbp, rdi
0x0000000000014685: mov rdi, rsi
0x0000000000014688: mov rbx, rsi
0x000000000001468b: sub rsp, 8
0x000000000001468f: call 0x14480
0x0000000000014694: add rsp, 8
0x0000000000014698: mov rdx, rbx
0x000000000001469b: mov rsi, rbp
0x000000000001469e: pop rbx
0x000000000001469f: pop rbp
0x00000000000146a0: mov rdi, rax
0x00000000000146a3: jmp 0x3b80
L := 0x3b80 (2)

0xe6bc:
if
    0x000000000000e6bc: mov rcx, qword ptr [rsp + 8]
    0x000000000000e6c1: xor rcx, qword ptr fs:[0x28]
    0x000000000000e6ca: jne 0xe8ef
then
    0x000000000000e8ef: call 0x3970
    0x000000000000e8f4: nop 
    0x000000000000e8f6: nop word ptr cs:[rax + rax]
    if
        0x000000000000e900: push rbx
        0x000000000000e901: mov rbx, rsi
        0x000000000000e904: sub rsp, 0x10
        0x000000000000e908: mov rdx, rsp
        0x000000000000e90b: mov rax, qword ptr fs:[0x28]
        0x000000000000e914: mov qword ptr [rsp + 8], rax
        0x000000000000e919: xor eax, eax
        0x000000000000e91b: call 0xe670
        0x000000000000e920: cmp eax, -1
        0x000000000000e923: je 0xe950
    then
        0x000000000000e950: xor ebx, ebx
        0x000000000000e952: jmp 0xe92d
        L := 0xe92d (3)
    else
        if
            0x000000000000e925: test eax, eax
            0x000000000000e927: jne 0xe92d
        then
            L := 0xe92d (3)
        else
            0x000000000000e929: mov rbx, qword ptr [rsp]
            L := 0xe92d (3)
        fi
    fi
else
    0x000000000000e6d0: add rsp, 0x18
    0x000000000000e6d4: pop rbx
    0x000000000000e6d5: pop rbp
    0x000000000000e6d6: pop r12
    0x000000000000e6d8: pop r13
    0x000000000000e6da: ret 
    L := 0x0 (130)
fi

0xa6be:
0x000000000000a6be: lea rsi, [rip + 0xd5b8]
0x000000000000a6c5: mov edx, 5
0x000000000000a6ca: xor edi, edi
0x000000000000a6cc: call 0x3930
0x000000000000a6d1: mov rdx, r12
0x000000000000a6d4: mov rsi, rax
0x000000000000a6d7: mov edi, 1
0x000000000000a6dc: call 0x69a0
0x000000000000a6e1: xor r12d, r12d
0x000000000000a6e4: jmp 0x9ca4
L := 0x9ca4 (3)

0x146d0:
0x00000000000146d0: lea rsi, [rip + 0x6818]
0x00000000000146d7: sub rsp, 8
0x00000000000146db: mov edx, 5
0x00000000000146e0: xor edi, edi
0x00000000000146e2: call 0x3930
0x00000000000146e7: mov edi, dword ptr [rip + 0x20bb0b]
0x00000000000146ed: lea rdx, [rip + 0x5c08]
0x00000000000146f4: mov rcx, rax
0x00000000000146f7: xor esi, esi
0x00000000000146f9: xor eax, eax
0x00000000000146fb: call 0x3d20
0x0000000000014700: call 0x37e0
0x0000000000014705: nop word ptr cs:[rax + rax]
0x000000000001470f: nop 
if
    0x0000000000014710: push r15
    0x0000000000014712: push r14
    0x0000000000014714: mov r15, rcx
    0x0000000000014717: push r13
    0x0000000000014719: push r12
    0x000000000001471b: mov r14, rdx
    0x000000000001471e: push rbp
    0x000000000001471f: push rbx
    0x0000000000014720: mov edx, esi
    0x0000000000014722: xor esi, esi
    0x0000000000014724: mov r12, rdi
    0x0000000000014727: mov r13, r9
    0x000000000001472a: sub rsp, 0x18
    0x000000000001472e: mov rcx, rsp
    0x0000000000014731: mov ebx, dword ptr [rsp + 0x50]
    0x0000000000014735: mov rax, qword ptr fs:[0x28]
    0x000000000001473e: mov qword ptr [rsp + 8], rax
    0x0000000000014743: xor eax, eax
    0x0000000000014745: call 0x14e20
    0x000000000001474a: test eax, eax
    0x000000000001474c: jne 0x147e0
then
    if
        0x00000000000147e0: mov ebp, eax
        0x00000000000147e2: call 0x37f0
        0x00000000000147e7: cmp ebp, 1
        0x00000000000147ea: mov r14, rax
        0x00000000000147ed: je 0x14800
    then
        0x0000000000014800: mov dword ptr [rax], 0x4b
        0x0000000000014806: jmp 0x1477a
        L := 0x1477a (4)
    else
        if
            0x00000000000147ef: cmp ebp, 3
            0x00000000000147f2: jne 0x1477a
        then
            L := 0x1477a (4)
        else
            0x00000000000147f4: mov dword ptr [rax], 0
            0x00000000000147fa: jmp 0x1477a
            L := 0x1477a (4)
        fi
    fi
else
    if
        0x0000000000014752: mov rbp, qword ptr [rsp]
        0x0000000000014756: cmp rbp, r14
        0x0000000000014759: jb 0x14760
    then
        L := 0x14760 (2)
    else
        if
            0x000000000001475b: cmp rbp, r15
            0x000000000001475e: jbe 0x147b4
        then
            L := 0x147b4 (2)
        else
            L := 0x14760 (2)
        fi
    fi
fi

0xc6d1:
0x000000000000c6d1: lea rax, [rsp + 0x40]
0x000000000000c6d6: mov qword ptr [rsp + 0x20], r14
0x000000000000c6db: mov qword ptr [rsp + 0x10], 0
0x000000000000c6e4: mov qword ptr [rsp + 0x30], 0
0x000000000000c6ed: mov qword ptr [rsp + 0x28], 0
0x000000000000c6f6: mov qword ptr [rsp + 8], rax
L := 0xc6fb (4)

0xc6fb:
if
    0x000000000000c6fb: movzx eax, byte ptr [r14]
    0x000000000000c6ff: test al, al
    0x000000000000c701: je 0xc80f
then
    L := 0xc80f (3)
else
    0x000000000000c707: nop word ptr [rax + rax]
    L := 0xc710 (2)
fi

0xe703:
0x000000000000e703: pxor xmm0, xmm0
0x000000000000e707: cvtsi2ss xmm0, rax
L := 0xe70c (2)

0xe70c:
if
    0x000000000000e70c: mulss xmm0, dword ptr [rdx + 8]
    0x000000000000e711: ucomiss xmm1, xmm0
    0x000000000000e714: ja 0xe7b0
then
    if
        0x000000000000e7b0: lea rdi, [rbx + 0x28]
        0x000000000000e7b4: call 0xdaa0
        0x000000000000e7b9: mov rax, qword ptr [rbx + 0x10]
        0x000000000000e7bd: mov rdx, qword ptr [rbx + 0x28]
        0x000000000000e7c1: test rax, rax
        0x000000000000e7c4: movss xmm2, dword ptr [rdx + 8]
        0x000000000000e7c9: js 0xe890
    then
        0x000000000000e890: mov rcx, rax
        0x000000000000e893: pxor xmm0, xmm0
        0x000000000000e897: shr rcx, 1
        0x000000000000e89a: and eax, 1
        0x000000000000e89d: or rcx, rax
        0x000000000000e8a0: cvtsi2ss xmm0, rcx
        0x000000000000e8a5: addss xmm0, xmm0
        0x000000000000e8a9: jmp 0xe7d8
        L := 0xe7d8 (2)
    else
        0x000000000000e7cf: pxor xmm0, xmm0
        0x000000000000e7d3: cvtsi2ss xmm0, rax
        L := 0xe7d8 (2)
    fi
else
    L := 0xe71a (3)
fi

0xc710:
if
    0x000000000000c710: cmp al, 0x2f
    0x000000000000c712: jne 0xc72c
then
    L := 0xc72c (2)
else
    0x000000000000c714: nop dword ptr [rax]
    L := 0xc718 (2)
fi

0xc718:
if
    0x000000000000c718: add r14, 1
    0x000000000000c71c: movzx eax, byte ptr [r14]
    0x000000000000c720: cmp al, 0x2f
    0x000000000000c722: je 0xc718
then
    L := 0xc718 (2)
else
    if
        0x000000000000c724: test al, al
        0x000000000000c726: je 0xc9f0
    then
        0x000000000000c9f0: mov r13, r14
        0x000000000000c9f3: jmp 0xc74a
        L := 0xc74a (3)
    else
        L := 0xc72c (2)
    fi
fi

0xe71a:
if
    0x000000000000e71a: mov r12, qword ptr [rsp]
    0x000000000000e71e: cmp qword ptr [r12], 0
    0x000000000000e723: je 0xe858
then
    L := 0xe858 (2)
else
    if
        0x000000000000e729: mov rax, qword ptr [rbx + 0x48]
        0x000000000000e72d: test rax, rax
        0x000000000000e730: je 0xe870
    then
        if
            0x000000000000e870: mov edi, 0x10
            0x000000000000e875: call 0x3e78
            0x000000000000e87a: test rax, rax
            0x000000000000e87d: jne 0xe73e
        then
            L := 0xe73e (2)
        else
            L := 0xe883 (3)
        fi
    else
        0x000000000000e736: mov rdx, qword ptr [rax + 8]
        0x000000000000e73a: mov qword ptr [rbx + 0x48], rdx
        L := 0xe73e (2)
    fi
fi

0xa720:
0x000000000000a720: xor r15d, r15d
0x000000000000a723: jmp 0xa046
L := 0xa046 (5)

0xc72c:
0x000000000000c72c: mov r13, r14
0x000000000000c72f: jmp 0xc73d
L := 0xc73d (2)

0xc73d:
if
    0x000000000000c73d: add r13, 1
    0x000000000000c741: movzx edx, byte ptr [r13]
    0x000000000000c746: test dl, dl
    0x000000000000c748: jne 0xc738
then
    if
        0x000000000000c738: cmp dl, 0x2f
        0x000000000000c73b: je 0xc74a
    then
        L := 0xc74a (3)
    else
        L := 0xc73d (2)
    fi
else
    L := 0xc74a (3)
fi

0xe73e:
0x000000000000e73e: mov rdx, qword ptr [r12 + 8]
0x000000000000e743: mov qword ptr [rax], rbp
0x000000000000e746: mov qword ptr [rax + 8], rdx
0x000000000000e74a: mov qword ptr [r12 + 8], rax
0x000000000000e74f: mov eax, 1
0x000000000000e754: add qword ptr [rbx + 0x20], 1
0x000000000000e759: jmp 0xe6bc
L := 0xe6bc (5)

0xc74a:
if
    0x000000000000c74a: cmp r13, r14
    0x000000000000c74d: je 0xc80f
then
    L := 0xc80f (3)
else
    if
        0x000000000000c753: mov r12, r13
        0x000000000000c756: sub r12, r14
        0x000000000000c759: cmp r12, 1
        0x000000000000c75d: je 0xc930
    then
        if
            0x000000000000c930: cmp al, 0x2e
            0x000000000000c932: jne 0xc771
        then
            L := 0xc771 (4)
        else
            0x000000000000c938: jmp 0xc800
            L := 0xc800 (10)
        fi
    else
        if
            0x000000000000c763: cmp r12, 2
            0x000000000000c767: jne 0xc771
        then
            L := 0xc771 (4)
        else
            if
                0x000000000000c769: cmp al, 0x2e
                0x000000000000c76b: je 0xca00
            then
                if
                    0x000000000000ca00: cmp byte ptr [r14 + 1], 0x2e
                    0x000000000000ca05: jne 0xc771
                then
                    L := 0xc771 (4)
                else
                    if
                        0x000000000000ca0b: lea rax, [rbp + 1]
                        0x000000000000ca0f: mov r14, r13
                        0x000000000000ca12: cmp r15, rax
                        0x000000000000ca15: jbe 0xc6fb
                    then
                        L := 0xc6fb (4)
                    else
                        if
                            0x000000000000ca1b: lea rax, [r15 - 1]
                            0x000000000000ca1f: cmp rbp, rax
                            0x000000000000ca22: jae 0xcc69
                        then
                            0x000000000000cc69: mov r15, rax
                            0x000000000000cc6c: jmp 0xc6fb
                            L := 0xc6fb (4)
                        else
                            if
                                0x000000000000ca28: cmp byte ptr [r15 - 2], 0x2f
                                0x000000000000ca2d: mov r15, rax
                                0x000000000000ca30: je 0xc6fb
                            then
                                L := 0xc6fb (4)
                            else
                                L := 0xca36 (2)
                            fi
                        fi
                    fi
                fi
            else
                L := 0xc771 (4)
            fi
        fi
    fi
fi

0x14760:
0x0000000000014760: call 0x37f0
0x0000000000014765: cmp rbp, 0x40000000
0x000000000001476c: mov r14, rax
0x000000000001476f: sbb eax, eax
0x0000000000014771: and eax, 0xffffffd7
0x0000000000014774: add eax, 0x4b
0x0000000000014777: mov dword ptr [r14], eax
L := 0x1477a (4)

0xc771:
if
    0x000000000000c771: cmp byte ptr [r15 - 1], 0x2f
    0x000000000000c776: je 0xc780
then
    L := 0xc780 (2)
else
    0x000000000000c778: mov byte ptr [r15], 0x2f
    0x000000000000c77c: add r15, 1
    L := 0xc780 (2)
fi

0x1477a:
0x000000000001477a: mov rdi, r12
0x000000000001477d: call 0x13ce0
0x0000000000014782: mov esi, dword ptr [r14]
0x0000000000014785: mov r8, rax
0x0000000000014788: mov eax, 0
0x000000000001478d: lea rdx, [rip + 0x3644]
0x0000000000014794: mov rcx, r13
0x0000000000014797: cmp esi, 0x16
0x000000000001479a: cmove esi, eax
0x000000000001479d: test ebx, ebx
0x000000000001479f: mov eax, 1
0x00000000000147a4: cmove ebx, eax
0x00000000000147a7: xor eax, eax
0x00000000000147a9: mov edi, ebx
0x00000000000147ab: call 0x3d20
0x00000000000147b0: mov rbp, qword ptr [rsp]
L := 0x147b4 (2)

0xc780:
if
    0x000000000000c780: lea rax, [r15 + r12]
    0x000000000000c784: cmp rbx, rax
    0x000000000000c787: ja 0xc7ba
then
    L := 0xc7ba (2)
else
    0x000000000000c789: sub rbx, rbp
    0x000000000000c78c: sub r15, rbp
    0x000000000000c78f: mov rdi, rbp
    0x000000000000c792: lea rax, [r12 + rbx + 1]
    0x000000000000c797: add rbx, 0x1000
    0x000000000000c79e: cmp r12, 0x1000
    0x000000000000c7a5: cmovge rbx, rax
    0x000000000000c7a9: mov rsi, rbx
    0x000000000000c7ac: call 0x144e0
    0x000000000000c7b1: mov rbp, rax
    0x000000000000c7b4: add rbx, rax
    0x000000000000c7b7: add r15, rax
    L := 0xc7ba (2)
fi

0xe78a:
0x000000000000e78a: mov rcx, rax
0x000000000000e78d: pxor xmm0, xmm0
0x000000000000e791: shr rcx, 1
0x000000000000e794: and eax, 1
0x000000000000e797: or rcx, rax
0x000000000000e79a: cvtsi2ss xmm0, rcx
0x000000000000e79f: addss xmm0, xmm0
0x000000000000e7a3: jmp 0xe70c
L := 0xe70c (2)

0x67b0:
if
    0x00000000000067b0: push r12
    0x00000000000067b2: push rbp
    0x00000000000067b3: push rbx
    0x00000000000067b4: mov rax, qword ptr [rsi + 0x18]
    0x00000000000067b8: mov rbx, qword ptr [rsi + 0x10]
    0x00000000000067bc: mov rbp, rax
    0x00000000000067bf: sub rbp, rbx
    0x00000000000067c2: shr rbp, 3
    0x00000000000067c6: test rbp, rbp
    0x00000000000067c9: je 0x6857
then
    L := 0x6857 (2)
else
    if
        0x00000000000067cf: cmp rax, rbx
        0x00000000000067d2: je 0x6862
    then
        0x0000000000006862: or byte ptr [rsi + 0x50], 2
        0x0000000000006866: jmp 0x67d8
        L := 0x67d8 (2)
    else
        L := 0x67d8 (2)
    fi
fi

0x147b4:
if
    0x00000000000147b4: mov rdx, qword ptr [rsp + 8]
    0x00000000000147b9: xor rdx, qword ptr fs:[0x28]
    0x00000000000147c2: mov rax, rbp
    0x00000000000147c5: jne 0x1480b
then
    0x000000000001480b: call 0x3970
    0x0000000000014810: sub rsp, 0x10
    0x0000000000014814: push r9
    0x0000000000014816: mov r9, r8
    0x0000000000014819: mov r8, rcx
    0x000000000001481c: mov rcx, rdx
    0x000000000001481f: mov rdx, rsi
    0x0000000000014822: mov esi, 0xa
    0x0000000000014827: call 0x14710
    0x000000000001482c: add rsp, 0x18
    0x0000000000014830: ret 
    L := 0x0 (130)
else
    0x00000000000147c7: add rsp, 0x18
    0x00000000000147cb: pop rbx
    0x00000000000147cc: pop rbp
    0x00000000000147cd: pop r12
    0x00000000000147cf: pop r13
    0x00000000000147d1: pop r14
    0x00000000000147d3: pop r15
    0x00000000000147d5: ret 
    L := 0x0 (130)
fi

0xc7ba:
if
    0x000000000000c7ba: mov rdi, r15
    0x000000000000c7bd: mov rdx, r12
    0x000000000000c7c0: mov rsi, r14
    0x000000000000c7c3: call 0x3b80
    0x000000000000c7c8: cmp dword ptr [rsp + 4], 2
    0x000000000000c7cd: lea r15, [r15 + r12]
    0x000000000000c7d1: mov byte ptr [r15], 0
    0x000000000000c7d5: jne 0xc890
then
    L := 0xc890 (2)
else
    if
        0x000000000000c7db: cmp byte ptr [rsp + 0x1b], 0
        0x000000000000c7e0: je 0xc890
    then
        L := 0xc890 (2)
    else
        L := 0xc7e6 (2)
    fi
fi

0x67d8:
if
    0x00000000000067d8: mov rdx, qword ptr [rsi + 0x30]
    0x00000000000067dc: mov rcx, qword ptr [rsi + 0x20]
    0x00000000000067e0: add rax, rdx
    0x00000000000067e3: not rdx
    0x00000000000067e6: mov r8, rcx
    0x00000000000067e9: and rax, rdx
    0x00000000000067ec: mov rdx, qword ptr [rsi + 8]
    0x00000000000067f0: mov qword ptr [rsi + 0x18], rax
    0x00000000000067f4: sub r8, rdx
    0x00000000000067f7: sub rax, rdx
    0x00000000000067fa: cmp rax, r8
    0x00000000000067fd: ja 0x685c
then
    0x000000000000685c: mov qword ptr [rsi + 0x18], rcx
    0x0000000000006860: jmp 0x67ff
    L := 0x67ff (2)
else
    L := 0x67ff (2)
fi

0xe7d8:
if
    0x000000000000e7d8: mov rax, qword ptr [rbx + 0x18]
    0x000000000000e7dc: test rax, rax
    0x000000000000e7df: js 0xe8b0
then
    0x000000000000e8b0: mov rcx, rax
    0x000000000000e8b3: pxor xmm1, xmm1
    0x000000000000e8b7: shr rcx, 1
    0x000000000000e8ba: and eax, 1
    0x000000000000e8bd: or rcx, rax
    0x000000000000e8c0: cvtsi2ss xmm1, rcx
    0x000000000000e8c5: addss xmm1, xmm1
    0x000000000000e8c9: jmp 0xe7ee
    L := 0xe7ee (2)
else
    0x000000000000e7e5: pxor xmm1, xmm1
    0x000000000000e7e9: cvtsi2ss xmm1, rax
    L := 0xe7ee (2)
fi

0xc7e6:
0x000000000000c7e6: mov dword ptr [rsp + 0x58], 0
L := 0xc7ee (2)

0xe7ee:
if
    0x000000000000e7ee: movaps xmm3, xmm2
    0x000000000000e7f1: mulss xmm3, xmm0
    0x000000000000e7f5: ucomiss xmm1, xmm3
    0x000000000000e7f8: jbe 0xe71a
then
    L := 0xe71a (3)
else
    if
        0x000000000000e7fe: cmp byte ptr [rdx + 0x10], 0
        0x000000000000e802: mulss xmm0, dword ptr [rdx + 0xc]
        0x000000000000e807: jne 0xe80d
    then
        L := 0xe80d (2)
    else
        0x000000000000e809: mulss xmm0, xmm2
        L := 0xe80d (2)
    fi
fi

0xc7ee:
if
    0x000000000000c7ee: cmp byte ptr [r13], 0
    0x000000000000c7f3: je 0xc800
then
    L := 0xc800 (10)
else
    if
        0x000000000000c7f5: cmp dword ptr [rsp + 4], 2
        0x000000000000c7fa: jne 0xcc57
    then
        0x000000000000cc57: call 0x37f0
        0x000000000000cc5c: mov edx, 0x14
        0x000000000000cc61: mov r12, rax
        0x000000000000cc64: jmp 0xc901
        L := 0xc901 (2)
    else
        L := 0xc800 (10)
    fi
fi

0x67ff:
0x00000000000067ff: mov rax, qword ptr [rsi + 0x18]
0x0000000000006803: lea r12, [rbx + rbp*8]
0x0000000000006807: lea rbp, [rip + 0x11415]
0x000000000000680e: mov qword ptr [rsi + 0x10], rax
0x0000000000006812: mov rsi, qword ptr [rip + 0x219a6f]
0x0000000000006819: call 0x3af0
0x000000000000681e: nop 
L := 0x6820 (2)

0xc800:
if
    0x000000000000c800: mov r14, r13
    0x000000000000c803: movzx eax, byte ptr [r14]
    0x000000000000c807: test al, al
    0x000000000000c809: jne 0xc710
then
    L := 0xc710 (2)
else
    L := 0xc80f (3)
fi

0xe80d:
if
    0x000000000000e80d: ucomiss xmm0, dword ptr [rip + 0xbbd8]
    0x000000000000e814: jae 0xe883
then
    L := 0xe883 (3)
else
    if
        0x000000000000e816: ucomiss xmm0, dword ptr [rip + 0xbbd3]
        0x000000000000e81d: jae 0xe8d0
    then
        0x000000000000e8d0: subss xmm0, dword ptr [rip + 0xbb18]
        0x000000000000e8d8: movabs rax, 0x8000000000000000
        0x000000000000e8e2: cvttss2si rsi, xmm0
        0x000000000000e8e7: xor rsi, rax
        0x000000000000e8ea: jmp 0xe828
        L := 0xe828 (2)
    else
        0x000000000000e823: cvttss2si rsi, xmm0
        L := 0xe828 (2)
    fi
fi

0xc80f:
if
    0x000000000000c80f: lea rax, [rbp + 1]
    0x000000000000c813: cmp r15, rax
    0x000000000000c816: jbe 0xc823
then
    L := 0xc823 (3)
else
    if
        0x000000000000c818: cmp byte ptr [r15 - 1], 0x2f
        0x000000000000c81d: jne 0xc823
    then
        L := 0xc823 (3)
    else
        0x000000000000c81f: sub r15, 1
        L := 0xc823 (3)
    fi
fi

0xa816:
0x000000000000a816: mov rdx, qword ptr [rbx + 0x18]
0x000000000000a81a: mov qword ptr [rip + 0x215ac7], rdx
0x000000000000a821: jmp 0xa6a8
L := 0xa6a8 (3)

0x6820:
if
    0x0000000000006820: mov rdx, qword ptr [rbx]
    0x0000000000006823: xor eax, eax
    0x0000000000006825: mov rsi, rbp
    0x0000000000006828: mov edi, 1
    0x000000000000682d: add rbx, 8
    0x0000000000006831: call 0x3cd0
    0x0000000000006836: cmp rbx, r12
    0x0000000000006839: jne 0x6820
then
    L := 0x6820 (2)
else
    if
        0x000000000000683b: mov rdi, qword ptr [rip + 0x219a46]
        0x0000000000006842: mov rax, qword ptr [rdi + 0x28]
        0x0000000000006846: cmp rax, qword ptr [rdi + 0x30]
        0x000000000000684a: jae 0x686b
    then
        0x000000000000686b: pop rbx
        0x000000000000686c: pop rbp
        0x000000000000686d: pop r12
        0x000000000000686f: mov esi, 0xa
        0x0000000000006874: jmp 0x39d0
        0x00000000000039d0: jmp qword ptr [rip + 0x21c3a2]
        L := 0x21fd78 (1)
    else
        0x000000000000684c: lea rdx, [rax + 1]
        0x0000000000006850: mov qword ptr [rdi + 0x28], rdx
        0x0000000000006854: mov byte ptr [rax], 0xa
        L := 0x6857 (2)
    fi
fi

0xc823:
if
    0x000000000000c823: lea rax, [r15 + 1]
    0x000000000000c827: mov byte ptr [r15], 0
    0x000000000000c82b: cmp rbx, rax
    0x000000000000c82e: je 0xc842
then
    L := 0xc842 (2)
else
    0x000000000000c830: sub r15, rbp
    0x000000000000c833: mov rdi, rbp
    0x000000000000c836: lea rsi, [r15 + 1]
    0x000000000000c83a: call 0x144e0
    0x000000000000c83f: mov rbp, rax
    L := 0xc842 (2)
fi

0xe828:
if
    0x000000000000e828: mov rdi, rbx
    0x000000000000e82b: call 0xe430
    0x000000000000e830: test al, al
    0x000000000000e832: je 0xe883
then
    L := 0xe883 (3)
else
    if
        0x000000000000e834: xor ecx, ecx
        0x000000000000e836: mov rdx, r12
        0x000000000000e839: mov rsi, rbp
        0x000000000000e83c: mov rdi, rbx
        0x000000000000e83f: call 0xd980
        0x000000000000e844: test rax, rax
        0x000000000000e847: je 0xe71a
    then
        L := 0xe71a (3)
    else
        L := 0xe84d (2)
    fi
fi

0x14840:
if
    0x0000000000014840: push rbx
    0x0000000000014841: xor esi, esi
    0x0000000000014843: xor edi, edi
    0x0000000000014845: call 0x3a90
    0x000000000001484a: test rax, rax
    0x000000000001484d: mov rbx, rax
    0x0000000000014850: je 0x14860
then
    if
        0x0000000000014860: call 0x37f0
        0x0000000000014865: cmp dword ptr [rax], 0xc
        0x0000000000014868: jne 0x14852
    then
        L := 0x14852 (2)
    else
        0x000000000001486a: call 0x146d0
        0x000000000001486f: nop 
        0x0000000000014870: push r14
        0x0000000000014872: push r13
        0x0000000000014874: movabs r13, 0x1000401001
        0x000000000001487e: push r12
        0x0000000000014880: push rbp
        0x0000000000014881: push rbx
        0x0000000000014882: xor ebx, ebx
        0x0000000000014884: sub rsp, 0x10
        0x0000000000014888: mov rax, qword ptr fs:[0x28]
        0x0000000000014891: mov qword ptr [rsp + 8], rax
        0x0000000000014896: xor eax, eax
        0x0000000000014898: mov qword ptr [rsp], 0x22
        0x00000000000148a0: mov r12, rsp
        0x00000000000148a3: call 0x37f0
        0x00000000000148a8: mov rbp, rax
        0x00000000000148ab: nop dword ptr [rax + rax]
        L := 0x148b0 (3)
    fi
else
    L := 0x14852 (2)
fi

0xc842:
if
    0x000000000000c842: mov rdi, qword ptr [rsp + 0x28]
    0x000000000000c847: call 0x3e70
    0x000000000000c84c: mov rax, qword ptr [rsp + 0x10]
    0x000000000000c851: test rax, rax
    0x000000000000c854: je 0xc860
then
    L := 0xc860 (6)
else
    0x000000000000c856: mov rdi, rax
    0x000000000000c859: call 0xe350
    0x000000000000c85e: nop 
    L := 0xc860 (6)
fi

0xe84d:
0x000000000000e84d: call 0x37e0
0x000000000000e852: nop word ptr [rax + rax]
L := 0xe858 (2)

0xa84c:
0x000000000000a84c: mov esi, 1
0x000000000000a851: jmp 0x9a3d
L := 0x9a3d (2)

0x14852:
0x0000000000014852: mov rax, rbx
0x0000000000014855: pop rbx
0x0000000000014856: ret 
L := 0x0 (130)

0x6857:
0x0000000000006857: pop rbx
0x0000000000006858: pop rbp
0x0000000000006859: pop r12
0x000000000000685b: ret 
L := 0x0 (130)

0xe858:
0x000000000000e858: mov qword ptr [r12], rbp
0x000000000000e85c: mov eax, 1
0x000000000000e861: add qword ptr [rbx + 0x20], 1
0x000000000000e866: add qword ptr [rbx + 0x18], 1
0x000000000000e86b: jmp 0xe6bc
L := 0xe6bc (5)

0xa856:
0x000000000000a856: call 0x146d0
0x000000000000a85b: nop dword ptr [rax + rax]
if
    0x000000000000a860: push r15
    0x000000000000a862: push r14
    0x000000000000a864: mov r14, rdi
    0x000000000000a867: push r13
    0x000000000000a869: push r12
    0x000000000000a86b: push rbp
    0x000000000000a86c: push rbx
    0x000000000000a86d: mov rbx, rsi
    0x000000000000a870: sub rsp, 0x348
    0x000000000000a877: mov dword ptr [rsp + 0xc], edx
    0x000000000000a87b: mov byte ptr [rsp + 0xb], dl
    0x000000000000a87f: mov rax, qword ptr fs:[0x28]
    0x000000000000a888: mov qword ptr [rsp + 0x338], rax
    0x000000000000a890: xor eax, eax
    0x000000000000a892: call 0x37f0
    0x000000000000a897: mov rdi, r14
    0x000000000000a89a: mov dword ptr [rax], 0
    0x000000000000a8a0: mov r12, rax
    0x000000000000a8a3: call 0x3900
    0x000000000000a8a8: test rax, rax
    0x000000000000a8ab: je 0xade0
then
    0x000000000000ade0: lea rsi, [rip + 0xcece]
    0x000000000000ade7: xor edi, edi
    0x000000000000ade9: mov edx, 5
    0x000000000000adee: call 0x3930
    0x000000000000adf3: movzx edi, byte ptr [rsp + 0xc]
    0x000000000000adf8: mov rdx, r14
    0x000000000000adfb: mov rsi, rax
    0x000000000000adfe: call 0x69a0
    0x000000000000ae03: jmp 0xa911
    L := 0xa911 (5)
else
    if
        0x000000000000a8b1: cmp qword ptr [rip + 0x216b0f], 0
        0x000000000000a8b9: mov r13, rax
        0x000000000000a8bc: je 0xaa37
    then
        L := 0xaa37 (2)
    else
        if
            0x000000000000a8c2: mov rdi, rax
            0x000000000000a8c5: call 0x3b40
            0x000000000000a8ca: test eax, eax
            0x000000000000a8cc: lea rdx, [rsp + 0x10]
            0x000000000000a8d1: js 0xa940
        then
            if
                0x000000000000a940: mov rsi, r14
                0x000000000000a943: mov edi, 1
                0x000000000000a948: call 0x3be0
                0x000000000000a94d: shr eax, 0x1f
                0x000000000000a950: test al, al
                0x000000000000a952: jne 0xa8e6
            then
                L := 0xa8e6 (2)
            else
                L := 0xa954 (2)
            fi
        else
            if
                0x000000000000a8d3: mov esi, eax
                0x000000000000a8d5: mov edi, 1
                0x000000000000a8da: call 0x3c40
                0x000000000000a8df: shr eax, 0x1f
                0x000000000000a8e2: test al, al
                0x000000000000a8e4: je 0xa954
            then
                L := 0xa954 (2)
            else
                L := 0xa8e6 (2)
            fi
        fi
    fi
fi

0xc860:
if
    0x000000000000c860: mov rcx, qword ptr [rsp + 0xd8]
    0x000000000000c868: xor rcx, qword ptr fs:[0x28]
    0x000000000000c871: mov rax, rbp
    0x000000000000c874: jne 0xcc71
then
    0x000000000000cc71: call 0x3970
    0x000000000000cc76: nop word ptr cs:[rax + rax]
    0x000000000000cc80: mov qword ptr [rip + 0x214751], rdi
    0x000000000000cc87: ret 
    L := 0x0 (130)
else
    0x000000000000c87a: add rsp, 0xe8
    0x000000000000c881: pop rbx
    0x000000000000c882: pop rbp
    0x000000000000c883: pop r12
    0x000000000000c885: pop r13
    0x000000000000c887: pop r14
    0x000000000000c889: pop r15
    0x000000000000c88b: ret 
    L := 0x0 (130)
fi

0xe883:
0x000000000000e883: mov eax, 0xffffffff
0x000000000000e888: jmp 0xe6bc
L := 0xe6bc (5)

0xc890:
if
    0x000000000000c890: mov eax, dword ptr [rsp + 0x1c]
    0x000000000000c894: mov rdx, qword ptr [rsp + 8]
    0x000000000000c899: mov rsi, rbp
    0x000000000000c89c: mov edi, 1
    0x000000000000c8a1: test eax, eax
    0x000000000000c8a3: je 0xc960
then
    0x000000000000c960: call 0x3960
    0x000000000000c965: test eax, eax
    0x000000000000c967: setne al
    0x000000000000c96a: jmp 0xc8b3
    L := 0xc8b3 (2)
else
    0x000000000000c8a9: call 0x3be0
    0x000000000000c8ae: test eax, eax
    0x000000000000c8b0: setne al
    L := 0xc8b3 (2)
fi

0x148b0:
if
    0x00000000000148b0: mov rdi, rbx
    0x00000000000148b3: mov rsi, r12
    0x00000000000148b6: call 0x145e0
    0x00000000000148bb: mov rsi, qword ptr [rsp]
    0x00000000000148bf: mov rdi, rax
    0x00000000000148c2: mov rbx, rax
    0x00000000000148c5: lea r14, [rax + rsi - 2]
    0x00000000000148ca: sub rsi, 1
    0x00000000000148ce: mov byte ptr [r14], 0
    0x00000000000148d2: mov dword ptr [rbp], 0
    0x00000000000148d9: call 0x3db0
    0x00000000000148de: test eax, eax
    0x00000000000148e0: jne 0x14910
then
    if
        0x0000000000014910: mov r14d, dword ptr [rbp]
        0x0000000000014914: cmp r14d, 0x24
        0x0000000000014918: jbe 0x14930
    then
        if
            0x0000000000014930: bt r13, r14
            0x0000000000014934: jb 0x148b0
        then
            L := 0x148b0 (3)
        else
            0x000000000001493a: jmp 0x1491a
            L := 0x1491a (2)
        fi
    else
        L := 0x1491a (2)
    fi
else
    if
        0x00000000000148e2: cmp byte ptr [r14], 0
        0x00000000000148e6: jne 0x148b0
    then
        L := 0x148b0 (3)
    else
        L := 0x148e8 (2)
    fi
fi

0xc8b3:
if
    0x000000000000c8b3: test al, al
    0x000000000000c8b5: je 0xc940
then
    if
        0x000000000000c940: mov eax, dword ptr [rsp + 0x58]
        0x000000000000c944: and eax, 0xf000
        0x000000000000c949: cmp eax, 0xa000
        0x000000000000c94e: je 0xc970
    then
        if
            0x000000000000c970: cmp qword ptr [rsp + 0x10], 0
            0x000000000000c976: je 0xcb26
        then
            if
                0x000000000000cb26: lea r8, [rip + 0x20f3]
                0x000000000000cb2d: lea rcx, [rip + 0x20ac]
                0x000000000000cb34: xor esi, esi
                0x000000000000cb36: lea rdx, [rip + 0x2033]
                0x000000000000cb3d: mov edi, 7
                0x000000000000cb42: call 0xe100
                0x000000000000cb47: test rax, rax
                0x000000000000cb4a: mov qword ptr [rsp + 0x10], rax
                0x000000000000cb4f: jne 0xc97c
            then
                L := 0xc97c (2)
            else
                0x000000000000cb55: call 0x146d0
                0x000000000000cb5a: nop word ptr [rax + rax]
                L := 0xcb60 (2)
            fi
        else
            L := 0xc97c (2)
        fi
    else
        if
            0x000000000000c950: cmp eax, 0x4000
            0x000000000000c955: je 0xc800
        then
            L := 0xc800 (10)
        else
            0x000000000000c95b: jmp 0xc7ee
            L := 0xc7ee (2)
        fi
    fi
else
    if
        0x000000000000c8bb: call 0x37f0
        0x000000000000c8c0: mov r14, rax
        0x000000000000c8c3: mov edx, dword ptr [rax]
        0x000000000000c8c5: mov eax, dword ptr [rsp + 4]
        0x000000000000c8c9: test eax, eax
        0x000000000000c8cb: je 0xc8fe
    then
        L := 0xc8fe (3)
    else
        if
            0x000000000000c8cd: cmp eax, 1
            0x000000000000c8d0: jne 0xc7e6
        then
            L := 0xc7e6 (2)
        else
            if
                0x000000000000c8d6: lea rsi, [rip + 0xb670]
                0x000000000000c8dd: mov rdi, r13
                0x000000000000c8e0: mov dword ptr [rsp + 0x38], edx
                0x000000000000c8e4: call 0x3ab0
                0x000000000000c8e9: cmp byte ptr [r13 + rax], 0
                0x000000000000c8ef: mov edx, dword ptr [rsp + 0x38]
                0x000000000000c8f3: jne 0xc8fe
            then
                L := 0xc8fe (3)
            else
                if
                    0x000000000000c8f5: cmp edx, 2
                    0x000000000000c8f8: je 0xc800
                then
                    L := 0xc800 (10)
                else
                    L := 0xc8fe (3)
                fi
            fi
        fi
    fi
fi

0x48c6:
if
    0x00000000000048c6: mov rax, qword ptr [rip + 0x21c9e3]
    0x00000000000048cd: mov ecx, 3
    0x00000000000048d2: xor edx, edx
    0x00000000000048d4: div rcx
    0x00000000000048d7: test rdx, rdx
    0x00000000000048da: setne dl
    0x00000000000048dd: xor edi, edi
    0x00000000000048df: movzx edx, dl
    0x00000000000048e2: add rax, rdx
    0x00000000000048e5: mov qword ptr [rip + 0x21c914], rax
    0x00000000000048ec: call 0x13590
    0x00000000000048f1: mov edx, dword ptr [rip + 0x21ca41]
    0x00000000000048f7: mov r13d, eax
    0x00000000000048fa: cmp edx, 4
    0x00000000000048fd: je 0x4d36
then
    L := 0x4d36 (2)
else
    if
        0x0000000000004903: cmp edx, 1
        0x0000000000004906: je 0x4d36
    then
        L := 0x4d36 (2)
    else
        if
            0x000000000000490c: cmp qword ptr [rip + 0x21c99c], 0
            0x0000000000004914: jne 0x491c
        then
            L := 0x491c (2)
        else
            if
                0x0000000000004916: xor eax, eax
                0x0000000000004918: test edx, edx
                0x000000000000491a: jne 0x4934
            then
                L := 0x4934 (3)
            else
                L := 0x491c (2)
            fi
        fi
    fi
fi

0xa8e6:
0x000000000000a8e6: lea rsi, [rip + 0xd8e3]
0x000000000000a8ed: mov edx, 5
0x000000000000a8f2: xor edi, edi
0x000000000000a8f4: call 0x3930
0x000000000000a8f9: movzx edi, byte ptr [rsp + 0xc]
0x000000000000a8fe: mov rdx, r14
0x000000000000a901: mov rsi, rax
0x000000000000a904: call 0x69a0
0x000000000000a909: mov rdi, r13
0x000000000000a90c: call 0x3ac0
L := 0xa911 (5)

0x148e8:
if
    0x00000000000148e8: mov rdx, qword ptr [rsp + 8]
    0x00000000000148ed: xor rdx, qword ptr fs:[0x28]
    0x00000000000148f6: mov rax, rbx
    0x00000000000148f9: jne 0x1493c
then
    0x000000000001493c: call 0x3970
    0x0000000000014941: nop word ptr cs:[rax + rax]
    0x000000000001494b: nop dword ptr [rax + rax]
    if
        0x0000000000014950: push r15
        0x0000000000014952: push r14
        0x0000000000014954: push r13
        0x0000000000014956: push r12
        0x0000000000014958: push rbp
        0x0000000000014959: push rbx
        0x000000000001495a: sub rsp, 0x28
        0x000000000001495e: mov rax, qword ptr fs:[0x28]
        0x0000000000014967: mov qword ptr [rsp + 0x18], rax
        0x000000000001496c: xor eax, eax
        0x000000000001496e: cmp edx, 0x24
        0x0000000000014971: ja 0x14cd5
    then
        L := 0x14cd5 (2)
    else
        0x0000000000014977: lea rax, [rsp + 0x10]
        0x000000000001497c: mov r15, rsi
        0x000000000001497f: test rsi, rsi
        0x0000000000014982: mov rbp, rdi
        0x0000000000014985: mov dword ptr [rsp + 8], edx
        0x0000000000014989: mov r14, rcx
        0x000000000001498c: mov r13, r8
        0x000000000001498f: cmove r15, rax
        0x0000000000014993: call 0x37f0
        0x0000000000014998: mov dword ptr [rax], 0
        0x000000000001499e: mov r12, rax
        0x00000000000149a1: movzx ebx, byte ptr [rbp]
        0x00000000000149a5: call 0x3e50
        0x00000000000149aa: mov edx, dword ptr [rsp + 8]
        0x00000000000149ae: mov rsi, qword ptr [rax]
        0x00000000000149b1: mov rax, rbp
        0x00000000000149b4: jmp 0x149c7
        L := 0x149c7 (2)
    fi
else
    0x00000000000148fb: add rsp, 0x10
    0x00000000000148ff: pop rbx
    0x0000000000014900: pop rbp
    0x0000000000014901: pop r12
    0x0000000000014903: pop r13
    0x0000000000014905: pop r14
    0x0000000000014907: ret 
    L := 0x0 (130)
fi

0xc8fe:
0x000000000000c8fe: mov r12, r14
L := 0xc901 (2)

0xc901:
if
    0x000000000000c901: mov rdi, qword ptr [rsp + 0x28]
    0x000000000000c906: mov dword ptr [rsp + 4], edx
    0x000000000000c90a: call 0x3e70
    0x000000000000c90f: mov rdi, rbp
    0x000000000000c912: call 0x3e70
    0x000000000000c917: cmp qword ptr [rsp + 0x10], 0
    0x000000000000c91d: mov edx, dword ptr [rsp + 4]
    0x000000000000c921: je 0xc9dc
then
    L := 0xc9dc (2)
else
    0x000000000000c927: jmp 0xc9ca
    L := 0xc9ca (2)
fi

0xa911:
if
    0x000000000000a911: mov rax, qword ptr [rsp + 0x338]
    0x000000000000a919: xor rax, qword ptr fs:[0x28]
    0x000000000000a922: jne 0xaf0a
then
    0x000000000000af0a: call 0x3970
    L := 0xaf0f (2)
else
    0x000000000000a928: add rsp, 0x348
    0x000000000000a92f: pop rbx
    0x000000000000a930: pop rbp
    0x000000000000a931: pop r12
    0x000000000000a933: pop r13
    0x000000000000a935: pop r14
    0x000000000000a937: pop r15
    0x000000000000a939: ret 
    L := 0x0 (130)
fi

0x1491a:
0x000000000001491a: mov rdi, rbx
0x000000000001491d: xor ebx, ebx
0x000000000001491f: call 0x3e70
0x0000000000014924: mov dword ptr [rbp], r14d
0x0000000000014928: jmp 0x148e8
L := 0x148e8 (2)

0x491c:
0x000000000000491c: mov eax, r13d
0x000000000000491f: and eax, 0xfffffffd
0x0000000000004922: sub eax, 1
0x0000000000004925: sete al
0x0000000000004928: cmp r13d, 6
0x000000000000492c: sete dl
0x000000000000492f: or eax, edx
0x0000000000004931: movzx eax, al
L := 0x4934 (3)

0xe92d:
if
    0x000000000000e92d: mov rcx, qword ptr [rsp + 8]
    0x000000000000e932: xor rcx, qword ptr fs:[0x28]
    0x000000000000e93b: mov rax, rbx
    0x000000000000e93e: jne 0xe954
then
    0x000000000000e954: call 0x3970
    0x000000000000e959: nop dword ptr [rax]
    if
        0x000000000000e960: push r12
        0x000000000000e962: push rbp
        0x000000000000e963: mov ecx, 1
        0x000000000000e968: push rbx
        0x000000000000e969: mov rbx, rdi
        0x000000000000e96c: sub rsp, 0x10
        0x000000000000e970: mov rdx, rsp
        0x000000000000e973: mov rax, qword ptr fs:[0x28]
        0x000000000000e97c: mov qword ptr [rsp + 8], rax
        0x000000000000e981: xor eax, eax
        0x000000000000e983: call 0xd980
        0x000000000000e988: test rax, rax
        0x000000000000e98b: mov rbp, rax
        0x000000000000e98e: je 0xe99f
    then
        L := 0xe99f (6)
    else
        if
            0x000000000000e990: mov rax, qword ptr [rsp]
            0x000000000000e994: sub qword ptr [rbx + 0x20], 1
            0x000000000000e999: cmp qword ptr [rax], 0
            0x000000000000e99d: je 0xe9c0
        then
            if
                0x000000000000e9c0: mov rax, qword ptr [rbx + 0x18]
                0x000000000000e9c4: sub rax, 1
                0x000000000000e9c8: test rax, rax
                0x000000000000e9cb: mov qword ptr [rbx + 0x18], rax
                0x000000000000e9cf: js 0xead0
            then
                0x000000000000ead0: mov rdx, rax
                0x000000000000ead3: pxor xmm0, xmm0
                0x000000000000ead7: shr rdx, 1
                0x000000000000eada: and eax, 1
                0x000000000000eadd: or rdx, rax
                0x000000000000eae0: cvtsi2ss xmm0, rdx
                0x000000000000eae5: addss xmm0, xmm0
                0x000000000000eae9: jmp 0xe9de
                L := 0xe9de (2)
            else
                0x000000000000e9d5: pxor xmm0, xmm0
                0x000000000000e9d9: cvtsi2ss xmm0, rax
                L := 0xe9de (2)
            fi
        else
            L := 0xe99f (6)
        fi
    fi
else
    0x000000000000e940: add rsp, 0x10
    0x000000000000e944: pop rbx
    0x000000000000e945: ret 
    L := 0x0 (130)
fi

0x4934:
if
    0x0000000000004934: xor edi, edi
    0x0000000000004936: mov byte ptr [rip + 0x21ca6c], al
    0x000000000000493c: and byte ptr [rip + 0x21ca65], 1
    0x0000000000004943: call 0x13550
    0x0000000000004948: cmp r13d, 7
    0x000000000000494c: mov qword ptr [rip + 0x21c97d], rax
    0x0000000000004953: je 0x52fa
then
    0x00000000000052fa: mov edx, 1
    0x00000000000052ff: mov esi, 0x20
    0x0000000000005304: mov rdi, rax
    0x0000000000005307: call 0x135d0
    0x000000000000530c: jmp 0x4959
    L := 0x4959 (2)
else
    L := 0x4959 (2)
fi

0xa954:
if
    0x000000000000a954: mov rdx, qword ptr [rsp + 0x18]
    0x000000000000a959: mov edi, 0x10
    0x000000000000a95e: mov r15, qword ptr [rsp + 0x10]
    0x000000000000a963: mov qword ptr [rsp], rdx
    0x000000000000a967: call 0x14480
    0x000000000000a96c: mov rdx, qword ptr [rsp]
    0x000000000000a970: mov rdi, qword ptr [rip + 0x216a51]
    0x000000000000a977: mov rsi, rax
    0x000000000000a97a: mov qword ptr [rax + 8], r15
    0x000000000000a97e: mov rbp, rax
    0x000000000000a981: mov qword ptr [rax], rdx
    0x000000000000a984: call 0xe900
    0x000000000000a989: test rax, rax
    0x000000000000a98c: je 0xaf0f
then
    L := 0xaf0f (2)
else
    if
        0x000000000000a992: cmp rbp, rax
        0x000000000000a995: je 0xa9ec
    then
        if
            0x000000000000a9ec: mov rax, qword ptr [rip + 0x216705]
            0x000000000000a9f3: mov rdx, qword ptr [rip + 0x216706]
            0x000000000000a9fa: mov rbp, qword ptr [rsp + 0x18]
            0x000000000000a9ff: mov r15, qword ptr [rsp + 0x10]
            0x000000000000aa04: sub rdx, rax
            0x000000000000aa07: cmp rdx, 0xf
            0x000000000000aa0b: ja 0xaa25
        then
            L := 0xaa25 (2)
        else
            0x000000000000aa0d: lea rdi, [rip + 0x2166cc]
            0x000000000000aa14: mov esi, 0x10
            0x000000000000aa19: call 0x154f0
            0x000000000000aa1e: mov rax, qword ptr [rip + 0x2166d3]
            L := 0xaa25 (2)
        fi
    else
        0x000000000000a997: mov rdi, rbp
        0x000000000000a99a: call 0x3e70
        0x000000000000a99f: mov rdx, r14
        0x000000000000a9a2: mov esi, 3
        0x000000000000a9a7: xor edi, edi
        0x000000000000a9a9: call 0x13b10
        0x000000000000a9ae: lea rsi, [rip + 0xd843]
        0x000000000000a9b5: mov rbx, rax
        0x000000000000a9b8: mov edx, 5
        0x000000000000a9bd: xor edi, edi
        0x000000000000a9bf: call 0x3930
        0x000000000000a9c4: mov rcx, rbx
        0x000000000000a9c7: mov rdx, rax
        0x000000000000a9ca: xor esi, esi
        0x000000000000a9cc: xor edi, edi
        0x000000000000a9ce: xor eax, eax
        0x000000000000a9d0: call 0x3d20
        0x000000000000a9d5: mov rdi, r13
        0x000000000000a9d8: call 0x3ac0
        0x000000000000a9dd: mov dword ptr [rip + 0x216829], 2
        0x000000000000a9e7: jmp 0xa911
        L := 0xa911 (5)
    fi
fi

0x4959:
if
    0x0000000000004959: mov eax, dword ptr [rip + 0x21c9b5]
    0x000000000000495f: cmp eax, 1
    0x0000000000004962: jbe 0x499f
then
    L := 0x499f (3)
else
    if
        0x0000000000004964: lea rdx, [rip + 0x13508]
        0x000000000000496b: sub eax, 2
        0x000000000000496e: movsx esi, byte ptr [rdx + rax]
        0x0000000000004972: lea r13, [rax + rdx]
        0x0000000000004976: test sil, sil
        0x0000000000004979: je 0x499f
    then
        L := 0x499f (3)
    else
        0x000000000000497b: nop dword ptr [rax + rax]
        L := 0x4980 (2)
    fi
fi

0xc97c:
if
    0x000000000000c97c: mov rdx, qword ptr [rsp + 8]
    0x000000000000c981: mov rsi, qword ptr [rsp + 0x20]
    0x000000000000c986: mov rdi, qword ptr [rsp + 0x10]
    0x000000000000c98b: call 0xd000
    0x000000000000c990: test al, al
    0x000000000000c992: je 0xca50
then
    if
        0x000000000000ca50: mov rdx, qword ptr [rsp + 8]
        0x000000000000ca55: mov rsi, qword ptr [rsp + 0x20]
        0x000000000000ca5a: mov rdi, qword ptr [rsp + 0x10]
        0x000000000000ca5f: call 0xcf70
        0x000000000000ca64: mov rsi, qword ptr [rsp + 0x70]
        0x000000000000ca69: mov rdi, rbp
        0x000000000000ca6c: call 0xc1c0
        0x000000000000ca71: test rax, rax
        0x000000000000ca74: mov r14, rax
        0x000000000000ca77: je 0xcbe2
    then
        if
            0x000000000000cbe2: call 0x37f0
            0x000000000000cbe7: cmp dword ptr [rsp + 4], 2
            0x000000000000cbec: mov r14, rax
            0x000000000000cbef: mov edx, dword ptr [rax]
            0x000000000000cbf1: jne 0xcbfc
        then
            L := 0xcbfc (2)
        else
            if
                0x000000000000cbf3: cmp edx, 0xc
                0x000000000000cbf6: jne 0xc800
            then
                L := 0xc800 (10)
            else
                L := 0xcbfc (2)
            fi
        fi
    else
        if
            0x000000000000ca7d: mov rdi, rax
            0x000000000000ca80: call 0x3950
            0x000000000000ca85: mov rdi, r13
            0x000000000000ca88: mov r12, rax
            0x000000000000ca8b: mov qword ptr [rsp + 0x20], rax
            0x000000000000ca90: call 0x3950
            0x000000000000ca95: cmp qword ptr [rsp + 0x30], 0
            0x000000000000ca9b: mov rdx, rax
            0x000000000000ca9e: lea rcx, [r12 + rdx + 1]
            0x000000000000caa3: je 0xcb9f
        then
            0x000000000000cb9f: cmp rcx, 0x1000
            0x000000000000cba6: mov eax, 0x1000
            0x000000000000cbab: mov qword ptr [rsp + 0x38], rdx
            0x000000000000cbb0: cmovae rax, rcx
            0x000000000000cbb4: mov rdi, rax
            0x000000000000cbb7: mov qword ptr [rsp + 0x30], rax
            0x000000000000cbbc: call 0x14480
            0x000000000000cbc1: mov rdx, qword ptr [rsp + 0x38]
            0x000000000000cbc6: mov qword ptr [rsp + 0x28], rax
            0x000000000000cbcb: jmp 0xcad1
            L := 0xcad1 (3)
        else
            if
                0x000000000000caa9: cmp qword ptr [rsp + 0x30], rcx
                0x000000000000caae: jae 0xcad1
            then
                L := 0xcad1 (3)
            else
                0x000000000000cab0: mov rdi, qword ptr [rsp + 0x28]
                0x000000000000cab5: mov rsi, rcx
                0x000000000000cab8: mov qword ptr [rsp + 0x38], rdx
                0x000000000000cabd: mov qword ptr [rsp + 0x30], rcx
                0x000000000000cac2: call 0x144e0
                0x000000000000cac7: mov rdx, qword ptr [rsp + 0x38]
                0x000000000000cacc: mov qword ptr [rsp + 0x28], rax
                L := 0xcad1 (3)
            fi
        fi
    fi
else
    if
        0x000000000000c998: cmp dword ptr [rsp + 4], 2
        0x000000000000c99d: je 0xc800
    then
        L := 0xc800 (10)
    else
        0x000000000000c9a3: call 0x37f0
        0x000000000000c9a8: mov edx, 0x28
        0x000000000000c9ad: mov r12, rax
        L := 0xc9b0 (2)
    fi
fi

0x4980:
if
    0x0000000000004980: mov rdi, qword ptr [rip + 0x21c949]
    0x0000000000004987: add r13, 1
    0x000000000000498b: mov edx, 1
    0x0000000000004990: call 0x135d0
    0x0000000000004995: movsx esi, byte ptr [r13]
    0x000000000000499a: test sil, sil
    0x000000000000499d: jne 0x4980
then
    L := 0x4980 (2)
else
    L := 0x499f (3)
fi

0xe99f:
if
    0x000000000000e99f: mov rcx, qword ptr [rsp + 8]
    0x000000000000e9a4: xor rcx, qword ptr fs:[0x28]
    0x000000000000e9ad: mov rax, rbp
    0x000000000000e9b0: jne 0xeb5e
then
    0x000000000000eb5e: call 0x3970
    0x000000000000eb63: nop word ptr cs:[rax + rax]
    0x000000000000eb6d: nop dword ptr [rax]
    0x000000000000eb70: push rbp
    0x000000000000eb71: push rbx
    0x000000000000eb72: mov rbp, rdi
    0x000000000000eb75: mov rbx, rsi
    0x000000000000eb78: sub rsp, 8
    0x000000000000eb7c: mov rdi, qword ptr [rdi]
    0x000000000000eb7f: call 0x15d10
    0x000000000000eb84: xor rax, qword ptr [rbp + 8]
    0x000000000000eb88: xor edx, edx
    0x000000000000eb8a: add rsp, 8
    0x000000000000eb8e: div rbx
    0x000000000000eb91: pop rbx
    0x000000000000eb92: pop rbp
    0x000000000000eb93: mov rax, rdx
    0x000000000000eb96: ret 
    L := 0x0 (130)
else
    0x000000000000e9b6: add rsp, 0x10
    0x000000000000e9ba: pop rbx
    0x000000000000e9bb: pop rbp
    0x000000000000e9bc: pop r12
    0x000000000000e9be: ret 
    L := 0x0 (130)
fi

0x69a0:
if
    0x00000000000069a0: push r12
    0x00000000000069a2: push rbp
    0x00000000000069a3: mov rbp, rsi
    0x00000000000069a6: push rbx
    0x00000000000069a7: mov rsi, rdx
    0x00000000000069aa: mov ebx, edi
    0x00000000000069ac: mov edi, 4
    0x00000000000069b1: call 0x13a10
    0x00000000000069b6: mov r12, rax
    0x00000000000069b9: call 0x37f0
    0x00000000000069be: mov esi, dword ptr [rax]
    0x00000000000069c0: xor edi, edi
    0x00000000000069c2: xor eax, eax
    0x00000000000069c4: mov rcx, r12
    0x00000000000069c7: mov rdx, rbp
    0x00000000000069ca: call 0x3d20
    0x00000000000069cf: test bl, bl
    0x00000000000069d1: je 0x69e8
then
    if
        0x00000000000069e8: mov eax, dword ptr [rip + 0x21a822]
        0x00000000000069ee: test eax, eax
        0x00000000000069f0: jne 0x69dd
    then
        L := 0x69dd (2)
    else
        0x00000000000069f2: pop rbx
        0x00000000000069f3: mov dword ptr [rip + 0x21a813], 1
        0x00000000000069fd: pop rbp
        0x00000000000069fe: pop r12
        0x0000000000006a00: ret 
        L := 0x0 (130)
    fi
else
    0x00000000000069d3: mov dword ptr [rip + 0x21a833], 2
    L := 0x69dd (2)
fi

0x499f:
if
    0x000000000000499f: xor edi, edi
    0x00000000000049a1: call 0x13550
    0x00000000000049a6: mov edx, 1
    0x00000000000049ab: mov esi, 0x3a
    0x00000000000049b0: mov rdi, rax
    0x00000000000049b3: mov qword ptr [rip + 0x21c90e], rax
    0x00000000000049ba: call 0x135d0
    0x00000000000049bf: cmp byte ptr [rip + 0x21c952], 0
    0x00000000000049c6: je 0x49dc
then
    L := 0x49dc (2)
else
    if
        0x00000000000049c8: cmp dword ptr [rip + 0x21c969], 0
        0x00000000000049cf: je 0x4e80
    then
        if
            0x0000000000004e80: cmp byte ptr [rip + 0x21c48a], 0
            0x0000000000004e87: je 0x49ff
        then
            L := 0x49ff (3)
        else
            0x0000000000004e8d: jmp 0x49d5
            L := 0x49d5 (2)
        fi
    else
        L := 0x49d5 (2)
    fi
fi

0xc9b0:
0x000000000000c9b0: mov rdi, qword ptr [rsp + 0x28]
0x000000000000c9b5: mov dword ptr [rsp + 4], edx
0x000000000000c9b9: call 0x3e70
0x000000000000c9be: mov rdi, rbp
0x000000000000c9c1: call 0x3e70
0x000000000000c9c6: mov edx, dword ptr [rsp + 4]
L := 0xc9ca (2)

0x149c7:
if
    0x00000000000149c7: movzx ecx, bl
    0x00000000000149ca: test byte ptr [rsi + rcx*2 + 1], 0x20
    0x00000000000149cf: jne 0x149c0
then
    0x00000000000149c0: add rax, 1
    0x00000000000149c4: movzx ebx, byte ptr [rax]
    L := 0x149c7 (2)
else
    if
        0x00000000000149d1: cmp bl, 0x2d
        0x00000000000149d4: je 0x14a28
    then
        L := 0x14a28 (5)
    else
        if
            0x00000000000149d6: mov rsi, r15
            0x00000000000149d9: mov rdi, rbp
            0x00000000000149dc: call 0x3d60
            0x00000000000149e1: mov rcx, qword ptr [r15]
            0x00000000000149e4: mov rbx, rax
            0x00000000000149e7: cmp rcx, rbp
            0x00000000000149ea: je 0x14a18
        then
            if
                0x0000000000014a18: test r13, r13
                0x0000000000014a1b: mov qword ptr [rsp + 8], rcx
                0x0000000000014a20: jne 0x14a60
            then
                if
                    0x0000000000014a60: movzx r12d, byte ptr [rbp]
                    0x0000000000014a65: test r12b, r12b
                    0x0000000000014a68: je 0x14a28
                then
                    L := 0x14a28 (5)
                else
                    if
                        0x0000000000014a6a: movsx esi, r12b
                        0x0000000000014a6e: mov rdi, r13
                        0x0000000000014a71: xor ebp, ebp
                        0x0000000000014a73: call 0x39a0
                        0x0000000000014a78: test rax, rax
                        0x0000000000014a7b: mov ebx, 1
                        0x0000000000014a80: mov rcx, qword ptr [rsp + 8]
                        0x0000000000014a85: je 0x14a28
                    then
                        L := 0x14a28 (5)
                    else
                        L := 0x14a87 (2)
                    fi
                fi
            else
                0x0000000000014a22: nop word ptr [rax + rax]
                L := 0x14a28 (5)
            fi
        else
            if
                0x00000000000149ec: mov eax, dword ptr [r12]
                0x00000000000149f0: test eax, eax
                0x00000000000149f2: je 0x14a58
            then
                0x0000000000014a58: xor ebp, ebp
                0x0000000000014a5a: jmp 0x149fe
                L := 0x149fe (2)
            else
                if
                    0x00000000000149f4: cmp eax, 0x22
                    0x00000000000149f7: mov ebp, 1
                    0x00000000000149fc: jne 0x14a28
                then
                    L := 0x14a28 (5)
                else
                    L := 0x149fe (2)
                fi
            fi
        fi
    fi
fi

0xc9ca:
0x000000000000c9ca: mov rdi, qword ptr [rsp + 0x10]
0x000000000000c9cf: mov dword ptr [rsp + 4], edx
0x000000000000c9d3: call 0xe350
0x000000000000c9d8: mov edx, dword ptr [rsp + 4]
L := 0xc9dc (2)

0x49d5:
0x00000000000049d5: mov byte ptr [rip + 0x21c93c], 0
L := 0x49dc (2)

0xc9dc:
0x000000000000c9dc: mov dword ptr [r12], edx
0x000000000000c9e0: xor ebp, ebp
0x000000000000c9e2: jmp 0xc860
L := 0xc860 (6)

0x69dd:
0x00000000000069dd: pop rbx
0x00000000000069de: pop rbp
0x00000000000069df: pop r12
0x00000000000069e1: ret 
L := 0x0 (130)

0xe9de:
if
    0x000000000000e9de: mov rax, qword ptr [rbx + 0x10]
    0x000000000000e9e2: mov rdx, qword ptr [rbx + 0x28]
    0x000000000000e9e6: test rax, rax
    0x000000000000e9e9: js 0xeab0
then
    0x000000000000eab0: mov rcx, rax
    0x000000000000eab3: pxor xmm1, xmm1
    0x000000000000eab7: shr rcx, 1
    0x000000000000eaba: and eax, 1
    0x000000000000eabd: or rcx, rax
    0x000000000000eac0: cvtsi2ss xmm1, rcx
    0x000000000000eac5: addss xmm1, xmm1
    0x000000000000eac9: jmp 0xe9f8
    L := 0xe9f8 (2)
else
    0x000000000000e9ef: pxor xmm1, xmm1
    0x000000000000e9f3: cvtsi2ss xmm1, rax
    L := 0xe9f8 (2)
fi

0x49dc:
if
    0x00000000000049dc: mov eax, dword ptr [rip + 0x21c952]
    0x00000000000049e2: mov edx, dword ptr [rip + 0x21c950]
    0x00000000000049e8: sub eax, 1
    0x00000000000049eb: cmp eax, 1
    0x00000000000049ee: ja 0x49fb
then
    L := 0x49fb (2)
else
    if
        0x00000000000049f0: cmp byte ptr [rsp + 8], 0
        0x00000000000049f5: je 0x5333
    then
        if
            0x0000000000005333: test edx, edx
            0x0000000000005335: je 0x49ff
        then
            L := 0x49ff (3)
        else
            0x000000000000533b: mov dword ptr [rip + 0x21bfeb], 4
            0x0000000000005345: jmp 0x4a42
            L := 0x4a42 (4)
        fi
    else
        L := 0x49fb (2)
    fi
fi

0xe9f8:
if
    0x000000000000e9f8: mulss xmm1, dword ptr [rdx]
    0x000000000000e9fc: ucomiss xmm1, xmm0
    0x000000000000e9ff: jbe 0xe99f
then
    L := 0xe99f (6)
else
    if
        0x000000000000ea01: lea rdi, [rbx + 0x28]
        0x000000000000ea05: call 0xdaa0
        0x000000000000ea0a: mov rax, qword ptr [rbx + 0x10]
        0x000000000000ea0e: mov rdx, qword ptr [rbx + 0x28]
        0x000000000000ea12: test rax, rax
        0x000000000000ea15: js 0xeb40
    then
        0x000000000000eb40: mov rcx, rax
        0x000000000000eb43: pxor xmm0, xmm0
        0x000000000000eb47: shr rcx, 1
        0x000000000000eb4a: and eax, 1
        0x000000000000eb4d: or rcx, rax
        0x000000000000eb50: cvtsi2ss xmm0, rcx
        0x000000000000eb55: addss xmm0, xmm0
        0x000000000000eb59: jmp 0xea24
        L := 0xea24 (2)
    else
        0x000000000000ea1b: pxor xmm0, xmm0
        0x000000000000ea1f: cvtsi2ss xmm0, rax
        L := 0xea24 (2)
    fi
fi

0x49fb:
if
    0x00000000000049fb: test edx, edx
    0x00000000000049fd: jne 0x4a42
then
    L := 0x4a42 (4)
else
    L := 0x49ff (3)
fi

0x149fe:
if
    0x00000000000149fe: test r13, r13
    0x0000000000014a01: je 0x14a0c
then
    L := 0x14a0c (2)
else
    if
        0x0000000000014a03: movzx r12d, byte ptr [rcx]
        0x0000000000014a07: test r12b, r12b
        0x0000000000014a0a: jne 0x14a87
    then
        L := 0x14a87 (2)
    else
        L := 0x14a0c (2)
    fi
fi

0x49ff:
if
    0x00000000000049ff: test r14, r14
    0x0000000000004a02: je 0x5367
then
    if
        0x0000000000005367: lea rdi, [rip + 0x12b0b]
        0x000000000000536e: call 0x37a0
        0x0000000000005373: test rax, rax
        0x0000000000005376: mov r14, rax
        0x0000000000005379: jne 0x4a08
    then
        L := 0x4a08 (2)
    else
        0x000000000000537f: lea r14, [rip + 0x12a1a]
        0x0000000000005386: jmp 0x524d
        L := 0x524d (2)
    fi
else
    L := 0x4a08 (2)
fi

0x4a08:
0x0000000000004a08: lea r13, [rip + 0x120c4]
0x0000000000004a0f: jmp 0x4a1c
L := 0x4a1c (2)

0x14a0c:
0x0000000000014a0c: mov qword ptr [r14], rbx
0x0000000000014a0f: jmp 0x14a2d
L := 0x14a2d (4)

0x4a1c:
if
    0x0000000000004a1c: mov edx, 6
    0x0000000000004a21: mov rsi, r13
    0x0000000000004a24: mov rdi, r14
    0x0000000000004a27: call 0x3800
    0x0000000000004a2c: test eax, eax
    0x0000000000004a2e: jne 0x5243
then
    if
        0x0000000000005243: cmp byte ptr [r14], 0x2b
        0x0000000000005247: je 0x538b
    then
        if
            0x000000000000538b: add r14, 1
            0x000000000000538f: mov esi, 0xa
            0x0000000000005394: mov rdi, r14
            0x0000000000005397: call 0x39a0
            0x000000000000539c: test rax, rax
            0x000000000000539f: mov r13, rax
            0x00000000000053a2: je 0x559b
        then
            0x000000000000559b: mov r15, r14
            0x000000000000559e: jmp 0x53c7
            L := 0x53c7 (2)
        else
            if
                0x00000000000053a8: lea r15, [rax + 1]
                0x00000000000053ac: mov esi, 0xa
                0x00000000000053b1: mov rdi, r15
                0x00000000000053b4: call 0x39a0
                0x00000000000053b9: test rax, rax
                0x00000000000053bc: jne 0x5797
            then
                0x0000000000005797: mov rdi, r14
                0x000000000000579a: call 0x13ce0
                0x000000000000579f: lea rsi, [rip + 0x126de]
                0x00000000000057a6: mov rbx, rax
                0x00000000000057a9: mov edx, 5
                0x00000000000057ae: xor edi, edi
                0x00000000000057b0: call 0x3930
                0x00000000000057b5: mov rcx, rbx
                0x00000000000057b8: mov rdx, rax
                0x00000000000057bb: xor esi, esi
                0x00000000000057bd: mov edi, 2
                0x00000000000057c2: xor eax, eax
                0x00000000000057c4: call 0x3d20
                0x00000000000057c9: mov r8, qword ptr [rip + 0x21aad0]
                0x00000000000057d0: mov esi, dword ptr [rsp + 0x30]
                0x00000000000057d4: lea rcx, [rip + 0x219b05]
                0x00000000000057db: xor edx, edx
                0x00000000000057dd: mov edi, eax
                0x00000000000057df: call 0x14d70
                L := 0x57e4 (2)
            else
                0x00000000000053c2: mov byte ptr [r13], 0
                L := 0x53c7 (2)
            fi
        fi
    else
        L := 0x524d (2)
    fi
else
    if
        0x0000000000004a34: mov edi, 2
        0x0000000000004a39: call 0xd830
        0x0000000000004a3e: test al, al
        0x0000000000004a40: jne 0x4a18
    then
        0x0000000000004a18: add r14, 6
        L := 0x4a1c (2)
    else
        L := 0x4a42 (4)
    fi
fi

0xea24:
if
    0x000000000000ea24: mov rax, qword ptr [rbx + 0x18]
    0x000000000000ea28: test rax, rax
    0x000000000000ea2b: js 0xeb20
then
    0x000000000000eb20: mov rcx, rax
    0x000000000000eb23: pxor xmm1, xmm1
    0x000000000000eb27: shr rcx, 1
    0x000000000000eb2a: and eax, 1
    0x000000000000eb2d: or rcx, rax
    0x000000000000eb30: cvtsi2ss xmm1, rcx
    0x000000000000eb35: addss xmm1, xmm1
    0x000000000000eb39: jmp 0xea3a
    L := 0xea3a (2)
else
    0x000000000000ea31: pxor xmm1, xmm1
    0x000000000000ea35: cvtsi2ss xmm1, rax
    L := 0xea3a (2)
fi

0xaa25:
0x000000000000aa25: lea rdx, [rax + 0x10]
0x000000000000aa29: mov qword ptr [rip + 0x2166c8], rdx
0x000000000000aa30: mov qword ptr [rax + 8], r15
0x000000000000aa34: mov qword ptr [rax], rbp
L := 0xaa37 (2)

0x14a28:
0x0000000000014a28: mov ebp, 4
L := 0x14a2d (4)

0x14a2d:
if
    0x0000000000014a2d: mov rdi, qword ptr [rsp + 0x18]
    0x0000000000014a32: xor rdi, qword ptr fs:[0x28]
    0x0000000000014a3b: mov eax, ebp
    0x0000000000014a3d: jne 0x14cd0
then
    0x0000000000014cd0: call 0x3970
    L := 0x14cd5 (2)
else
    0x0000000000014a43: add rsp, 0x28
    0x0000000000014a47: pop rbx
    0x0000000000014a48: pop rbp
    0x0000000000014a49: pop r12
    0x0000000000014a4b: pop r13
    0x0000000000014a4d: pop r14
    0x0000000000014a4f: pop r15
    0x0000000000014a51: ret 
    L := 0x0 (130)
fi

0xca36:
if
    0x000000000000ca36: sub r15, 1
    0x000000000000ca3a: cmp rbp, r15
    0x000000000000ca3d: je 0xc800
then
    L := 0xc800 (10)
else
    if
        0x000000000000ca43: cmp byte ptr [r15 - 1], 0x2f
        0x000000000000ca48: je 0xc800
    then
        L := 0xc800 (10)
    else
        0x000000000000ca4e: jmp 0xca36
        L := 0xca36 (2)
    fi
fi

0xaa37:
if
    0x000000000000aa37: call 0x60e0
    0x000000000000aa3c: cmp byte ptr [rip + 0x2168b3], 0
    0x000000000000aa43: jne 0xaaf0
then
    L := 0xaaf0 (2)
else
    if
        0x000000000000aa49: cmp byte ptr [rip + 0x216868], 0
        0x000000000000aa50: jne 0xaaf0
    then
        L := 0xaaf0 (2)
    else
        L := 0xaa56 (2)
    fi
fi

0xea3a:
if
    0x000000000000ea3a: movss xmm2, dword ptr [rdx]
    0x000000000000ea3e: mulss xmm2, xmm0
    0x000000000000ea42: ucomiss xmm2, xmm1
    0x000000000000ea45: jbe 0xe99f
then
    L := 0xe99f (6)
else
    if
        0x000000000000ea4b: cmp byte ptr [rdx + 0x10], 0
        0x000000000000ea4f: mulss xmm0, dword ptr [rdx + 4]
        0x000000000000ea54: je 0xeb10
    then
        0x000000000000eb10: mulss xmm0, dword ptr [rdx + 8]
        0x000000000000eb15: jmp 0xea5a
        L := 0xea5a (2)
    else
        L := 0xea5a (2)
    fi
fi

0x4a42:
if
    0x0000000000004a42: cmp byte ptr [rip + 0x21c8c9], 0
    0x0000000000004a49: movsxd r13, dword ptr [rip + 0x21b840]
    0x0000000000004a50: jne 0x50c1
then
    if
        0x00000000000050c1: lea rdi, [rip + 0x12e3b]
        0x00000000000050c8: call 0x37a0
        0x00000000000050cd: test rax, rax
        0x00000000000050d0: mov qword ptr [rsp + 0x28], rax
        0x00000000000050d5: je 0x50e0
    then
        L := 0x50e0 (2)
    else
        if
            0x00000000000050d7: cmp byte ptr [rax], 0
            0x00000000000050da: jne 0x53da
        then
            0x00000000000053da: mov rdi, rax
            0x00000000000053dd: lea r15, [rip + 0x21a47c]
            0x00000000000053e4: mov word ptr [rsp + 0x45], 0x3f3f
            0x00000000000053eb: mov byte ptr [rsp + 0x47], 0
            0x00000000000053f0: call 0x146b0
            0x00000000000053f5: mov dword ptr [rsp + 8], ebp
            0x00000000000053f9: mov qword ptr [rip + 0x21bf00], rax
            0x0000000000005400: mov qword ptr [rsp + 0x30], rax
            0x0000000000005405: mov qword ptr [rsp + 0x10], rbx
            L := 0x540a (4)
        else
            L := 0x50e0 (2)
        fi
    fi
else
    L := 0x4a56 (5)
fi

0x4a56:
if
    0x0000000000004a56: cmp dword ptr [rip + 0x21c89b], 1
    0x0000000000004a5d: je 0x4eaa
then
    if
        0x0000000000004eaa: cmp byte ptr [rip + 0x21c444], 0
        0x0000000000004eb1: mov eax, 2
        0x0000000000004eb6: jne 0x4ed0
    then
        L := 0x4ed0 (3)
    else
        if
            0x0000000000004eb8: cmp dword ptr [rip + 0x21c455], 3
            0x0000000000004ebf: je 0x4ed0
        then
            L := 0x4ed0 (3)
        else
            0x0000000000004ec1: cmp dword ptr [rip + 0x21c470], 1
            0x0000000000004ec8: sbb eax, eax
            0x0000000000004eca: and eax, 0xfffffffe
            0x0000000000004ecd: add eax, 4
            L := 0x4ed0 (3)
        fi
    fi
else
    L := 0x4a63 (2)
fi

0xaa56:
0x000000000000aa56: mov qword ptr [rsp], 0
0x000000000000aa5e: nop 
L := 0xaa60 (2)

0xea5a:
if
    0x000000000000ea5a: ucomiss xmm0, dword ptr [rip + 0xb98f]
    0x000000000000ea61: jae 0xeaf0
then
    0x000000000000eaf0: subss xmm0, dword ptr [rip + 0xb8f8]
    0x000000000000eaf8: movabs rax, 0x8000000000000000
    0x000000000000eb02: cvttss2si rsi, xmm0
    0x000000000000eb07: xor rsi, rax
    0x000000000000eb0a: jmp 0xea6c
    L := 0xea6c (2)
else
    0x000000000000ea67: cvttss2si rsi, xmm0
    L := 0xea6c (2)
fi

0xaa60:
if
    0x000000000000aa60: mov dword ptr [r12], 0
    0x000000000000aa68: mov rdi, r13
    0x000000000000aa6b: call 0x3bf0
    0x000000000000aa70: test rax, rax
    0x000000000000aa73: mov rbp, rax
    0x000000000000aa76: je 0xabb0
then
    if
        0x000000000000abb0: mov edx, dword ptr [r12]
        0x000000000000abb4: test edx, edx
        0x000000000000abb6: je 0xabe6
    then
        L := 0xabe6 (2)
    else
        if
            0x000000000000abb8: lea rsi, [rip + 0xd10f]
            0x000000000000abbf: xor edi, edi
            0x000000000000abc1: mov edx, 5
            0x000000000000abc6: call 0x3930
            0x000000000000abcb: movzx edi, byte ptr [rsp + 0xb]
            0x000000000000abd0: mov rdx, r14
            0x000000000000abd3: mov rsi, rax
            0x000000000000abd6: call 0x69a0
            0x000000000000abdb: cmp dword ptr [r12], 0x4b
            0x000000000000abe0: je 0xaae0
        then
            L := 0xaae0 (10)
        else
            L := 0xabe6 (2)
        fi
    fi
else
    if
        0x000000000000aa7c: lea rbx, [rax + 0x13]
        0x000000000000aa80: mov eax, dword ptr [rip + 0x21686a]
        0x000000000000aa86: cmp eax, 2
        0x000000000000aa89: je 0xad30
    then
        L := 0xad30 (5)
    else
        if
            0x000000000000aa8f: cmp byte ptr [rbp + 0x13], 0x2e
            0x000000000000aa93: je 0xad10
        then
            if
                0x000000000000ad10: test eax, eax
                0x000000000000ad12: je 0xaae0
            then
                L := 0xaae0 (10)
            else
                if
                    0x000000000000ad18: xor eax, eax
                    0x000000000000ad1a: cmp byte ptr [rbp + 0x14], 0x2e
                    0x000000000000ad1e: sete al
                    0x000000000000ad21: cmp byte ptr [rbp + rax + 0x14], 0
                    0x000000000000ad26: je 0xaae0
                then
                    L := 0xaae0 (10)
                else
                    0x000000000000ad2c: nop dword ptr [rax]
                    L := 0xad30 (5)
                fi
            fi
        else
            if
                0x000000000000aa99: test eax, eax
                0x000000000000aa9b: jne 0xad30
            then
                L := 0xad30 (5)
            else
                if
                    0x000000000000aaa1: mov r15, qword ptr [rip + 0x216838]
                    0x000000000000aaa8: test r15, r15
                    0x000000000000aaab: jne 0xaac5
                then
                    L := 0xaac5 (2)
                else
                    0x000000000000aaad: jmp 0xad30
                    L := 0xad30 (5)
                fi
            fi
        fi
    fi
fi

0x4a63:
if
    0x0000000000004a63: cmp byte ptr [rip + 0x21c88c], 0
    0x0000000000004a6a: je 0x4abb
then
    L := 0x4abb (2)
else
    if
        0x0000000000004a6c: lea r8, [rip + 0xf3d]
        0x0000000000004a73: lea rcx, [rip + 0xef6]
        0x0000000000004a7a: lea rdx, [rip + 0xedf]
        0x0000000000004a81: xor esi, esi
        0x0000000000004a83: mov edi, 0x1e
        0x0000000000004a88: call 0xe100
        0x0000000000004a8d: test rax, rax
        0x0000000000004a90: mov qword ptr [rip + 0x21c931], rax
        0x0000000000004a97: je 0x5846
    then
        L := 0x5846 (2)
    else
        0x0000000000004a9d: mov r8, qword ptr [rip + 0x21b524]
        0x0000000000004aa4: mov rcx, qword ptr [rip + 0x21b53d]
        0x0000000000004aab: lea rdi, [rip + 0x21c62e]
        0x0000000000004ab2: xor edx, edx
        0x0000000000004ab4: xor esi, esi
        0x0000000000004ab6: call 0x154b0
        L := 0x4abb (2)
    fi
fi

0xea6c:
if
    0x000000000000ea6c: mov rdi, rbx
    0x000000000000ea6f: call 0xe430
    0x000000000000ea74: test al, al
    0x000000000000ea76: jne 0xe99f
then
    L := 0xe99f (6)
else
    if
        0x000000000000ea7c: mov rdi, qword ptr [rbx + 0x48]
        0x000000000000ea80: test rdi, rdi
        0x000000000000ea83: je 0xea99
    then
        L := 0xea99 (2)
    else
        0x000000000000ea85: nop dword ptr [rax]
        L := 0xea88 (2)
    fi
fi

0x14a87:
if
    0x0000000000014a87: movsx esi, r12b
    0x0000000000014a8b: mov rdi, r13
    0x0000000000014a8e: mov qword ptr [rsp + 8], rcx
    0x0000000000014a93: call 0x39a0
    0x0000000000014a98: test rax, rax
    0x0000000000014a9b: mov rcx, qword ptr [rsp + 8]
    0x0000000000014aa0: je 0x14b6c
then
    L := 0x14b6c (2)
else
    if
        0x0000000000014aa6: lea eax, [r12 - 0x45]
        0x0000000000014aab: cmp al, 0x2f
        0x0000000000014aad: ja 0x14b00
    then
        L := 0x14b00 (4)
    else
        if
            0x0000000000014aaf: movabs rdx, 0x814400308945
            0x0000000000014ab9: bt rdx, rax
            0x0000000000014abd: jae 0x14b00
        then
            L := 0x14b00 (4)
        else
            if
                0x0000000000014abf: mov esi, 0x30
                0x0000000000014ac4: mov rdi, r13
                0x0000000000014ac7: mov qword ptr [rsp + 8], rcx
                0x0000000000014acc: call 0x39a0
                0x0000000000014ad1: test rax, rax
                0x0000000000014ad4: mov rcx, qword ptr [rsp + 8]
                0x0000000000014ad9: je 0x14b00
            then
                L := 0x14b00 (4)
            else
                if
                    0x0000000000014adb: movzx eax, byte ptr [rcx + 1]
                    0x0000000000014adf: cmp al, 0x44
                    0x0000000000014ae1: je 0x14aef
                then
                    L := 0x14aef (2)
                else
                    if
                        0x0000000000014ae3: cmp al, 0x69
                        0x0000000000014ae5: je 0x14cb8
                    then
                        0x0000000000014cb8: xor edi, edi
                        0x0000000000014cba: cmp byte ptr [rcx + 2], 0x42
                        0x0000000000014cbe: mov esi, 0x400
                        0x0000000000014cc3: sete dil
                        0x0000000000014cc7: lea edi, [rdi + rdi + 1]
                        0x0000000000014ccb: jmp 0x14b0a
                        L := 0x14b0a (3)
                    else
                        if
                            0x0000000000014aeb: cmp al, 0x42
                            0x0000000000014aed: jne 0x14b00
                        then
                            L := 0x14b00 (4)
                        else
                            L := 0x14aef (2)
                        fi
                    fi
                fi
            fi
        fi
    fi
fi

0xea88:
if
    0x000000000000ea88: mov r12, qword ptr [rdi + 8]
    0x000000000000ea8c: call 0x3e70
    0x000000000000ea91: test r12, r12
    0x000000000000ea94: mov rdi, r12
    0x000000000000ea97: jne 0xea88
then
    L := 0xea88 (2)
else
    L := 0xea99 (2)
fi

0xea99:
0x000000000000ea99: mov qword ptr [rbx + 0x48], 0
0x000000000000eaa1: jmp 0xe99f
L := 0xe99f (6)

0x4abb:
if
    0x0000000000004abb: lea rdi, [rip + 0x1347a]
    0x0000000000004ac2: call 0x37a0
    0x0000000000004ac7: mov rdi, rax
    0x0000000000004aca: call 0x15780
    0x0000000000004acf: mov qword ptr [rip + 0x21c7d2], rax
    0x0000000000004ad6: mov eax, dword ptr [rip + 0x21c854]
    0x0000000000004adc: sub eax, 2
    0x0000000000004adf: and eax, 0xfffffffd
    0x0000000000004ae2: je 0x4af1
then
    L := 0x4af1 (4)
else
    if
        0x0000000000004ae4: cmp dword ptr [rip + 0x21c84d], 0
        0x0000000000004aeb: jne 0x4e27
    then
        if
            0x0000000000004e27: cmp byte ptr [rip + 0x21c537], 0
            0x0000000000004e2e: jne 0x4af1
        then
            L := 0x4af1 (4)
        else
            if
                0x0000000000004e34: cmp byte ptr [rip + 0x21c4f1], 0
                0x0000000000004e3b: jne 0x4af1
            then
                L := 0x4af1 (4)
            else
                if
                    0x0000000000004e41: cmp byte ptr [rip + 0x21c4ae], 0
                    0x0000000000004e48: mov byte ptr [rip + 0x21c452], 0
                    0x0000000000004e4f: mov eax, 1
                    0x0000000000004e54: jne 0x4afa
                then
                    L := 0x4afa (5)
                else
                    if
                        0x0000000000004e5a: cmp byte ptr [rip + 0x21c4b1], 0
                        0x0000000000004e61: jne 0x4afa
                    then
                        L := 0x4afa (5)
                    else
                        if
                            0x0000000000004e67: cmp dword ptr [rip + 0x21c4a6], 0
                            0x0000000000004e6e: jne 0x4afa
                        then
                            L := 0x4afa (5)
                        else
                            0x0000000000004e74: movzx eax, byte ptr [rip + 0x21c479]
                            0x0000000000004e7b: jmp 0x4afa
                            L := 0x4afa (5)
                        fi
                    fi
                fi
            fi
        fi
    else
        L := 0x4af1 (4)
    fi
fi

0xaac5:
if
    0x000000000000aac5: mov rdi, qword ptr [r15]
    0x000000000000aac8: mov edx, 4
    0x000000000000aacd: mov rsi, rbx
    0x000000000000aad0: call 0x3a50
    0x000000000000aad5: test eax, eax
    0x000000000000aad7: jne 0xaab8
then
    if
        0x000000000000aab8: mov r15, qword ptr [r15 + 8]
        0x000000000000aabc: test r15, r15
        0x000000000000aabf: je 0xad30
    then
        L := 0xad30 (5)
    else
        L := 0xaac5 (2)
    fi
else
    0x000000000000aad9: nop dword ptr [rax]
    L := 0xaae0 (10)
fi

0xcad1:
if
    0x000000000000cad1: mov r12, qword ptr [rsp + 0x28]
    0x000000000000cad6: mov rdi, qword ptr [rsp + 0x20]
    0x000000000000cadb: add rdx, 1
    0x000000000000cadf: mov rsi, r13
    0x000000000000cae2: add rdi, r12
    0x000000000000cae5: mov r13, r12
    0x000000000000cae8: call 0x3d10
    0x000000000000caed: mov rdx, qword ptr [rsp + 0x20]
    0x000000000000caf2: mov rsi, r14
    0x000000000000caf5: mov rdi, r12
    0x000000000000caf8: call 0x3b80
    0x000000000000cafd: cmp byte ptr [r14], 0x2f
    0x000000000000cb01: mov qword ptr [rsp + 0x20], r12
    0x000000000000cb06: lea rax, [rbp + 1]
    0x000000000000cb0a: je 0xcc04
then
    0x000000000000cc04: mov byte ptr [rbp], 0x2f
    0x000000000000cc08: mov r15, rax
    0x000000000000cc0b: jmp 0xcb19
    L := 0xcb19 (5)
else
    if
        0x000000000000cb10: cmp r15, rax
        0x000000000000cb13: ja 0xcc22
    then
        if
            0x000000000000cc22: lea rax, [r15 - 1]
            0x000000000000cc26: cmp rbp, rax
            0x000000000000cc29: jae 0xcc32
        then
            L := 0xcc32 (2)
        else
            if
                0x000000000000cc2b: cmp byte ptr [r15 - 2], 0x2f
                0x000000000000cc30: jne 0xcc3d
            then
                L := 0xcc3d (2)
            else
                L := 0xcc32 (2)
            fi
        fi
    else
        L := 0xcb19 (5)
    fi
fi

0xaae0:
0x000000000000aae0: call 0x7360
0x000000000000aae5: jmp 0xaa60
L := 0xaa60 (2)

0x14aef:
0x0000000000014aef: mov edi, 2
0x0000000000014af4: mov esi, 0x3e8
0x0000000000014af9: jmp 0x14b0a
L := 0x14b0a (3)

0x4af1:
0x0000000000004af1: mov byte ptr [rip + 0x21c7a9], 1
0x0000000000004af8: xor eax, eax
L := 0x4afa (5)

0xaaf0:
if
    0x000000000000aaf0: cmp byte ptr [rip + 0x215519], 0
    0x000000000000aaf7: jne 0xab21
then
    L := 0xab21 (2)
else
    if
        0x000000000000aaf9: mov rdi, qword ptr [rip + 0x215788]
        0x000000000000ab00: mov rax, qword ptr [rdi + 0x28]
        0x000000000000ab04: cmp rax, qword ptr [rdi + 0x30]
        0x000000000000ab08: jae 0xaefb
    then
        0x000000000000aefb: mov esi, 0xa
        0x000000000000af00: call 0x39d0
        0x000000000000af05: jmp 0xab19
        L := 0xab19 (2)
    else
        0x000000000000ab0e: lea rdx, [rax + 1]
        0x000000000000ab12: mov qword ptr [rdi + 0x28], rdx
        0x000000000000ab16: mov byte ptr [rax], 0xa
        L := 0xab19 (2)
    fi
fi

0x4afa:
if
    0x0000000000004afa: mov byte ptr [rip + 0x21c7a0], al
    0x0000000000004b00: and byte ptr [rip + 0x21c799], 1
    0x0000000000004b07: cmp byte ptr [rip + 0x21c80a], 0
    0x0000000000004b0e: jne 0x4fc4
then
    0x0000000000004fc4: mov r15, qword ptr [rip + 0x21affd]
    0x0000000000004fcb: mov r14, qword ptr [rip + 0x21b016]
    0x0000000000004fd2: lea rdi, [rip + 0x21c1c7]
    0x0000000000004fd9: xor edx, edx
    0x0000000000004fdb: xor esi, esi
    0x0000000000004fdd: mov r8, r15
    0x0000000000004fe0: mov rcx, r14
    0x0000000000004fe3: call 0x154b0
    0x0000000000004fe8: lea rdi, [rip + 0x21c151]
    0x0000000000004fef: mov r8, r15
    0x0000000000004ff2: mov rcx, r14
    0x0000000000004ff5: xor edx, edx
    0x0000000000004ff7: xor esi, esi
    0x0000000000004ff9: call 0x154b0
    0x0000000000004ffe: jmp 0x4b14
    L := 0x4b14 (2)
else
    L := 0x4b14 (2)
fi

0x14b00:
0x0000000000014b00: mov edi, 1
0x0000000000014b05: mov esi, 0x400
L := 0x14b0a (3)

0x14b0a:
if
    0x0000000000014b0a: sub r12d, 0x42
    0x0000000000014b0e: cmp r12b, 0x35
    0x0000000000014b12: ja 0x14b6c
then
    L := 0x14b6c (2)
else
    0x0000000000014b14: lea rdx, [rip + 0x641d]
    0x0000000000014b1b: movzx r12d, r12b
    0x0000000000014b1f: movsxd rax, dword ptr [rdx + r12*4]
    0x0000000000014b23: add rax, rdx
    0x0000000000014b26: jmp rax
    L := 0x0 (130)
fi

0x4b14:
if
    0x0000000000004b14: cmp byte ptr [rip + 0x21c7f6], 0
    0x0000000000004b1b: jne 0x4f48
then
    0x0000000000004f48: lea rdx, [rip + 0x21c091]
    0x0000000000004f4f: xor eax, eax
    0x0000000000004f51: jmp 0x4f88
    L := 0x4f88 (3)
else
    L := 0x4b21 (2)
fi

0xab19:
0x000000000000ab19: add qword ptr [rip + 0x2166d7], 1
L := 0xab21 (2)

0xcb19:
0x000000000000cb19: mov rdi, r14
0x000000000000cb1c: call 0x3e70
0x000000000000cb21: jmp 0xc800
L := 0xc800 (10)

0x4b21:
if
    0x0000000000004b21: mov r14d, ebp
    0x0000000000004b24: mov edi, 0x4e20
    0x0000000000004b29: mov qword ptr [rip + 0x21c884], 0x64
    0x0000000000004b34: sub r14d, r13d
    0x0000000000004b37: lea r15, [rip + 0x1310c]
    0x0000000000004b3e: call 0x14480
    0x0000000000004b43: mov qword ptr [rip + 0x21c862], 0
    0x0000000000004b4e: mov qword ptr [rip + 0x21c86b], rax
    0x0000000000004b55: call 0x60e0
    0x0000000000004b5a: test r14d, r14d
    0x0000000000004b5d: jle 0x4d81
then
    if
        0x0000000000004d81: cmp byte ptr [rip + 0x21c56d], 0
        0x0000000000004d88: je 0x4e92
    then
        0x0000000000004e92: lea rdi, [rip + 0x154a4]
        0x0000000000004e99: mov edx, 1
        0x0000000000004e9e: xor esi, esi
        0x0000000000004ea0: call 0x5f80
        0x0000000000004ea5: jmp 0x4b84
        L := 0x4b84 (3)
    else
        0x0000000000004d8e: lea rdi, [rip + 0x155a8]
        0x0000000000004d95: mov rcx, r15
        0x0000000000004d98: mov edx, 1
        0x0000000000004d9d: mov esi, 3
        0x0000000000004da2: call 0x99e0
        0x0000000000004da7: jmp 0x4b84
        L := 0x4b84 (3)
    fi
else
    0x0000000000004b63: nop dword ptr [rax + rax]
    L := 0x4b68 (2)
fi

0xab21:
if
    0x000000000000ab21: cmp byte ptr [rip + 0x2167f0], 0
    0x000000000000ab28: mov byte ptr [rip + 0x2154e1], 0
    0x000000000000ab2f: jne 0xaeb3
then
    0x000000000000aeb3: mov rcx, qword ptr [rip + 0x2153ce]
    0x000000000000aeba: lea rdi, [rip + 0xcd92]
    0x000000000000aec1: mov edx, 2
    0x000000000000aec6: mov esi, 1
    0x000000000000aecb: call 0x3c80
    0x000000000000aed0: add qword ptr [rip + 0x216320], 2
    0x000000000000aed8: jmp 0xab35
    L := 0xab35 (2)
else
    L := 0xab35 (2)
fi

0xab35:
if
    0x000000000000ab35: xor ebp, ebp
    0x000000000000ab37: cmp byte ptr [rip + 0x2167d3], 0
    0x000000000000ab3e: jne 0xae72
then
    if
        0x000000000000ae72: mov esi, 2
        0x000000000000ae77: mov rdi, r14
        0x000000000000ae7a: call 0xc640
        0x000000000000ae7f: test rax, rax
        0x000000000000ae82: mov rbp, rax
        0x000000000000ae85: jne 0xab44
    then
        L := 0xab44 (3)
    else
        0x000000000000ae8b: lea rsi, [rip + 0xcdd3]
        0x000000000000ae92: xor edi, edi
        0x000000000000ae94: mov edx, 5
        0x000000000000ae99: call 0x3930
        0x000000000000ae9e: movzx edi, byte ptr [rsp + 0xc]
        0x000000000000aea3: mov rdx, r14
        0x000000000000aea6: mov rsi, rax
        0x000000000000aea9: call 0x69a0
        0x000000000000aeae: jmp 0xab44
        L := 0xab44 (3)
    fi
else
    L := 0xab44 (3)
fi

0xab44:
0x000000000000ab44: test rbx, rbx
0x000000000000ab47: mov rsi, qword ptr [rip + 0x21677a]
0x000000000000ab4e: lea r9, [rip + 0x2165eb]
0x000000000000ab55: cmove rbx, r14
0x000000000000ab59: sub rsp, 8
0x000000000000ab5d: mov r8d, 1
0x000000000000ab63: push rbp
0x000000000000ab64: xor ecx, ecx
0x000000000000ab66: mov edx, 0xffffffff
0x000000000000ab6b: mov rdi, rbx
0x000000000000ab6e: call 0x7910
0x000000000000ab73: mov rdi, rbp
0x000000000000ab76: call 0x3e70
0x000000000000ab7b: mov rcx, qword ptr [rip + 0x215706]
0x000000000000ab82: lea rdi, [rip + 0xd336]
0x000000000000ab89: mov esi, 1
0x000000000000ab8e: mov edx, 2
0x000000000000ab93: call 0x3c80
0x000000000000ab98: pop rcx
0x000000000000ab99: add qword ptr [rip + 0x216657], 2
0x000000000000aba1: pop rsi
0x000000000000aba2: jmp 0xaa56
L := 0xaa56 (2)

0xcb60:
0x000000000000cb60: mov edi, 0x1000
0x000000000000cb65: call 0x14480
0x000000000000cb6a: mov rbp, rax
0x000000000000cb6d: lea rbx, [rax + 0x1000]
0x000000000000cb74: lea r15, [rax + 1]
0x000000000000cb78: mov byte ptr [rax], 0x2f
0x000000000000cb7b: jmp 0xc6d1
L := 0xc6d1 (3)

0x4b68:
if
    0x0000000000004b68: mov rdi, qword ptr [rbx + r13*8]
    0x0000000000004b6c: xor esi, esi
    0x0000000000004b6e: mov rcx, r15
    0x0000000000004b71: mov edx, 1
    0x0000000000004b76: add r13, 1
    0x0000000000004b7a: call 0x99e0
    0x0000000000004b7f: cmp ebp, r13d
    0x0000000000004b82: jg 0x4b68
then
    L := 0x4b68 (2)
else
    L := 0x4b84 (3)
fi

0x14b6c:
0x0000000000014b6c: mov qword ptr [r14], rbx
0x0000000000014b6f: or ebp, 2
0x0000000000014b72: jmp 0x14a2d
L := 0x14a2d (4)

0x4b84:
if
    0x0000000000004b84: cmp qword ptr [rip + 0x21c824], 0
    0x0000000000004b8c: jne 0x5003
then
    if
        0x0000000000005003: call 0x62f0
        0x0000000000005008: cmp byte ptr [rip + 0x21c2e6], 0
        0x000000000000500f: je 0x534a
    then
        0x000000000000534a: mov esi, 1
        0x000000000000534f: xor edi, edi
        0x0000000000005351: call 0x6570
        0x0000000000005356: jmp 0x5015
        L := 0x5015 (2)
    else
        L := 0x5015 (2)
    fi
else
    L := 0x4b92 (2)
fi

0x4b92:
if
    0x0000000000004b92: sub r14d, 1
    0x0000000000004b96: mov rbx, qword ptr [rip + 0x21c7e3]
    0x0000000000004b9d: jg 0x4bdc
then
    L := 0x4bdc (5)
else
    0x0000000000004b9f: jmp 0x5223
    if
        0x0000000000005223: test rbx, rbx
        0x0000000000005226: je 0x4c76
    then
        L := 0x4c76 (3)
    else
        if
            0x000000000000522c: cmp qword ptr [rbx + 0x18], 0
            0x0000000000005231: jne 0x4bdc
        then
            L := 0x4bdc (5)
        else
            0x0000000000005237: mov byte ptr [rip + 0x21c07a], 0
            0x000000000000523e: jmp 0x4bdc
            L := 0x4bdc (5)
        fi
    fi
fi

0x4ba8:
0x0000000000004ba8: movzx edx, byte ptr [rbx + 0x10]
0x0000000000004bac: mov rsi, qword ptr [rbx + 8]
0x0000000000004bb0: call 0xa860
0x0000000000004bb5: mov rdi, qword ptr [rbx]
0x0000000000004bb8: call 0x3e70
0x0000000000004bbd: mov rdi, qword ptr [rbx + 8]
0x0000000000004bc1: call 0x3e70
0x0000000000004bc6: mov rdi, rbx
0x0000000000004bc9: call 0x3e70
0x0000000000004bce: mov byte ptr [rip + 0x21c6e3], 1
L := 0x4bd5 (2)

0xcbd0:
0x000000000000cbd0: call 0x37f0
0x000000000000cbd5: xor ebp, ebp
0x000000000000cbd7: mov dword ptr [rax], 0x16
0x000000000000cbdd: jmp 0xc860
L := 0xc860 (6)

0x4bd5:
0x0000000000004bd5: mov rbx, qword ptr [rip + 0x21c7a4]
L := 0x4bdc (5)

0x4bdc:
if
    0x0000000000004bdc: test rbx, rbx
    0x0000000000004bdf: je 0x4c76
then
    L := 0x4c76 (3)
else
    if
        0x0000000000004be5: mov rax, qword ptr [rbx + 0x18]
        0x0000000000004be9: mov rdi, qword ptr [rbx]
        0x0000000000004bec: mov qword ptr [rip + 0x21c78d], rax
        0x0000000000004bf3: mov rax, qword ptr [rip + 0x21c7ce]
        0x0000000000004bfa: test rax, rax
        0x0000000000004bfd: je 0x4ba8
    then
        L := 0x4ba8 (2)
    else
        if
            0x0000000000004bff: test rdi, rdi
            0x0000000000004c02: jne 0x4ba8
        then
            L := 0x4ba8 (2)
        else
            if
                0x0000000000004c04: mov rdx, qword ptr [rip + 0x21c4ed]
                0x0000000000004c0b: mov rcx, rdx
                0x0000000000004c0e: sub rcx, qword ptr [rip + 0x21c4db]
                0x0000000000004c15: cmp rcx, 0xf
                0x0000000000004c19: jbe 0x57e4
            then
                L := 0x57e4 (2)
            else
                if
                    0x0000000000004c1f: lea rcx, [rdx - 0x10]
                    0x0000000000004c23: mov rsi, r12
                    0x0000000000004c26: mov rdi, rax
                    0x0000000000004c29: mov qword ptr [rip + 0x21c4c8], rcx
                    0x0000000000004c30: mov rcx, qword ptr [rdx - 0x10]
                    0x0000000000004c34: mov rdx, qword ptr [rdx - 8]
                    0x0000000000004c38: mov qword ptr [rsp + 0x30], rcx
                    0x0000000000004c3d: mov qword ptr [rsp + 0x38], rdx
                    0x0000000000004c42: call 0xe960
                    0x0000000000004c47: test rax, rax
                    0x0000000000004c4a: je 0x5803
                then
                    L := 0x5803 (2)
                else
                    0x0000000000004c50: mov rdi, rax
                    0x0000000000004c53: call 0x3e70
                    0x0000000000004c58: mov rdi, qword ptr [rbx]
                    0x0000000000004c5b: call 0x3e70
                    0x0000000000004c60: mov rdi, qword ptr [rbx + 8]
                    0x0000000000004c64: call 0x3e70
                    0x0000000000004c69: mov rdi, rbx
                    0x0000000000004c6c: call 0x3e70
                    0x0000000000004c71: jmp 0x4bd5
                    L := 0x4bd5 (2)
                fi
            fi
        fi
    fi
fi

0xabe6:
if
    0x000000000000abe6: mov rdi, r13
    0x000000000000abe9: call 0x3ac0
    0x000000000000abee: test eax, eax
    0x000000000000abf0: jne 0xae20
then
    0x000000000000ae20: lea rsi, [rip + 0xcebc]
    0x000000000000ae27: xor edi, edi
    0x000000000000ae29: mov edx, 5
    0x000000000000ae2e: call 0x3930
    0x000000000000ae33: movzx edi, byte ptr [rsp + 0xc]
    0x000000000000ae38: mov rdx, r14
    0x000000000000ae3b: mov rsi, rax
    0x000000000000ae3e: call 0x69a0
    0x000000000000ae43: jmp 0xabf6
    L := 0xabf6 (2)
else
    L := 0xabf6 (2)
fi

0xabf6:
if
    0x000000000000abf6: call 0x62f0
    0x000000000000abfb: cmp byte ptr [rip + 0x2166f4], 0
    0x000000000000ac02: jne 0xae08
then
    0x000000000000ae08: xor esi, esi
    0x000000000000ae0a: mov rdi, r14
    0x000000000000ae0d: call 0x6570
    0x000000000000ae12: jmp 0xac08
    L := 0xac08 (2)
else
    L := 0xac08 (2)
fi

0xcbfc:
0x000000000000cbfc: mov r12, r14
0x000000000000cbff: jmp 0xc9b0
L := 0xc9b0 (2)

0xac08:
if
    0x000000000000ac08: mov eax, dword ptr [rip + 0x21672a]
    0x000000000000ac0e: test eax, eax
    0x000000000000ac10: je 0xac1f
then
    L := 0xac1f (2)
else
    if
        0x000000000000ac12: cmp byte ptr [rip + 0x216713], 0
        0x000000000000ac19: je 0xacf4
    then
        L := 0xacf4 (2)
    else
        L := 0xac1f (2)
    fi
fi

0xac1f:
if
    0x000000000000ac1f: cmp byte ptr [rip + 0x2166f2], 0
    0x000000000000ac26: jne 0xae48
then
    0x000000000000ae48: mov rcx, qword ptr [rip + 0x215439]
    0x000000000000ae4f: lea rdi, [rip + 0xcdfd]
    0x000000000000ae56: mov edx, 2
    0x000000000000ae5b: mov esi, 1
    0x000000000000ae60: call 0x3c80
    0x000000000000ae65: add qword ptr [rip + 0x21638b], 2
    0x000000000000ae6d: jmp 0xac2c
    L := 0xac2c (2)
else
    L := 0xac2c (2)
fi

0xac2c:
if
    0x000000000000ac2c: lea rsi, [rip + 0xd0c5]
    0x000000000000ac33: mov edx, 5
    0x000000000000ac38: xor edi, edi
    0x000000000000ac3a: call 0x3930
    0x000000000000ac3f: mov rsi, qword ptr [rip + 0x215642]
    0x000000000000ac46: mov rbx, rax
    0x000000000000ac49: mov rdi, rax
    0x000000000000ac4c: call 0x3af0
    0x000000000000ac51: mov rdi, rbx
    0x000000000000ac54: call 0x3950
    0x000000000000ac59: mov rdi, qword ptr [rip + 0x215628]
    0x000000000000ac60: add qword ptr [rip + 0x216591], rax
    0x000000000000ac67: mov rax, qword ptr [rdi + 0x28]
    0x000000000000ac6b: cmp rax, qword ptr [rdi + 0x30]
    0x000000000000ac6f: jae 0xaedd
then
    0x000000000000aedd: mov esi, 0x20
    0x000000000000aee2: call 0x39d0
    0x000000000000aee7: jmp 0xac80
    L := 0xac80 (2)
else
    0x000000000000ac75: lea rdx, [rax + 1]
    0x000000000000ac79: mov qword ptr [rdi + 0x28], rdx
    0x000000000000ac7d: mov byte ptr [rax], 0x20
    L := 0xac80 (2)
fi

0xcc32:
0x000000000000cc32: mov r15, rax
0x000000000000cc35: jmp 0xcb19
L := 0xcb19 (5)

0xcc3d:
if
    0x000000000000cc3d: lea r15, [rax - 1]
    0x000000000000cc41: cmp rbp, r15
    0x000000000000cc44: je 0xcb19
then
    L := 0xcb19 (5)
else
    if
        0x000000000000cc4a: cmp byte ptr [r15 - 1], 0x2f
        0x000000000000cc4f: je 0xcb19
    then
        L := 0xcb19 (5)
    else
        0x000000000000cc55: jmp 0xcc3a
        0x000000000000cc3a: mov rax, r15
        L := 0xcc3d (2)
    fi
fi

0xec40:
if
    0x000000000000ec40: fld dword ptr [rip + 0xb7aa]
    0x000000000000ec46: fld xword ptr [rsp + 8]
    0x000000000000ec4a: fucomi st(1)
    0x000000000000ec4c: jae 0xecc0
then
    0x000000000000ecc0: fnstcw word ptr [rsp - 0xa]
    0x000000000000ecc4: movzx eax, word ptr [rsp - 0xa]
    0x000000000000ecc9: fsubr st(1), st(0)
    0x000000000000eccb: fxch st(1)
    0x000000000000eccd: movabs rdx, 0x8000000000000000
    0x000000000000ecd7: or ah, 0xc
    0x000000000000ecda: mov word ptr [rsp - 0xc], ax
    0x000000000000ecdf: fldcw word ptr [rsp - 0xc]
    0x000000000000ece3: fistp qword ptr [rsp - 0x18]
    0x000000000000ece7: fldcw word ptr [rsp - 0xa]
    0x000000000000eceb: mov rax, qword ptr [rsp - 0x18]
    0x000000000000ecf0: xor rax, rdx
    0x000000000000ecf3: jmp 0xec74
    L := 0xec74 (2)
else
    0x000000000000ec4e: fstp st(1)
    0x000000000000ec50: fnstcw word ptr [rsp - 0xa]
    0x000000000000ec54: movzx eax, word ptr [rsp - 0xa]
    0x000000000000ec59: or ah, 0xc
    0x000000000000ec5c: mov word ptr [rsp - 0xc], ax
    0x000000000000ec61: fld st(0)
    0x000000000000ec63: fldcw word ptr [rsp - 0xc]
    0x000000000000ec67: fistp qword ptr [rsp - 0x18]
    0x000000000000ec6b: fldcw word ptr [rsp - 0xa]
    0x000000000000ec6f: mov rax, qword ptr [rsp - 0x18]
    L := 0xec74 (2)
fi

0x14c6b:
if
    0x0000000000014c6b: sub r8d, 1
    0x0000000000014c6f: jne 0x14c5c
then
    if
        0x0000000000014c5c: mov rax, rbx
        0x0000000000014c5f: mul rsi
        0x0000000000014c62: mov rbx, rax
        0x0000000000014c65: jo 0x14cf4
    then
        L := 0x14cf4 (2)
    else
        L := 0x14c6b (2)
    fi
else
    0x0000000000014c71: jmp 0x14bc5
    0x0000000000014bc5: or ebp, r9d
    0x0000000000014bc8: jmp 0x14b50
    0x0000000000014b50: movsxd rdi, edi
    0x0000000000014b53: mov eax, ebp
    0x0000000000014b55: add rcx, rdi
    0x0000000000014b58: or eax, 2
    0x0000000000014b5b: mov qword ptr [r15], rcx
    0x0000000000014b5e: cmp byte ptr [rcx], 0
    0x0000000000014b61: mov qword ptr [r14], rbx
    0x0000000000014b64: cmovne ebp, eax
    0x0000000000014b67: jmp 0x14a2d
    L := 0x14a2d (4)
fi

0xec74:
if
    0x000000000000ec74: mov qword ptr [rsp - 0x20], rax
    0x000000000000ec79: test rax, rax
    0x000000000000ec7c: fild qword ptr [rsp - 0x20]
    0x000000000000ec80: jns 0xec88
then
    L := 0xec88 (2)
else
    0x000000000000ec82: fadd dword ptr [rip + 0xb764]
    L := 0xec88 (2)
fi

0x4c76:
if
    0x0000000000004c76: cmp byte ptr [rip + 0x21c695], 0
    0x0000000000004c7d: je 0x4c8c
then
    L := 0x4c8c (4)
else
    if
        0x0000000000004c7f: cmp byte ptr [rip + 0x21c68a], 0
        0x0000000000004c86: jne 0x4dac
    then
        if
            0x0000000000004dac: cmp qword ptr [rip + 0x21b2ac], 2
            0x0000000000004db4: jne 0x4dc8
        then
            L := 0x4dc8 (4)
        else
            if
                0x0000000000004db6: mov rax, qword ptr [rip + 0x21b2ab]
                0x0000000000004dbd: cmp word ptr [rax], 0x5b1b
                0x0000000000004dc2: je 0x5555
            then
                if
                    0x0000000000005555: cmp qword ptr [rip + 0x21ab13], 1
                    0x000000000000555d: jne 0x4dc8
                then
                    L := 0x4dc8 (4)
                else
                    if
                        0x0000000000005563: mov rax, qword ptr [rip + 0x21ab0e]
                        0x000000000000556a: cmp byte ptr [rax], 0x6d
                        0x000000000000556d: jne 0x4dc8
                    then
                        L := 0x4dc8 (4)
                    else
                        0x0000000000005573: jmp 0x4de0
                        L := 0x4de0 (2)
                    fi
                fi
            else
                L := 0x4dc8 (4)
            fi
        fi
    else
        L := 0x4c8c (4)
    fi
fi

0xac80:
if
    0x000000000000ac80: mov r8, qword ptr [rip + 0x216699]
    0x000000000000ac87: mov edx, dword ptr [rip + 0x21669b]
    0x000000000000ac8d: lea rsi, [rsp + 0xa0]
    0x000000000000ac95: mov rdi, qword ptr [rsp]
    0x000000000000ac99: mov ecx, 0x200
    0x000000000000ac9e: add qword ptr [rip + 0x216552], 1
    0x000000000000aca6: call 0xed10
    0x000000000000acab: mov rsi, qword ptr [rip + 0x2155d6]
    0x000000000000acb2: mov rbx, rax
    0x000000000000acb5: mov rdi, rax
    0x000000000000acb8: call 0x3af0
    0x000000000000acbd: mov rdi, rbx
    0x000000000000acc0: call 0x3950
    0x000000000000acc5: mov rdi, qword ptr [rip + 0x2155bc]
    0x000000000000accc: add qword ptr [rip + 0x216525], rax
    0x000000000000acd3: mov rax, qword ptr [rdi + 0x28]
    0x000000000000acd7: cmp rax, qword ptr [rdi + 0x30]
    0x000000000000acdb: jae 0xaeec
then
    0x000000000000aeec: mov esi, 0xa
    0x000000000000aef1: call 0x39d0
    0x000000000000aef6: jmp 0xacec
    L := 0xacec (2)
else
    0x000000000000ace1: lea rdx, [rax + 1]
    0x000000000000ace5: mov qword ptr [rdi + 0x28], rdx
    0x000000000000ace9: mov byte ptr [rax], 0xa
    L := 0xacec (2)
fi

0xec88:
if
    0x000000000000ec88: test edi, edi
    0x000000000000ec8a: jne 0xecb8
then
    0x000000000000ecb8: fstp st(1)
    L := 0xecba (3)
else
    if
        0x000000000000ec8c: fxch st(1)
        0x000000000000ec8e: fucomip st(1)
        0x000000000000ec90: jp 0xec98
    then
        0x000000000000ec98: fstp st(0)
        0x000000000000ec9a: nop word ptr [rax + rax]
        L := 0xeca0 (2)
    else
        if
            0x000000000000ec92: je 0xecba
        then
            L := 0xecba (3)
        else
            0x000000000000ec94: fstp st(0)
            0x000000000000ec96: jmp 0xeca0
            L := 0xeca0 (2)
        fi
    fi
fi

0x4c8c:
if
    0x0000000000004c8c: cmp byte ptr [rip + 0x21c685], 0
    0x0000000000004c93: jne 0x506a
then
    0x000000000000506a: lea rsi, [rip + 0x21c12f]
    0x0000000000005071: lea rdi, [rip + 0x12ecd]
    0x0000000000005078: call 0x67b0
    0x000000000000507d: lea rsi, [rip + 0x21c0bc]
    0x0000000000005084: lea rdi, [rip + 0x12ec4]
    0x000000000000508b: call 0x67b0
    0x0000000000005090: mov rdi, qword ptr [rip + 0x21c239]
    0x0000000000005097: call 0x13590
    0x000000000000509c: lea rdx, [rip + 0x21a93d]
    0x00000000000050a3: mov eax, eax
    0x00000000000050a5: lea rsi, [rip + 0x1513c]
    0x00000000000050ac: mov edi, 1
    0x00000000000050b1: mov rdx, qword ptr [rdx + rax*8]
    0x00000000000050b5: xor eax, eax
    0x00000000000050b7: call 0x3cd0
    0x00000000000050bc: jmp 0x4c99
    L := 0x4c99 (2)
else
    L := 0x4c99 (2)
fi

0x4c99:
if
    0x0000000000004c99: mov rbx, qword ptr [rip + 0x21c728]
    0x0000000000004ca0: test rbx, rbx
    0x0000000000004ca3: je 0x4cbe
then
    L := 0x4cbe (2)
else
    if
        0x0000000000004ca5: mov rdi, rbx
        0x0000000000004ca8: call 0xdc80
        0x0000000000004cad: test rax, rax
        0x0000000000004cb0: jne 0x5822
    then
        L := 0x5822 (2)
    else
        0x0000000000004cb6: mov rdi, rbx
        0x0000000000004cb9: call 0xe350
        L := 0x4cbe (2)
    fi
fi

0xeca0:
if
    0x000000000000eca0: add rax, 1
    0x000000000000eca4: mov qword ptr [rsp - 0x20], rax
    0x000000000000eca9: test rax, rax
    0x000000000000ecac: fild qword ptr [rsp - 0x20]
    0x000000000000ecb0: js 0xed00
then
    0x000000000000ed00: fadd dword ptr [rip + 0xb6e6]
    0x000000000000ed06: ret 
    L := 0x0 (130)
else
    0x000000000000ecb2: jmp 0xecba
    L := 0xecba (3)
fi

0xecba:
0x000000000000ecba: ret 
L := 0x0 (130)

0x4cbe:
if
    0x0000000000004cbe: mov rsi, qword ptr [rsp + 0x48]
    0x0000000000004cc3: xor rsi, qword ptr fs:[0x28]
    0x0000000000004ccc: mov eax, dword ptr [rip + 0x21c53e]
    0x0000000000004cd2: jne 0x5841
then
    L := 0x5841 (2)
else
    0x0000000000004cd8: add rsp, 0x58
    0x0000000000004cdc: pop rbx
    0x0000000000004cdd: pop rbp
    0x0000000000004cde: pop r12
    0x0000000000004ce0: pop r13
    0x0000000000004ce2: pop r14
    0x0000000000004ce4: pop r15
    0x0000000000004ce6: ret 
    L := 0x0 (130)
fi

0x14cd5:
0x0000000000014cd5: lea rcx, [rip + 0x6334]
0x0000000000014cdc: lea rsi, [rip + 0x621d]
0x0000000000014ce3: lea rdi, [rip + 0x6226]
0x0000000000014cea: mov edx, 0x60
0x0000000000014cef: call 0x3a30
L := 0x14cf4 (2)

0xacec:
0x000000000000acec: add qword ptr [rip + 0x216504], 1
L := 0xacf4 (2)

0x14cf4:
0x0000000000014cf4: mov r9d, 1
0x0000000000014cfa: or rbx, 0xffffffffffffffff
0x0000000000014cfe: jmp 0x14c6b
L := 0x14c6b (2)

0xacf4:
if
    0x000000000000acf4: cmp qword ptr [rip + 0x2166b4], 0
    0x000000000000acfc: je 0xa911
then
    L := 0xa911 (5)
else
    0x000000000000ad02: call 0x9420
    0x000000000000ad07: jmp 0xa911
    L := 0xa911 (5)
fi

0xed10:
if
    0x000000000000ed10: push r15
    0x000000000000ed12: push r14
    0x000000000000ed14: mov eax, edx
    0x000000000000ed16: push r13
    0x000000000000ed18: push r12
    0x000000000000ed1a: mov r15d, edx
    0x000000000000ed1d: push rbp
    0x000000000000ed1e: push rbx
    0x000000000000ed1f: and eax, 0x20
    0x000000000000ed22: and r15d, 3
    0x000000000000ed26: mov r12d, edx
    0x000000000000ed29: mov rbx, rdi
    0x000000000000ed2c: sub rsp, 0x98
    0x000000000000ed33: mov qword ptr [rsp + 0x18], rcx
    0x000000000000ed38: mov dword ptr [rsp + 0x30], eax
    0x000000000000ed3c: mov rcx, qword ptr fs:[0x28]
    0x000000000000ed45: mov qword ptr [rsp + 0x88], rcx
    0x000000000000ed4d: xor ecx, ecx
    0x000000000000ed4f: cmp eax, 1
    0x000000000000ed52: mov qword ptr [rsp], rsi
    0x000000000000ed56: mov qword ptr [rsp + 0x10], r8
    0x000000000000ed5b: sbb eax, eax
    0x000000000000ed5d: and eax, 0xffffffe8
    0x000000000000ed60: add eax, 0x400
    0x000000000000ed65: mov dword ptr [rsp + 0x34], eax
    0x000000000000ed69: call 0x3890
    0x000000000000ed6e: mov r14, qword ptr [rax]
    0x000000000000ed71: mov r13, rax
    0x000000000000ed74: mov rdi, r14
    0x000000000000ed77: call 0x3950
    0x000000000000ed7c: mov rcx, qword ptr [r13 + 0x10]
    0x000000000000ed80: mov r13, qword ptr [r13 + 8]
    0x000000000000ed84: mov rbp, rax
    0x000000000000ed87: sub rax, 1
    0x000000000000ed8b: mov edx, 1
    0x000000000000ed90: cmp rax, 0x10
    0x000000000000ed94: lea rax, [rip + 0xb5a2]
    0x000000000000ed9b: mov rdi, r13
    0x000000000000ed9e: cmovae rbp, rdx
    0x000000000000eda2: mov qword ptr [rsp + 0x38], rcx
    0x000000000000eda7: cmovae r14, rax
    0x000000000000edab: call 0x3950
    0x000000000000edb0: cmp rax, 0x11
    0x000000000000edb4: lea rax, [rip + 0x8e8f]
    0x000000000000edbb: mov rdi, qword ptr [rsp + 0x10]
    0x000000000000edc0: mov rcx, qword ptr [rsp + 0x18]
    0x000000000000edc5: cmovae r13, rax
    0x000000000000edc9: mov rax, qword ptr [rsp]
    0x000000000000edcd: add rax, 0x287
    0x000000000000edd3: cmp rdi, rcx
    0x000000000000edd6: mov qword ptr [rsp + 8], rax
    0x000000000000eddb: ja 0xef28
then
    if
        0x000000000000ef28: test rcx, rcx
        0x000000000000ef2b: je 0xedf5
    then
        L := 0xedf5 (4)
    else
        if
            0x000000000000ef31: mov rax, qword ptr [rsp + 0x10]
            0x000000000000ef36: xor edx, edx
            0x000000000000ef38: div rcx
            0x000000000000ef3b: test rdx, rdx
            0x000000000000ef3e: mov r8, rax
            0x000000000000ef41: jne 0xedf5
        then
            L := 0xedf5 (4)
        else
            if
                0x000000000000ef47: mov rax, rbx
                0x000000000000ef4a: xor edx, edx
                0x000000000000ef4c: div r8
                0x000000000000ef4f: mov rbx, rax
                0x000000000000ef52: lea rax, [rdx + rdx*4]
                0x000000000000ef56: xor edx, edx
                0x000000000000ef58: mov rsi, rbx
                0x000000000000ef5b: add rax, rax
                0x000000000000ef5e: div r8
                0x000000000000ef61: add rdx, rdx
                0x000000000000ef64: mov r9d, eax
                0x000000000000ef67: cmp r8, rdx
                0x000000000000ef6a: jbe 0xf4f8
            then
                0x000000000000f4f8: setb dil
                0x000000000000f4fc: movzx edi, dil
                0x000000000000f500: add edi, 2
                0x000000000000f503: jmp 0xef79
                L := 0xef79 (3)
            else
                0x000000000000ef70: xor edi, edi
                0x000000000000ef72: test rdx, rdx
                0x000000000000ef75: setne dil
                L := 0xef79 (3)
            fi
        fi
    fi
else
    if
        0x000000000000ede1: xor edx, edx
        0x000000000000ede3: mov rax, rcx
        0x000000000000ede6: div rdi
        0x000000000000ede9: test rdx, rdx
        0x000000000000edec: mov rdi, rax
        0x000000000000edef: je 0xf150
    then
        if
            0x000000000000f150: mov rsi, rbx
            0x000000000000f153: xor edx, edx
            0x000000000000f155: imul rsi, rax
            0x000000000000f159: mov rax, rsi
            0x000000000000f15c: div rdi
            0x000000000000f15f: cmp rax, rbx
            0x000000000000f162: jne 0xedf5
        then
            L := 0xedf5 (4)
        else
            0x000000000000f168: xor edi, edi
            0x000000000000f16a: xor r9d, r9d
            0x000000000000f16d: jmp 0xef79
            L := 0xef79 (3)
        fi
    else
        L := 0xedf5 (4)
    fi
fi

0xad30:
if
    0x000000000000ad30: mov r15, qword ptr [rip + 0x2165b1]
    0x000000000000ad37: test r15, r15
    0x000000000000ad3a: jne 0xad49
then
    L := 0xad49 (2)
else
    0x000000000000ad3c: jmp 0xad68
    L := 0xad68 (2)
fi

0x4d36:
0x0000000000004d36: xor eax, eax
0x0000000000004d38: jmp 0x4934
L := 0x4934 (3)

0xad49:
if
    0x000000000000ad49: mov rdi, qword ptr [r15]
    0x000000000000ad4c: mov edx, 4
    0x000000000000ad51: mov rsi, rbx
    0x000000000000ad54: call 0x3a50
    0x000000000000ad59: test eax, eax
    0x000000000000ad5b: jne 0xad40
then
    if
        0x000000000000ad40: mov r15, qword ptr [r15 + 8]
        0x000000000000ad44: test r15, r15
        0x000000000000ad47: je 0xad68
    then
        L := 0xad68 (2)
    else
        L := 0xad49 (2)
    fi
else
    0x000000000000ad5d: jmp 0xaae0
    L := 0xaae0 (10)
fi

0xcd50:
if
    0x000000000000cd50: push rbp
    0x000000000000cd51: push rbx
    0x000000000000cd52: xor ebp, ebp
    0x000000000000cd54: mov rbx, rdi
    0x000000000000cd57: sub rsp, 8
    0x000000000000cd5b: cmp byte ptr [rdi], 0x2f
    0x000000000000cd5e: sete bpl
    0x000000000000cd62: call 0xce10
    0x000000000000cd67: mov rcx, rax
    0x000000000000cd6a: sub rcx, rbx
    0x000000000000cd6d: cmp rcx, rbp
    0x000000000000cd70: jbe 0xcda0
then
    L := 0xcda0 (2)
else
    if
        0x000000000000cd72: cmp byte ptr [rax - 1], 0x2f
        0x000000000000cd76: lea rdx, [rcx - 1]
        0x000000000000cd7a: je 0xcd8e
    then
        L := 0xcd8e (2)
    else
        0x000000000000cd7c: jmp 0xcda0
        L := 0xcda0 (2)
    fi
fi

0xad68:
if
    0x000000000000ad68: movzx eax, byte ptr [rbp + 0x12]
    0x000000000000ad6c: xor esi, esi
    0x000000000000ad6e: sub eax, 1
    0x000000000000ad71: cmp al, 0xd
    0x000000000000ad73: ja 0xad82
then
    L := 0xad82 (2)
else
    0x000000000000ad75: lea rcx, [rip + 0xbc84]
    0x000000000000ad7c: movzx eax, al
    0x000000000000ad7f: mov esi, dword ptr [rcx + rax*4]
    L := 0xad82 (2)
fi

0x14d70:
if
    0x0000000000014d70: push r13
    0x0000000000014d72: push r12
    0x0000000000014d74: mov r10d, esi
    0x0000000000014d77: push rbp
    0x0000000000014d78: push rbx
    0x0000000000014d79: mov r12, r8
    0x0000000000014d7c: sub rsp, 0x18
    0x0000000000014d80: mov rax, qword ptr fs:[0x28]
    0x0000000000014d89: mov qword ptr [rsp + 8], rax
    0x0000000000014d8e: xor eax, eax
    0x0000000000014d90: cmp edi, 3
    0x0000000000014d93: mov ebp, dword ptr [rip + 0x20b45f]
    0x0000000000014d99: ja 0x14df4
then
    if
        0x0000000000014df4: cmp edi, 4
        0x0000000000014df7: lea rsi, [rip + 0x621b]
        0x0000000000014dfe: je 0x14dac
    then
        L := 0x14dac (3)
    else
        0x0000000000014e00: jmp 0x14de6
        L := 0x14de6 (3)
    fi
else
    if
        0x0000000000014d9b: cmp edi, 2
        0x0000000000014d9e: jae 0x14deb
    then
        L := 0x14deb (2)
    else
        if
            0x0000000000014da0: sub edi, 1
            0x0000000000014da3: lea rsi, [rip + 0x628a]
            0x0000000000014daa: jne 0x14de6
        then
            L := 0x14de6 (3)
        else
            L := 0x14dac (3)
        fi
    fi
fi

0xad82:
if
    0x000000000000ad82: xor edx, edx
    0x000000000000ad84: mov rcx, r14
    0x000000000000ad87: mov rdi, rbx
    0x000000000000ad8a: call 0x99e0
    0x000000000000ad8f: add qword ptr [rsp], rax
    0x000000000000ad93: cmp dword ptr [rip + 0x21659e], 1
    0x000000000000ad9a: jne 0xaae0
then
    L := 0xaae0 (10)
else
    if
        0x000000000000ada0: cmp dword ptr [rip + 0x216589], -1
        0x000000000000ada7: jne 0xaae0
    then
        L := 0xaae0 (10)
    else
        if
            0x000000000000adad: cmp byte ptr [rip + 0x216578], 0
            0x000000000000adb4: jne 0xaae0
        then
            L := 0xaae0 (10)
        else
            if
                0x000000000000adba: cmp byte ptr [rip + 0x216535], 0
                0x000000000000adc1: jne 0xaae0
            then
                L := 0xaae0 (10)
            else
                0x000000000000adc7: call 0x62f0
                0x000000000000adcc: call 0x9420
                0x000000000000add1: call 0x60e0
                0x000000000000add6: jmp 0xaae0
                L := 0xaae0 (10)
            fi
        fi
    fi
fi

0xcd8e:
if
    0x000000000000cd8e: cmp rbp, rdx
    0x000000000000cd91: jne 0xcd80
then
    if
        0x000000000000cd80: cmp byte ptr [rbx + rdx - 1], 0x2f
        0x000000000000cd85: lea rax, [rdx - 1]
        0x000000000000cd89: jne 0xcd93
    then
        L := 0xcd93 (2)
    else
        0x000000000000cd8b: mov rdx, rax
        L := 0xcd8e (2)
    fi
else
    L := 0xcd93 (2)
fi

0xcd93:
0x000000000000cd93: add rsp, 8
0x000000000000cd97: mov rax, rdx
0x000000000000cd9a: pop rbx
0x000000000000cd9b: pop rbp
0x000000000000cd9c: ret 
L := 0x0 (130)

0xcda0:
0x000000000000cda0: add rsp, 8
0x000000000000cda4: mov rdx, rcx
0x000000000000cda7: mov rax, rdx
0x000000000000cdaa: pop rbx
0x000000000000cdab: pop rbp
0x000000000000cdac: ret 
L := 0x0 (130)

0x14dac:
if
    0x0000000000014dac: test r10d, r10d
    0x0000000000014daf: movsxd rax, r10d
    0x0000000000014db2: js 0x14e02
then
    0x0000000000014e02: lea rbx, [rip + 0x6248]
    0x0000000000014e09: mov byte ptr [rsp + 6], dl
    0x0000000000014e0d: mov byte ptr [rsp + 7], 0
    0x0000000000014e12: lea r13, [rsp + 6]
    0x0000000000014e17: sub rbx, rax
    0x0000000000014e1a: jmp 0x14dc3
    L := 0x14dc3 (2)
else
    0x0000000000014db4: shl rax, 5
    0x0000000000014db8: lea rbx, [rip + 0x6292]
    0x0000000000014dbf: mov r13, qword ptr [rcx + rax]
    L := 0x14dc3 (2)
fi

0x14dc3:
0x0000000000014dc3: mov edx, 5
0x0000000000014dc8: xor edi, edi
0x0000000000014dca: call 0x3930
0x0000000000014dcf: mov r9, r12
0x0000000000014dd2: mov rdx, rax
0x0000000000014dd5: mov r8, r13
0x0000000000014dd8: mov rcx, rbx
0x0000000000014ddb: xor esi, esi
0x0000000000014ddd: mov edi, ebp
0x0000000000014ddf: xor eax, eax
0x0000000000014de1: call 0x3d20
L := 0x14de6 (3)

0x4dc8:
0x0000000000004dc8: lea rdi, [rip + 0x21b291]
0x0000000000004dcf: call 0x72f0
0x0000000000004dd4: lea rdi, [rip + 0x21b295]
0x0000000000004ddb: call 0x72f0
L := 0x4de0 (2)

0x4de0:
if
    0x0000000000004de0: mov rdi, qword ptr [rip + 0x21b4a1]
    0x0000000000004de7: call 0x3e00
    0x0000000000004dec: xor edi, edi
    0x0000000000004dee: call 0x70d0
    0x0000000000004df3: mov ebx, dword ptr [rip + 0x21c41b]
    0x0000000000004df9: test ebx, ebx
    0x0000000000004dfb: je 0x4e0f
then
    L := 0x4e0f (2)
else
    0x0000000000004dfd: nop dword ptr [rax]
    L := 0x4e00 (2)
fi

0x14de6:
0x0000000000014de6: call 0x37e0
L := 0x14deb (2)

0x14deb:
0x0000000000014deb: lea rsi, [rip + 0x6266]
0x0000000000014df2: jmp 0x14dac
L := 0x14dac (3)

0xedf5:
if
    0x000000000000edf5: mov qword ptr [rsp + 0x18], rcx
    0x000000000000edfa: test rcx, rcx
    0x000000000000edfd: fild qword ptr [rsp + 0x18]
    0x000000000000ee01: jns 0xee09
then
    L := 0xee09 (2)
else
    0x000000000000ee03: fadd dword ptr [rip + 0xb5e3]
    L := 0xee09 (2)
fi

0x4e00:
if
    0x0000000000004e00: mov edi, 0x13
    0x0000000000004e05: call 0x37d0
    0x0000000000004e0a: sub ebx, 1
    0x0000000000004e0d: jne 0x4e00
then
    L := 0x4e00 (2)
else
    L := 0x4e0f (2)
fi

0xee09:
if
    0x000000000000ee09: mov rax, qword ptr [rsp + 0x10]
    0x000000000000ee0e: mov qword ptr [rsp + 0x18], rax
    0x000000000000ee13: test rax, rax
    0x000000000000ee16: fild qword ptr [rsp + 0x18]
    0x000000000000ee1a: jns 0xee22
then
    L := 0xee22 (2)
else
    0x000000000000ee1c: fadd dword ptr [rip + 0xb5ca]
    L := 0xee22 (2)
fi

0x4e0f:
if
    0x0000000000004e0f: mov edi, dword ptr [rip + 0x21c403]
    0x0000000000004e15: test edi, edi
    0x0000000000004e17: je 0x4c8c
then
    L := 0x4c8c (4)
else
    0x0000000000004e1d: call 0x37d0
    0x0000000000004e22: jmp 0x4c8c
    L := 0x4c8c (4)
fi

0xce10:
if
    0x000000000000ce10: movzx edx, byte ptr [rdi]
    0x000000000000ce13: mov rax, rdi
    0x000000000000ce16: cmp dl, 0x2f
    0x000000000000ce19: jne 0xce2c
then
    L := 0xce2c (2)
else
    0x000000000000ce1b: nop dword ptr [rax + rax]
    L := 0xce20 (2)
fi

0x14e20:
if
    0x0000000000014e20: push r15
    0x0000000000014e22: push r14
    0x0000000000014e24: push r13
    0x0000000000014e26: push r12
    0x0000000000014e28: push rbp
    0x0000000000014e29: push rbx
    0x0000000000014e2a: sub rsp, 0x28
    0x0000000000014e2e: mov rax, qword ptr fs:[0x28]
    0x0000000000014e37: mov qword ptr [rsp + 0x18], rax
    0x0000000000014e3c: xor eax, eax
    0x0000000000014e3e: cmp edx, 0x24
    0x0000000000014e41: ja 0x151a5
then
    L := 0x151a5 (2)
else
    0x0000000000014e47: lea rax, [rsp + 0x10]
    0x0000000000014e4c: mov r15, rsi
    0x0000000000014e4f: test rsi, rsi
    0x0000000000014e52: mov rbp, rdi
    0x0000000000014e55: mov dword ptr [rsp + 8], edx
    0x0000000000014e59: mov r14, rcx
    0x0000000000014e5c: mov r13, r8
    0x0000000000014e5f: cmove r15, rax
    0x0000000000014e63: call 0x37f0
    0x0000000000014e68: mov dword ptr [rax], 0
    0x0000000000014e6e: mov r12, rax
    0x0000000000014e71: movzx ebx, byte ptr [rbp]
    0x0000000000014e75: call 0x3e50
    0x0000000000014e7a: mov edx, dword ptr [rsp + 8]
    0x0000000000014e7e: mov rsi, qword ptr [rax]
    0x0000000000014e81: mov rax, rbp
    0x0000000000014e84: jmp 0x14e97
    L := 0x14e97 (2)
fi

0xee22:
if
    0x000000000000ee22: fdivp st(1)
    0x000000000000ee24: mov qword ptr [rsp + 0x18], rbx
    0x000000000000ee29: test rbx, rbx
    0x000000000000ee2c: fild qword ptr [rsp + 0x18]
    0x000000000000ee30: jns 0xee38
then
    L := 0xee38 (2)
else
    0x000000000000ee32: fadd dword ptr [rip + 0xb5b4]
    L := 0xee38 (2)
fi

0xce20:
if
    0x000000000000ce20: add rax, 1
    0x000000000000ce24: movzx edx, byte ptr [rax]
    0x000000000000ce27: cmp dl, 0x2f
    0x000000000000ce2a: je 0xce20
then
    L := 0xce20 (2)
else
    L := 0xce2c (2)
fi

0xce2c:
if
    0x000000000000ce2c: test dl, dl
    0x000000000000ce2e: je 0xce6a
then
    L := 0xce6a (3)
else
    0x000000000000ce30: mov rcx, rax
    0x000000000000ce33: xor esi, esi
    0x000000000000ce35: jmp 0xce55
    L := 0xce55 (3)
fi

0xee38:
if
    0x000000000000ee38: test r12b, 0x10
    0x000000000000ee3c: fmulp st(1)
    0x000000000000ee3e: je 0xf008
then
    if
        0x000000000000f008: cmp r15d, 1
        0x000000000000f00c: je 0xf01c
    then
        L := 0xf01c (3)
    else
        if
            0x000000000000f00e: fld xword ptr [rip + 0xb43c]
            0x000000000000f014: fucomip st(1)
            0x000000000000f016: ja 0xf2a0
        then
            0x000000000000f2a0: sub rsp, 0x10
            0x000000000000f2a4: mov edi, r15d
            0x000000000000f2a7: fstp xword ptr [rsp]
            0x000000000000f2aa: call 0xec40
            0x000000000000f2af: pop r8
            0x000000000000f2b1: pop r9
            0x000000000000f2b3: jmp 0xf01c
            L := 0xf01c (3)
        else
            L := 0xf01c (3)
        fi
    fi
else
    0x000000000000ee44: fild dword ptr [rsp + 0x34]
    0x000000000000ee48: xor ebx, ebx
    0x000000000000ee4a: fld st(0)
    0x000000000000ee4c: jmp 0xee54
    L := 0xee54 (2)
fi

0xce4a:
if
    0x000000000000ce4a: add rcx, 1
    0x000000000000ce4e: movzx edx, byte ptr [rcx]
    0x000000000000ce51: test dl, dl
    0x000000000000ce53: je 0xce6a
then
    L := 0xce6a (3)
else
    L := 0xce55 (3)
fi

0xee54:
if
    0x000000000000ee54: fld st(0)
    0x000000000000ee56: add ebx, 1
    0x000000000000ee59: fmul st(2)
    0x000000000000ee5b: fxch st(3)
    0x000000000000ee5d: fucomi st(3)
    0x000000000000ee5f: jb 0xee70
then
    0x000000000000ee70: fstp st(2)
    0x000000000000ee72: fstp st(2)
    L := 0xee74 (2)
else
    if
        0x000000000000ee61: cmp ebx, 8
        0x000000000000ee64: jne 0xee50
    then
        0x000000000000ee50: fstp st(1)
        0x000000000000ee52: fxch st(2)
        L := 0xee54 (2)
    else
        0x000000000000ee66: fstp st(2)
        0x000000000000ee68: fstp st(2)
        0x000000000000ee6a: jmp 0xee74
        L := 0xee74 (2)
    fi
fi

0xce55:
if
    0x000000000000ce55: cmp dl, 0x2f
    0x000000000000ce58: jne 0xce40
then
    if
        0x000000000000ce40: test sil, sil
        0x000000000000ce43: je 0xce4a
    then
        L := 0xce4a (2)
    else
        0x000000000000ce45: mov rax, rcx
        0x000000000000ce48: xor esi, esi
        L := 0xce4a (2)
    fi
else
    if
        0x000000000000ce5a: add rcx, 1
        0x000000000000ce5e: movzx edx, byte ptr [rcx]
        0x000000000000ce61: mov esi, 1
        0x000000000000ce66: test dl, dl
        0x000000000000ce68: jne 0xce55
    then
        L := 0xce55 (3)
    else
        L := 0xce6a (3)
    fi
fi

0xce6a:
0x000000000000ce6a: ret 
L := 0x0 (130)

0xce70:
if
    0x000000000000ce70: push rbx
    0x000000000000ce71: mov rbx, rdi
    0x000000000000ce74: call 0x3950
    0x000000000000ce79: cmp rax, 1
    0x000000000000ce7d: jbe 0xce8a
then
    L := 0xce8a (2)
else
    if
        0x000000000000ce7f: cmp byte ptr [rbx + rax - 1], 0x2f
        0x000000000000ce84: lea rdx, [rax - 1]
        0x000000000000ce88: je 0xce98
    then
        L := 0xce98 (2)
    else
        L := 0xce8a (2)
    fi
fi

0xee74:
if
    0x000000000000ee74: mov ecx, dword ptr [rsp + 0x30]
    0x000000000000ee78: add rbp, 1
    0x000000000000ee7c: xor eax, eax
    0x000000000000ee7e: fdivrp st(1)
    0x000000000000ee80: test ecx, ecx
    0x000000000000ee82: sete al
    0x000000000000ee85: cmp r15d, 1
    0x000000000000ee89: lea rax, [rbp + rax + 1]
    0x000000000000ee8e: mov qword ptr [rsp + 0x18], rax
    0x000000000000ee93: je 0xf400
then
    if
        0x000000000000f400: sub rsp, 0x10
        0x000000000000f404: lea rcx, [rip + 0xaffb]
        0x000000000000f40b: mov rdx, -1
        0x000000000000f412: fld st(0)
        0x000000000000f414: fstp xword ptr [rsp]
        0x000000000000f417: mov r14, qword ptr [rsp + 0x10]
        0x000000000000f41c: mov esi, 1
        0x000000000000f421: xor eax, eax
        0x000000000000f423: mov rdi, r14
        0x000000000000f426: fstp xword ptr [rsp + 0x30]
        0x000000000000f42a: call 0x3e60
        0x000000000000f42f: mov rdi, r14
        0x000000000000f432: call 0x3950
        0x000000000000f437: mov r14, rax
        0x000000000000f43a: pop rax
        0x000000000000f43b: pop rdx
        0x000000000000f43c: cmp r14, qword ptr [rsp + 0x18]
        0x000000000000f441: fld xword ptr [rsp + 0x20]
        0x000000000000f445: jbe 0xeef2
    then
        L := 0xeef2 (2)
    else
        0x000000000000f44b: fld dword ptr [rip + 0xaffb]
        0x000000000000f451: fmul st(1), st(0)
        L := 0xf453 (4)
    fi
else
    if
        0x000000000000ee99: fld xword ptr [rip + 0xb5b1]
        0x000000000000ee9f: fucomip st(1)
        0x000000000000eea1: ja 0xf278
    then
        0x000000000000f278: sub rsp, 0x10
        0x000000000000f27c: mov edi, r15d
        0x000000000000f27f: fld st(0)
        0x000000000000f281: fstp xword ptr [rsp]
        0x000000000000f284: fstp xword ptr [rsp + 0x30]
        0x000000000000f288: call 0xec40
        0x000000000000f28d: pop rax
        0x000000000000f28e: pop rdx
        0x000000000000f28f: fld xword ptr [rsp + 0x20]
        0x000000000000f293: jmp 0xeea9
        L := 0xeea9 (2)
    else
        0x000000000000eea7: fld st(0)
        L := 0xeea9 (2)
    fi
fi

0xce8a:
0x000000000000ce8a: pop rbx
0x000000000000ce8b: ret 
L := 0x0 (130)

0x14e97:
if
    0x0000000000014e97: movzx ecx, bl
    0x0000000000014e9a: test byte ptr [rsi + rcx*2 + 1], 0x20
    0x0000000000014e9f: jne 0x14e90
then
    0x0000000000014e90: add rax, 1
    0x0000000000014e94: movzx ebx, byte ptr [rax]
    L := 0x14e97 (2)
else
    if
        0x0000000000014ea1: cmp bl, 0x2d
        0x0000000000014ea4: je 0x14ef8
    then
        L := 0x14ef8 (5)
    else
        if
            0x0000000000014ea6: xor ecx, ecx
            0x0000000000014ea8: mov rsi, r15
            0x0000000000014eab: mov rdi, rbp
            0x0000000000014eae: call 0x3a40
            0x0000000000014eb3: mov rcx, qword ptr [r15]
            0x0000000000014eb6: mov rbx, rax
            0x0000000000014eb9: cmp rcx, rbp
            0x0000000000014ebc: je 0x14ee8
        then
            if
                0x0000000000014ee8: test r13, r13
                0x0000000000014eeb: mov qword ptr [rsp + 8], rcx
                0x0000000000014ef0: jne 0x14f30
            then
                if
                    0x0000000000014f30: movzx r12d, byte ptr [rbp]
                    0x0000000000014f35: test r12b, r12b
                    0x0000000000014f38: je 0x14ef8
                then
                    L := 0x14ef8 (5)
                else
                    if
                        0x0000000000014f3a: movsx esi, r12b
                        0x0000000000014f3e: mov rdi, r13
                        0x0000000000014f41: xor ebp, ebp
                        0x0000000000014f43: call 0x39a0
                        0x0000000000014f48: test rax, rax
                        0x0000000000014f4b: mov ebx, 1
                        0x0000000000014f50: mov rcx, qword ptr [rsp + 8]
                        0x0000000000014f55: je 0x14ef8
                    then
                        L := 0x14ef8 (5)
                    else
                        L := 0x14f57 (2)
                    fi
                fi
            else
                0x0000000000014ef2: nop word ptr [rax + rax]
                L := 0x14ef8 (5)
            fi
        else
            if
                0x0000000000014ebe: mov eax, dword ptr [r12]
                0x0000000000014ec2: test eax, eax
                0x0000000000014ec4: je 0x14f28
            then
                0x0000000000014f28: xor ebp, ebp
                0x0000000000014f2a: jmp 0x14ed0
                L := 0x14ed0 (2)
            else
                if
                    0x0000000000014ec6: cmp eax, 0x22
                    0x0000000000014ec9: mov ebp, 1
                    0x0000000000014ece: jne 0x14ef8
                then
                    L := 0x14ef8 (5)
                else
                    L := 0x14ed0 (2)
                fi
            fi
        fi
    fi
fi

0xce98:
if
    0x000000000000ce98: cmp rdx, 1
    0x000000000000ce9c: je 0xceb0
then
    0x000000000000ceb0: mov eax, 1
    0x000000000000ceb5: pop rbx
    0x000000000000ceb6: ret 
    L := 0x0 (130)
else
    if
        0x000000000000ce9e: cmp byte ptr [rbx + rdx - 1], 0x2f
        0x000000000000cea3: lea rax, [rdx - 1]
        0x000000000000cea7: je 0xce90
    then
        0x000000000000ce90: mov rdx, rax
        0x000000000000ce93: nop dword ptr [rax + rax]
        L := 0xce98 (2)
    else
        0x000000000000cea9: mov rax, rdx
        0x000000000000ceac: pop rbx
        0x000000000000cead: ret 
        L := 0x0 (130)
    fi
fi

0xeea9:
if
    0x000000000000eea9: fstp xword ptr [rsp + 0x20]
    0x000000000000eead: sub rsp, 0x10
    0x000000000000eeb1: lea rcx, [rip + 0xb54e]
    0x000000000000eeb8: mov esi, 1
    0x000000000000eebd: mov rdx, -1
    0x000000000000eec4: xor eax, eax
    0x000000000000eec6: mov r14, qword ptr [rsp + 0x10]
    0x000000000000eecb: mov rdi, r14
    0x000000000000eece: fstp xword ptr [rsp]
    0x000000000000eed1: call 0x3e60
    0x000000000000eed6: mov rdi, r14
    0x000000000000eed9: call 0x3950
    0x000000000000eede: pop rcx
    0x000000000000eedf: pop rsi
    0x000000000000eee0: cmp rax, qword ptr [rsp + 0x18]
    0x000000000000eee5: mov r14, rax
    0x000000000000eee8: fld xword ptr [rsp + 0x20]
    0x000000000000eeec: ja 0xf498
then
    0x000000000000f498: fld dword ptr [rip + 0xafae]
    0x000000000000f49e: fmul st(1), st(0)
    L := 0xf4a0 (2)
else
    L := 0xeef2 (2)
fi

0xcec0:
if
    0x000000000000cec0: mov eax, dword ptr [rsi + 0x18]
    0x000000000000cec3: and eax, 0xf000
    0x000000000000cec8: cmp eax, 0xa000
    0x000000000000cecd: je 0xcf00
then
    0x000000000000cf00: xor eax, eax
    0x000000000000cf02: ret 
    L := 0x0 (130)
else
    if
        0x000000000000cecf: push rbp
        0x000000000000ced0: push rbx
        0x000000000000ced1: mov rbx, rsi
        0x000000000000ced4: lea rsi, [rip + 0xd430]
        0x000000000000cedb: xor ecx, ecx
        0x000000000000cedd: xor edx, edx
        0x000000000000cedf: sub rsp, 8
        0x000000000000cee3: mov rbp, rdi
        0x000000000000cee6: call 0x3d90
        0x000000000000ceeb: test rax, rax
        0x000000000000ceee: js 0xcf08
    then
        if
            0x000000000000cf08: call 0x37f0
            0x000000000000cf0d: cmp dword ptr [rax], 0x3d
            0x000000000000cf10: je 0xcf28
        then
            L := 0xcf28 (2)
        else
            0x000000000000cf12: call 0x37f0
            0x000000000000cf17: mov edi, dword ptr [rax]
            L := 0xcf19 (2)
        fi
    else
        if
            0x000000000000cef0: je 0xcf28
        then
            L := 0xcf28 (2)
        else
            L := 0xcef2 (2)
        fi
    fi
fi

0x14ed0:
if
    0x0000000000014ed0: test r13, r13
    0x0000000000014ed3: je 0x14ede
then
    L := 0x14ede (2)
else
    if
        0x0000000000014ed5: movzx r12d, byte ptr [rcx]
        0x0000000000014ed9: test r12b, r12b
        0x0000000000014edc: jne 0x14f57
    then
        L := 0x14f57 (2)
    else
        L := 0x14ede (2)
    fi
fi

0x4ed0:
0x0000000000004ed0: mov dword ptr [rip + 0x21c422], eax
0x0000000000004ed6: jmp 0x4a63
L := 0x4a63 (2)

0x14ede:
0x0000000000014ede: mov qword ptr [r14], rbx
0x0000000000014ee1: jmp 0x14efd
L := 0x14efd (4)

0xeef2:
if
    0x000000000000eef2: test r12b, 8
    0x000000000000eef6: je 0xf060
then
    0x000000000000f060: fstp st(0)
    0x000000000000f062: jmp 0xf070
    L := 0xf070 (4)
else
    if
        0x000000000000eefc: mov rax, qword ptr [rsp]
        0x000000000000ef00: cmp byte ptr [rax + r14 - 1], 0x30
        0x000000000000ef06: jne 0xf068
    then
        0x000000000000f068: fstp st(0)
        0x000000000000f06a: nop word ptr [rax + rax]
        L := 0xf070 (4)
    else
        if
            0x000000000000ef0c: fld dword ptr [rip + 0xb53a]
            0x000000000000ef12: cmp r15d, 1
            0x000000000000ef16: fmul st(1), st(0)
            0x000000000000ef18: jne 0xf4a0
        then
            L := 0xf4a0 (2)
        else
            0x000000000000ef1e: jmp 0xf453
            L := 0xf453 (4)
        fi
    fi
fi

0xcef2:
0x000000000000cef2: mov eax, 1
L := 0xcef7 (2)

0xcef7:
0x000000000000cef7: add rsp, 8
0x000000000000cefb: pop rbx
0x000000000000cefc: pop rbp
0x000000000000cefd: ret 
L := 0x0 (130)

0x14ef8:
0x0000000000014ef8: mov ebp, 4
L := 0x14efd (4)

0x14efd:
if
    0x0000000000014efd: mov rdi, qword ptr [rsp + 0x18]
    0x0000000000014f02: xor rdi, qword ptr fs:[0x28]
    0x0000000000014f0b: mov eax, ebp
    0x0000000000014f0d: jne 0x151a0
then
    0x00000000000151a0: call 0x3970
    L := 0x151a5 (2)
else
    0x0000000000014f13: add rsp, 0x28
    0x0000000000014f17: pop rbx
    0x0000000000014f18: pop rbp
    0x0000000000014f19: pop r12
    0x0000000000014f1b: pop r13
    0x0000000000014f1d: pop r14
    0x0000000000014f1f: pop r15
    0x0000000000014f21: ret 
    L := 0x0 (130)
fi

0x4f09:
0x0000000000004f09: mov eax, dword ptr [rip + 0x21c419]
0x0000000000004f0f: mov dword ptr [rip + 0x21c407], eax
0x0000000000004f15: mov rax, qword ptr [rip + 0x21c404]
0x0000000000004f1c: mov qword ptr [rip + 0x21b0f5], rax
L := 0x4f23 (2)

0xaf0f:
if
    0x000000000000af0f: call 0x146d0
    0x000000000000af14: nop 
    0x000000000000af16: nop word ptr cs:[rax + rax]
    0x000000000000af20: mov rax, qword ptr [rsi + 0x80]
    0x000000000000af27: cmp qword ptr [rdi + 0x80], rax
    0x000000000000af2e: jg 0xaf60
then
    0x000000000000af60: mov eax, 0xffffffff
    0x000000000000af65: ret 
    L := 0x0 (130)
else
    if
        0x000000000000af30: jl 0xaf50
    then
        0x000000000000af50: mov eax, 1
        L := 0xaf55 (2)
    else
        if
            0x000000000000af32: mov rax, qword ptr [rsi + 0x88]
            0x000000000000af39: sub eax, dword ptr [rdi + 0x88]
            0x000000000000af3f: jne 0xaf55
        then
            L := 0xaf55 (2)
        else
            0x000000000000af41: mov rsi, qword ptr [rsi]
            0x000000000000af44: mov rdi, qword ptr [rdi]
            0x000000000000af47: jmp 0x6490
            L := 0x6490 (2)
        fi
    fi
fi

0xcf19:
0x000000000000cf19: call 0x15c40
0x000000000000cf1e: movzx eax, al
0x000000000000cf21: neg eax
0x000000000000cf23: jmp 0xcef7
L := 0xcef7 (2)

0x4f23:
if
    0x0000000000004f23: cmp byte ptr [rsp + 0x10], 0
    0x0000000000004f28: je 0x48c6
then
    L := 0x48c6 (3)
else
    0x0000000000004f2e: mov dword ptr [rip + 0x21c3f0], 0
    0x0000000000004f38: mov qword ptr [rip + 0x21c3dd], 0x400
    0x0000000000004f43: jmp 0x48c6
    L := 0x48c6 (3)
fi

0xcf28:
if
    0x000000000000cf28: mov eax, dword ptr [rbx + 0x18]
    0x000000000000cf2b: and eax, 0xf000
    0x000000000000cf30: cmp eax, 0x4000
    0x000000000000cf35: jne 0xcf51
then
    L := 0xcf51 (2)
else
    if
        0x000000000000cf37: lea rsi, [rip + 0xd3e5]
        0x000000000000cf3e: xor ecx, ecx
        0x000000000000cf40: xor edx, edx
        0x000000000000cf42: mov rdi, rbp
        0x000000000000cf45: call 0x3d90
        0x000000000000cf4a: test rax, rax
        0x000000000000cf4d: js 0xcf60
    then
        if
            0x000000000000cf60: call 0x37f0
            0x000000000000cf65: mov edi, dword ptr [rax]
            0x000000000000cf67: cmp edi, 0x3d
            0x000000000000cf6a: jne 0xcf19
        then
            L := 0xcf19 (2)
        else
            0x000000000000cf6c: xor eax, eax
            0x000000000000cf6e: jmp 0xcf53
            L := 0xcf53 (2)
        fi
    else
        if
            0x000000000000cf4f: jne 0xcef2
        then
            L := 0xcef2 (2)
        else
            L := 0xcf51 (2)
        fi
    fi
fi

0xcf51:
0x000000000000cf51: xor eax, eax
L := 0xcf53 (2)

0xcf53:
0x000000000000cf53: add rsp, 8
0x000000000000cf57: pop rbx
0x000000000000cf58: pop rbp
0x000000000000cf59: ret 
L := 0x0 (130)

0xaf55:
0x000000000000af55: ret 
L := 0x0 (130)

0x14f57:
if
    0x0000000000014f57: movsx esi, r12b
    0x0000000000014f5b: mov rdi, r13
    0x0000000000014f5e: mov qword ptr [rsp + 8], rcx
    0x0000000000014f63: call 0x39a0
    0x0000000000014f68: test rax, rax
    0x0000000000014f6b: mov rcx, qword ptr [rsp + 8]
    0x0000000000014f70: je 0x1503c
then
    L := 0x1503c (2)
else
    if
        0x0000000000014f76: lea eax, [r12 - 0x45]
        0x0000000000014f7b: cmp al, 0x2f
        0x0000000000014f7d: ja 0x14fd0
    then
        L := 0x14fd0 (4)
    else
        if
            0x0000000000014f7f: movabs rdx, 0x814400308945
            0x0000000000014f89: bt rdx, rax
            0x0000000000014f8d: jae 0x14fd0
        then
            L := 0x14fd0 (4)
        else
            if
                0x0000000000014f8f: mov esi, 0x30
                0x0000000000014f94: mov rdi, r13
                0x0000000000014f97: mov qword ptr [rsp + 8], rcx
                0x0000000000014f9c: call 0x39a0
                0x0000000000014fa1: test rax, rax
                0x0000000000014fa4: mov rcx, qword ptr [rsp + 8]
                0x0000000000014fa9: je 0x14fd0
            then
                L := 0x14fd0 (4)
            else
                if
                    0x0000000000014fab: movzx eax, byte ptr [rcx + 1]
                    0x0000000000014faf: cmp al, 0x44
                    0x0000000000014fb1: je 0x14fbf
                then
                    L := 0x14fbf (2)
                else
                    if
                        0x0000000000014fb3: cmp al, 0x69
                        0x0000000000014fb5: je 0x15188
                    then
                        0x0000000000015188: xor edi, edi
                        0x000000000001518a: cmp byte ptr [rcx + 2], 0x42
                        0x000000000001518e: mov esi, 0x400
                        0x0000000000015193: sete dil
                        0x0000000000015197: lea edi, [rdi + rdi + 1]
                        0x000000000001519b: jmp 0x14fda
                        L := 0x14fda (3)
                    else
                        if
                            0x0000000000014fbb: cmp al, 0x42
                            0x0000000000014fbd: jne 0x14fd0
                        then
                            L := 0x14fd0 (4)
                        else
                            L := 0x14fbf (2)
                        fi
                    fi
                fi
            fi
        fi
    fi
fi

0x4f65:
if
    0x0000000000004f65: lea ecx, [rax - 0x2d]
    0x0000000000004f68: cmp ecx, 1
    0x0000000000004f6b: jbe 0x4f95
then
    L := 0x4f95 (5)
else
    if
        0x0000000000004f6d: cmp eax, 0x7e
        0x0000000000004f70: je 0x4f95
    then
        L := 0x4f95 (5)
    else
        if
            0x0000000000004f72: cmp eax, 0x5f
            0x0000000000004f75: sete cl
            0x0000000000004f78: add eax, 1
            0x0000000000004f7b: or byte ptr [rdx], cl
            0x0000000000004f7d: add rdx, 1
            0x0000000000004f81: cmp eax, 0x100
            0x0000000000004f86: je 0x4faa
        then
            L := 0x4faa (2)
        else
            L := 0x4f88 (3)
        fi
    fi
fi

0xcf70:
if
    0x000000000000cf70: test rdi, rdi
    0x000000000000cf73: je 0xcff0
then
    0x000000000000cff0: ret 
    L := 0x0 (130)
else
    if
        0x000000000000cf75: push r13
        0x000000000000cf77: push r12
        0x000000000000cf79: mov r13, rdi
        0x000000000000cf7c: push rbp
        0x000000000000cf7d: push rbx
        0x000000000000cf7e: mov r12, rsi
        0x000000000000cf81: mov edi, 0x18
        0x000000000000cf86: mov rbp, rdx
        0x000000000000cf89: sub rsp, 8
        0x000000000000cf8d: call 0x14480
        0x000000000000cf92: mov rdi, r12
        0x000000000000cf95: mov rbx, rax
        0x000000000000cf98: call 0x146b0
        0x000000000000cf9d: mov qword ptr [rbx], rax
        0x000000000000cfa0: mov rax, qword ptr [rbp + 8]
        0x000000000000cfa4: mov rsi, rbx
        0x000000000000cfa7: mov rdi, r13
        0x000000000000cfaa: mov qword ptr [rbx + 8], rax
        0x000000000000cfae: mov rax, qword ptr [rbp]
        0x000000000000cfb2: mov qword ptr [rbx + 0x10], rax
        0x000000000000cfb6: call 0xe900
        0x000000000000cfbb: test rax, rax
        0x000000000000cfbe: je 0xcff2
    then
        0x000000000000cff2: call 0x146d0
        0x000000000000cff7: nop word ptr [rax + rax]
        if
            0x000000000000d000: sub rsp, 0x28
            0x000000000000d004: mov rax, qword ptr fs:[0x28]
            0x000000000000d00d: mov qword ptr [rsp + 0x18], rax
            0x000000000000d012: xor eax, eax
            0x000000000000d014: test rdi, rdi
            0x000000000000d017: je 0xd03c
        then
            L := 0xd03c (2)
        else
            0x000000000000d019: mov rax, qword ptr [rdx + 8]
            0x000000000000d01d: mov qword ptr [rsp], rsi
            0x000000000000d021: mov rsi, rsp
            0x000000000000d024: mov qword ptr [rsp + 8], rax
            0x000000000000d029: mov rax, qword ptr [rdx]
            0x000000000000d02c: mov qword ptr [rsp + 0x10], rax
            0x000000000000d031: call 0xde90
            0x000000000000d036: test rax, rax
            0x000000000000d039: setne al
            L := 0xd03c (2)
        fi
    else
        if
            0x000000000000cfc0: cmp rbx, rax
            0x000000000000cfc3: je 0xcfe0
        then
            0x000000000000cfe0: add rsp, 8
            0x000000000000cfe4: pop rbx
            0x000000000000cfe5: pop rbp
            0x000000000000cfe6: pop r12
            0x000000000000cfe8: pop r13
            0x000000000000cfea: ret 
            L := 0x0 (130)
        else
            0x000000000000cfc5: add rsp, 8
            0x000000000000cfc9: mov rdi, rbx
            0x000000000000cfcc: pop rbx
            0x000000000000cfcd: pop rbp
            0x000000000000cfce: pop r12
            0x000000000000cfd0: pop r13
            0x000000000000cfd2: jmp 0xec20
            0x000000000000ec20: push rbx
            0x000000000000ec21: mov rbx, rdi
            0x000000000000ec24: mov rdi, qword ptr [rdi]
            0x000000000000ec27: call 0x3e70
            0x000000000000ec2c: mov rdi, rbx
            0x000000000000ec2f: pop rbx
            0x000000000000ec30: jmp 0x3e70
            L := 0x3e70 (2)
        fi
    fi
fi

0xef79:
if
    0x000000000000ef79: mov ecx, r12d
    0x000000000000ef7c: mov r8, qword ptr [rsp + 8]
    0x000000000000ef81: mov ebx, 0xffffffff
    0x000000000000ef86: and ecx, 0x10
    0x000000000000ef89: je 0xf350
then
    L := 0xf350 (5)
else
    if
        0x000000000000ef8f: mov r8d, dword ptr [rsp + 0x34]
        0x000000000000ef94: cmp r8, rsi
        0x000000000000ef97: mov r11, r8
        0x000000000000ef9a: ja 0xf510
    then
        0x000000000000f510: mov r8, qword ptr [rsp + 8]
        0x000000000000f515: xor ebx, ebx
        0x000000000000f517: jmp 0xf350
        L := 0xf350 (5)
    else
        0x000000000000efa0: xor ebx, ebx
        0x000000000000efa2: jmp 0xefc7
        L := 0xefc7 (2)
    fi
fi

0x4f88:
if
    0x0000000000004f88: cmp eax, 0x5a
    0x0000000000004f8b: jle 0x4f58
then
    if
        0x0000000000004f58: cmp eax, 0x41
        0x0000000000004f5b: jge 0x4f95
    then
        L := 0x4f95 (5)
    else
        if
            0x0000000000004f5d: lea ecx, [rax - 0x30]
            0x0000000000004f60: cmp ecx, 9
            0x0000000000004f63: jbe 0x4f95
        then
            L := 0x4f95 (5)
        else
            L := 0x4f65 (2)
        fi
    fi
else
    if
        0x0000000000004f8d: lea ecx, [rax - 0x61]
        0x0000000000004f90: cmp ecx, 0x19
        0x0000000000004f93: ja 0x4f65
    then
        L := 0x4f65 (2)
    else
        L := 0x4f95 (5)
    fi
fi

0x4f95:
if
    0x0000000000004f95: add eax, 1
    0x0000000000004f98: mov ecx, 1
    0x0000000000004f9d: or byte ptr [rdx], cl
    0x0000000000004f9f: add rdx, 1
    0x0000000000004fa3: cmp eax, 0x100
    0x0000000000004fa8: jne 0x4f88
then
    L := 0x4f88 (3)
else
    L := 0x4faa (2)
fi

0x4faa:
if
    0x0000000000004faa: call 0x14870
    0x0000000000004faf: test rax, rax
    0x0000000000004fb2: je 0x535b
then
    0x000000000000535b: lea rax, [rip + 0x128e8]
    0x0000000000005362: jmp 0x4fb8
    L := 0x4fb8 (2)
else
    L := 0x4fb8 (2)
fi

0xefb2:
if
    0x000000000000efb2: add ebx, 1
    0x000000000000efb5: cmp r8, r10
    0x000000000000efb8: ja 0xf2cd
then
    if
        0x000000000000f2cd: cmp r10, 9
        0x000000000000f2d1: ja 0xf568
    then
        L := 0xf568 (2)
    else
        if
            0x000000000000f2d7: cmp r15d, 1
            0x000000000000f2db: je 0xf592
        then
            0x000000000000f592: mov edx, eax
            0x000000000000f594: and edx, 1
            0x000000000000f597: add edx, edi
            0x000000000000f599: cmp edx, 2
            0x000000000000f59c: setg dl
            0x000000000000f59f: jmp 0xf2f0
            L := 0xf2f0 (2)
        else
            0x000000000000f2e1: test r15d, r15d
            0x000000000000f2e4: sete dl
            0x000000000000f2e7: test edi, edi
            0x000000000000f2e9: setg r8b
            0x000000000000f2ed: and edx, r8d
            L := 0xf2f0 (2)
        fi
    fi
else
    if
        0x000000000000efbe: cmp ebx, 8
        0x000000000000efc1: je 0xf568
    then
        L := 0xf568 (2)
    else
        L := 0xefc7 (2)
    fi
fi

0x4fb8:
0x0000000000004fb8: mov qword ptr [rip + 0x21c3c9], rax
0x0000000000004fbf: jmp 0x4b21
L := 0x4b21 (2)

0x14fbf:
0x0000000000014fbf: mov edi, 2
0x0000000000014fc4: mov esi, 0x3e8
0x0000000000014fc9: jmp 0x14fda
L := 0x14fda (3)

0xefc7:
if
    0x000000000000efc7: mov rax, rsi
    0x000000000000efca: xor edx, edx
    0x000000000000efcc: mov esi, edi
    0x000000000000efce: div r8
    0x000000000000efd1: sar esi, 1
    0x000000000000efd3: mov r10, rax
    0x000000000000efd6: lea eax, [rdx + rdx*4]
    0x000000000000efd9: xor edx, edx
    0x000000000000efdb: lea eax, [r9 + rax*2]
    0x000000000000efdf: div r11d
    0x000000000000efe2: lea edx, [rsi + rdx*2]
    0x000000000000efe5: mov r9d, eax
    0x000000000000efe8: mov rsi, r10
    0x000000000000efeb: add edi, edx
    0x000000000000efed: cmp r11d, edx
    0x000000000000eff0: ja 0xefa8
then
    0x000000000000efa8: test edi, edi
    0x000000000000efaa: setne dil
    0x000000000000efae: movzx edi, dil
    L := 0xefb2 (2)
else
    0x000000000000eff2: cmp r11d, edi
    0x000000000000eff5: setb dil
    0x000000000000eff9: movzx edi, dil
    0x000000000000effd: add edi, 2
    0x000000000000f000: jmp 0xefb2
    L := 0xefb2 (2)
fi

0x14fd0:
0x0000000000014fd0: mov edi, 1
0x0000000000014fd5: mov esi, 0x400
L := 0x14fda (3)

0x14fda:
if
    0x0000000000014fda: sub r12d, 0x42
    0x0000000000014fde: cmp r12b, 0x35
    0x0000000000014fe2: ja 0x1503c
then
    L := 0x1503c (2)
else
    0x0000000000014fe4: lea rdx, [rip + 0x6095]
    0x0000000000014feb: movzx r12d, r12b
    0x0000000000014fef: movsxd rax, dword ptr [rdx + r12*4]
    0x0000000000014ff3: add rax, rdx
    0x0000000000014ff6: jmp rax
    L := 0x0 (130)
fi

0x5015:
if
    0x0000000000005015: cmp qword ptr [rip + 0x21c393], 0
    0x000000000000501d: je 0x4b92
then
    L := 0x4b92 (2)
else
    if
        0x0000000000005023: call 0x9420
        0x0000000000005028: cmp qword ptr [rip + 0x21c350], 0
        0x0000000000005030: je 0x4c76
    then
        L := 0x4c76 (3)
    else
        if
            0x0000000000005036: mov rdi, qword ptr [rip + 0x21b24b]
            0x000000000000503d: mov rax, qword ptr [rdi + 0x28]
            0x0000000000005041: cmp qword ptr [rdi + 0x30], rax
            0x0000000000005045: jbe 0x576c
        then
            0x000000000000576c: mov esi, 0xa
            0x0000000000005771: call 0x39d0
            0x0000000000005776: jmp 0x5056
            L := 0x5056 (2)
        else
            0x000000000000504b: lea rdx, [rax + 1]
            0x000000000000504f: mov qword ptr [rdi + 0x28], rdx
            0x0000000000005053: mov byte ptr [rax], 0xa
            L := 0x5056 (2)
        fi
    fi
fi

0xf01c:
0x000000000000f01c: sub rsp, 0x10
0x000000000000f020: lea rcx, [rip + 0xb3d9]
0x000000000000f027: mov esi, 1
0x000000000000f02c: mov rbx, qword ptr [rsp + 0x10]
0x000000000000f031: mov rdx, -1
0x000000000000f038: xor eax, eax
0x000000000000f03a: fstp xword ptr [rsp]
0x000000000000f03d: xor ebp, ebp
0x000000000000f03f: mov rdi, rbx
0x000000000000f042: call 0x3e60
0x000000000000f047: mov rdi, rbx
0x000000000000f04a: mov ebx, 0xffffffff
0x000000000000f04f: call 0x3950
0x000000000000f054: pop rsi
0x000000000000f055: pop rdi
0x000000000000f056: mov r14, rax
0x000000000000f059: jmp 0xf070
L := 0xf070 (4)

0x1503c:
0x000000000001503c: mov qword ptr [r14], rbx
0x000000000001503f: or ebp, 2
0x0000000000015042: jmp 0x14efd
L := 0x14efd (4)

0xd03c:
if
    0x000000000000d03c: mov rcx, qword ptr [rsp + 0x18]
    0x000000000000d041: xor rcx, qword ptr fs:[0x28]
    0x000000000000d04a: jne 0xd051
then
    if
        0x000000000000d051: call 0x3970
        0x000000000000d056: nop word ptr cs:[rax + rax]
        0x000000000000d060: mov edx, edi
        0x000000000000d062: mov eax, 0x2d
        0x000000000000d067: and edx, 0xf000
        0x000000000000d06d: cmp edx, 0x8000
        0x000000000000d073: je 0xd0d0
    then
        L := 0xd0d0 (7)
    else
        if
            0x000000000000d075: cmp edx, 0x4000
            0x000000000000d07b: mov eax, 0x64
            0x000000000000d080: je 0xd0d0
        then
            L := 0xd0d0 (7)
        else
            if
                0x000000000000d082: cmp edx, 0x6000
                0x000000000000d088: mov eax, 0x62
                0x000000000000d08d: je 0xd0d0
            then
                L := 0xd0d0 (7)
            else
                if
                    0x000000000000d08f: cmp edx, 0x2000
                    0x000000000000d095: mov eax, 0x63
                    0x000000000000d09a: je 0xd0d0
                then
                    L := 0xd0d0 (7)
                else
                    if
                        0x000000000000d09c: cmp edx, 0xa000
                        0x000000000000d0a2: mov eax, 0x6c
                        0x000000000000d0a7: je 0xd0d0
                    then
                        L := 0xd0d0 (7)
                    else
                        if
                            0x000000000000d0a9: cmp edx, 0x1000
                            0x000000000000d0af: mov eax, 0x70
                            0x000000000000d0b4: je 0xd0d0
                        then
                            L := 0xd0d0 (7)
                        else
                            0x000000000000d0b6: cmp edx, 0xc000
                            0x000000000000d0bc: mov eax, 0x73
                            0x000000000000d0c1: mov edx, 0x3f
                            0x000000000000d0c6: cmovne eax, edx
                            0x000000000000d0c9: nop dword ptr [rax]
                            L := 0xd0d0 (7)
                        fi
                    fi
                fi
            fi
        fi
    fi
else
    0x000000000000d04c: add rsp, 0x28
    0x000000000000d050: ret 
    L := 0x0 (130)
fi

0x5056:
0x0000000000005056: add qword ptr [rip + 0x21c19a], 1
0x000000000000505e: mov rbx, qword ptr [rip + 0x21c31b]
0x0000000000005065: jmp 0x4bdc
L := 0x4bdc (5)

0xf070:
0x000000000000f070: mov r15, qword ptr [rsp + 8]
0x000000000000f075: mov rsi, qword ptr [rsp]
0x000000000000f079: mov rdx, r14
0x000000000000f07c: sub r15, r14
0x000000000000f07f: sub r14, rbp
0x000000000000f082: mov rdi, r15
0x000000000000f085: call 0x3d10
0x000000000000f08a: mov r8, r14
0x000000000000f08d: add r8, r15
L := 0xf090 (3)

0xf090:
if
    0x000000000000f090: test r12b, 4
    0x000000000000f094: jne 0xf178
then
    0x000000000000f178: mov r14, r8
    0x000000000000f17b: mov rdi, r13
    0x000000000000f17e: mov qword ptr [rsp + 0x48], r8
    0x000000000000f183: sub r14, r15
    0x000000000000f186: mov rbp, -1
    0x000000000000f18d: call 0x3950
    0x000000000000f192: lea rdi, [rsp + 0x50]
    0x000000000000f197: mov ecx, 0x29
    0x000000000000f19c: mov rdx, r14
    0x000000000000f19f: mov rsi, r15
    0x000000000000f1a2: mov qword ptr [rsp + 0x40], rax
    0x000000000000f1a7: mov qword ptr [rsp + 0x18], rdi
    0x000000000000f1ac: call 0x3b60
    0x000000000000f1b1: mov ecx, r12d
    0x000000000000f1b4: mov dword ptr [rsp + 0x20], ebx
    0x000000000000f1b8: mov r12, r14
    0x000000000000f1bb: mov rbx, r13
    0x000000000000f1be: mov r8, qword ptr [rsp + 0x48]
    0x000000000000f1c3: mov r15, qword ptr [rsp + 0x38]
    0x000000000000f1c8: mov r13, qword ptr [rsp + 0x40]
    0x000000000000f1cd: mov r14d, ecx
    0x000000000000f1d0: jmp 0xf212
    L := 0xf212 (2)
else
    L := 0xf09a (3)
fi

0xf09a:
if
    0x000000000000f09a: test r12b, 0x80
    0x000000000000f09e: je 0xf117
then
    L := 0xf117 (5)
else
    if
        0x000000000000f0a0: cmp ebx, -1
        0x000000000000f0a3: je 0xf3c0
    then
        if
            0x000000000000f3c0: mov rcx, qword ptr [rsp + 0x10]
            0x000000000000f3c5: cmp rcx, 1
            0x000000000000f3c9: jbe 0xf572
        then
            0x000000000000f572: xor ebx, ebx
            0x000000000000f574: jmp 0xf0a9
            L := 0xf0a9 (4)
        else
            0x000000000000f3cf: mov edx, dword ptr [rsp + 0x34]
            0x000000000000f3d3: mov ebx, 1
            0x000000000000f3d8: mov eax, 1
            L := 0xf3dd (2)
        fi
    else
        L := 0xf0a9 (4)
    fi
fi

0xf0a9:
if
    0x000000000000f0a9: mov eax, r12d
    0x000000000000f0ac: and eax, 0x100
    0x000000000000f0b1: mov ecx, eax
    0x000000000000f0b3: or ecx, ebx
    0x000000000000f0b5: je 0xf117
then
    L := 0xf117 (5)
else
    if
        0x000000000000f0b7: and r12d, 0x40
        0x000000000000f0bb: jne 0xf258
    then
        0x000000000000f258: mov rcx, qword ptr [rsp]
        0x000000000000f25c: lea rdi, [rcx + 0x288]
        0x000000000000f263: mov byte ptr [rcx + 0x287], 0x20
        0x000000000000f26a: mov qword ptr [rsp + 8], rdi
        0x000000000000f26f: jmp 0xf0c1
        L := 0xf0c1 (2)
    else
        L := 0xf0c1 (2)
    fi
fi

0xf0c1:
if
    0x000000000000f0c1: test ebx, ebx
    0x000000000000f0c3: je 0xf6f6
then
    if
        0x000000000000f6f6: test eax, eax
        0x000000000000f6f8: mov rdx, qword ptr [rsp + 8]
        0x000000000000f6fd: jne 0xf10b
    then
        L := 0xf10b (4)
    else
        0x000000000000f703: jmp 0xf117
        L := 0xf117 (5)
    fi
else
    if
        0x000000000000f0c9: cmp ebx, 1
        0x000000000000f0cc: jne 0xf0dc
    then
        L := 0xf0dc (2)
    else
        if
            0x000000000000f0ce: mov r9d, dword ptr [rsp + 0x30]
            0x000000000000f0d3: test r9d, r9d
            0x000000000000f0d6: je 0xf520
        then
            if
                0x000000000000f520: mov rbx, qword ptr [rsp + 8]
                0x000000000000f525: test eax, eax
                0x000000000000f527: lea rdx, [rbx + 1]
                0x000000000000f52b: mov byte ptr [rbx], 0x6b
                0x000000000000f52e: jne 0xf10b
            then
                L := 0xf10b (4)
            else
                L := 0xf534 (2)
            fi
        else
            L := 0xf0dc (2)
        fi
    fi
fi

0x70d0:
if
    0x00000000000070d0: push r15
    0x00000000000070d2: push r14
    0x00000000000070d4: push r13
    0x00000000000070d6: push r12
    0x00000000000070d8: push rbp
    0x00000000000070d9: push rbx
    0x00000000000070da: sub rsp, 0xa8
    0x00000000000070e1: mov rax, qword ptr fs:[0x28]
    0x00000000000070ea: mov qword ptr [rsp + 0x98], rax
    0x00000000000070f2: xor eax, eax
    0x00000000000070f4: test dil, dil
    0x00000000000070f7: jne 0x7170
then
    0x0000000000007170: lea rbp, [rip + 0xf8ed]
    0x0000000000007177: lea rdi, [rip + 0x21a0a2]
    0x000000000000717e: mov r13d, 0x14
    0x0000000000007184: mov r12, rsp
    0x0000000000007187: lea r15, [rip + 0x21a092]
    0x000000000000718e: call 0x3b70
    0x0000000000007193: lea r14, [rbp + 0x2c]
    0x0000000000007197: mov rbx, rbp
    0x000000000000719a: jmp 0x71a7
    L := 0x71a7 (2)
else
    0x00000000000070f9: lea rbx, [rip + 0xf964]
    0x0000000000007100: mov ebp, 0x14
    0x0000000000007105: lea r12, [rip + 0x21a114]
    0x000000000000710c: lea r13, [rbx + 0x2c]
    0x0000000000007110: jmp 0x7123
    L := 0x7123 (2)
fi

0xd0d0:
if
    0x000000000000d0d0: mov byte ptr [rsi], al
    0x000000000000d0d2: mov eax, edi
    0x000000000000d0d4: and eax, 0x100
    0x000000000000d0d9: cmp eax, 1
    0x000000000000d0dc: sbb eax, eax
    0x000000000000d0de: and eax, 0xffffffbb
    0x000000000000d0e1: add eax, 0x72
    0x000000000000d0e4: mov byte ptr [rsi + 1], al
    0x000000000000d0e7: mov eax, edi
    0x000000000000d0e9: and eax, 0x80
    0x000000000000d0ee: cmp eax, 1
    0x000000000000d0f1: sbb eax, eax
    0x000000000000d0f3: and eax, 0xffffffb6
    0x000000000000d0f6: add eax, 0x77
    0x000000000000d0f9: mov byte ptr [rsi + 2], al
    0x000000000000d0fc: mov eax, edi
    0x000000000000d0fe: and eax, 0x40
    0x000000000000d101: cmp eax, 1
    0x000000000000d104: sbb eax, eax
    0x000000000000d106: test edi, 0x800
    0x000000000000d10c: je 0xd1b0
then
    0x000000000000d1b0: and eax, 0xffffffb5
    0x000000000000d1b3: add eax, 0x78
    0x000000000000d1b6: jmp 0xd118
    L := 0xd118 (2)
else
    0x000000000000d112: and eax, 0xffffffe0
    0x000000000000d115: add eax, 0x73
    L := 0xd118 (2)
fi

0xf0dc:
if
    0x000000000000f0dc: lea rcx, [rip + 0xb35d]
    0x000000000000f0e3: movsxd rbx, ebx
    0x000000000000f0e6: mov rdi, qword ptr [rsp + 8]
    0x000000000000f0eb: test eax, eax
    0x000000000000f0ed: movzx ecx, byte ptr [rcx + rbx]
    0x000000000000f0f1: lea rdx, [rdi + 1]
    0x000000000000f0f5: mov byte ptr [rdi], cl
    0x000000000000f0f7: je 0xf534
then
    L := 0xf534 (2)
else
    if
        0x000000000000f0fd: mov r8d, dword ptr [rsp + 0x30]
        0x000000000000f102: test r8d, r8d
        0x000000000000f105: jne 0xf2c0
    then
        0x000000000000f2c0: lea rdx, [rdi + 2]
        0x000000000000f2c4: mov byte ptr [rdi + 1], 0x69
        0x000000000000f2c8: jmp 0xf10b
        L := 0xf10b (4)
    else
        L := 0xf10b (4)
    fi
fi

0x50e0:
if
    0x00000000000050e0: lea rdi, [rip + 0x12e26]
    0x00000000000050e7: call 0x37a0
    0x00000000000050ec: test rax, rax
    0x00000000000050ef: je 0x50fa
then
    L := 0x50fa (2)
else
    if
        0x00000000000050f1: cmp byte ptr [rax], 0
        0x00000000000050f4: jne 0x5192
    then
        L := 0x5192 (6)
    else
        L := 0x50fa (2)
    fi
fi

0x50fa:
if
    0x00000000000050fa: lea rdi, [rip + 0x12e11]
    0x0000000000005101: call 0x37a0
    0x0000000000005106: test rax, rax
    0x0000000000005109: mov qword ptr [rsp + 8], rax
    0x000000000000510e: je 0x518b
then
    L := 0x518b (3)
else
    if
        0x0000000000005110: mov rax, qword ptr [rsp + 8]
        0x0000000000005115: cmp byte ptr [rax], 0
        0x0000000000005118: je 0x518b
    then
        L := 0x518b (3)
    else
        0x000000000000511a: lea r14, [rip + 0x11a7f]
        0x0000000000005121: mov rax, r12
        0x0000000000005124: mov r12, rbx
        0x0000000000005127: mov r15, rax
        0x000000000000512a: mov rbx, r14
        0x000000000000512d: jmp 0x5143
        L := 0x5143 (2)
    fi
fi

0xf10b:
0x000000000000f10b: lea rax, [rdx + 1]
0x000000000000f10f: mov byte ptr [rdx], 0x42
0x000000000000f112: mov qword ptr [rsp + 8], rax
L := 0xf117 (5)

0xf117:
if
    0x000000000000f117: mov rax, qword ptr [rsp + 8]
    0x000000000000f11c: mov rcx, qword ptr [rsp + 0x88]
    0x000000000000f124: xor rcx, qword ptr fs:[0x28]
    0x000000000000f12d: mov byte ptr [rax], 0
    0x000000000000f130: mov rax, r15
    0x000000000000f133: jne 0xf6cb
then
    0x000000000000f6cb: call 0x3970
    L := 0xf6d0 (2)
else
    0x000000000000f139: add rsp, 0x98
    0x000000000000f140: pop rbx
    0x000000000000f141: pop rbp
    0x000000000000f142: pop r12
    0x000000000000f144: pop r13
    0x000000000000f146: pop r14
    0x000000000000f148: pop r15
    0x000000000000f14a: ret 
    L := 0x0 (130)
fi

0xd118:
if
    0x000000000000d118: mov byte ptr [rsi + 3], al
    0x000000000000d11b: mov eax, edi
    0x000000000000d11d: and eax, 0x20
    0x000000000000d120: cmp eax, 1
    0x000000000000d123: sbb eax, eax
    0x000000000000d125: and eax, 0xffffffbb
    0x000000000000d128: add eax, 0x72
    0x000000000000d12b: mov byte ptr [rsi + 4], al
    0x000000000000d12e: mov eax, edi
    0x000000000000d130: and eax, 0x10
    0x000000000000d133: cmp eax, 1
    0x000000000000d136: sbb eax, eax
    0x000000000000d138: and eax, 0xffffffb6
    0x000000000000d13b: add eax, 0x77
    0x000000000000d13e: mov byte ptr [rsi + 5], al
    0x000000000000d141: mov eax, edi
    0x000000000000d143: and eax, 8
    0x000000000000d146: cmp eax, 1
    0x000000000000d149: sbb eax, eax
    0x000000000000d14b: test edi, 0x400
    0x000000000000d151: je 0xd1d8
then
    0x000000000000d1d8: and eax, 0xffffffb5
    0x000000000000d1db: add eax, 0x78
    0x000000000000d1de: jmp 0xd15d
    L := 0xd15d (2)
else
    0x000000000000d157: and eax, 0xffffffe0
    0x000000000000d15a: add eax, 0x73
    L := 0xd15d (2)
fi

0x711d:
0x000000000000711d: mov ebp, dword ptr [rbx]
0x000000000000711f: add rbx, 4
L := 0x7123 (2)

0x7123:
if
    0x0000000000007123: mov esi, ebp
    0x0000000000007125: mov rdi, r12
    0x0000000000007128: call 0x3dc0
    0x000000000000712d: test eax, eax
    0x000000000000712f: je 0x7118
then
    if
        0x0000000000007118: cmp rbx, r13
        0x000000000000711b: je 0x713f
    then
        L := 0x713f (3)
    else
        L := 0x711d (2)
    fi
else
    if
        0x0000000000007131: xor esi, esi
        0x0000000000007133: mov edi, ebp
        0x0000000000007135: call 0x3b30
        0x000000000000713a: cmp rbx, r13
        0x000000000000713d: jne 0x711d
    then
        L := 0x711d (2)
    else
        L := 0x713f (3)
    fi
fi

0x512f:
0x000000000000512f: xor eax, eax
0x0000000000005131: mov rdi, rbx
0x0000000000005134: or rcx, 0xffffffffffffffff
0x0000000000005138: repne scasb al, byte ptr [rdi]
0x000000000000513a: mov rax, rcx
0x000000000000513d: not rax
0x0000000000005140: add rbx, rax
L := 0x5143 (2)

0x1513b:
if
    0x000000000001513b: sub r8d, 1
    0x000000000001513f: jne 0x1512c
then
    if
        0x000000000001512c: mov rax, rbx
        0x000000000001512f: mul rsi
        0x0000000000015132: mov rbx, rax
        0x0000000000015135: jo 0x151c4
    then
        L := 0x151c4 (2)
    else
        L := 0x1513b (2)
    fi
else
    0x0000000000015141: jmp 0x15095
    0x0000000000015095: or ebp, r9d
    0x0000000000015098: jmp 0x15020
    0x0000000000015020: movsxd rdi, edi
    0x0000000000015023: mov eax, ebp
    0x0000000000015025: add rcx, rdi
    0x0000000000015028: or eax, 2
    0x000000000001502b: mov qword ptr [r15], rcx
    0x000000000001502e: cmp byte ptr [rcx], 0
    0x0000000000015031: mov qword ptr [r14], rbx
    0x0000000000015034: cmovne ebp, eax
    0x0000000000015037: jmp 0x14efd
    L := 0x14efd (4)
fi

0x713f:
if
    0x000000000000713f: mov rax, qword ptr [rsp + 0x98]
    0x0000000000007147: xor rax, qword ptr fs:[0x28]
    0x0000000000007150: jne 0x7299
then
    0x0000000000007299: call 0x3970
    0x000000000000729e: nop 
    if
        0x00000000000072a0: cmp qword ptr [rip + 0x218de0], 0
        0x00000000000072a8: je 0x72b8
    then
        0x00000000000072b8: lea rdi, [rip + 0x218da1]
        0x00000000000072bf: sub rsp, 8
        0x00000000000072c3: call 0x72f0
        0x00000000000072c8: lea rdi, [rip + 0x218dc1]
        0x00000000000072cf: call 0x72f0
        0x00000000000072d4: lea rdi, [rip + 0x218d95]
        0x00000000000072db: add rsp, 8
        0x00000000000072df: jmp 0x72f0
        L := 0x72f0 (3)
    else
        0x00000000000072aa: lea rdi, [rip + 0x218dcf]
        0x00000000000072b1: jmp 0x72f0
        L := 0x72f0 (3)
    fi
else
    0x0000000000007156: add rsp, 0xa8
    0x000000000000715d: pop rbx
    0x000000000000715e: pop rbp
    0x000000000000715f: pop r12
    0x0000000000007161: pop r13
    0x0000000000007163: pop r14
    0x0000000000007165: pop r15
    0x0000000000007167: ret 
    L := 0x0 (130)
fi

0x5143:
if
    0x0000000000005143: mov rax, rbx
    0x0000000000005146: sub rax, r14
    0x0000000000005149: cmp rax, 0x104c
    0x000000000000514f: ja 0x5185
then
    0x0000000000005185: mov rbx, r12
    0x0000000000005188: mov r12, r15
    L := 0x518b (3)
else
    if
        0x0000000000005151: lea rsi, [rip + 0x12dbf]
        0x0000000000005158: mov edx, 5
        0x000000000000515d: mov rdi, rbx
        0x0000000000005160: call 0x3800
        0x0000000000005165: test eax, eax
        0x0000000000005167: jne 0x512f
    then
        L := 0x512f (2)
    else
        if
            0x0000000000005169: mov rsi, qword ptr [rsp + 8]
            0x000000000000516e: lea rdi, [rbx + 5]
            0x0000000000005172: xor edx, edx
            0x0000000000005174: call 0x3a50
            0x0000000000005179: test eax, eax
            0x000000000000517b: jne 0x512f
        then
            L := 0x512f (2)
        else
            0x000000000000517d: mov rbx, r12
            0x0000000000005180: mov r12, r15
            0x0000000000005183: jmp 0x5192
            L := 0x5192 (6)
        fi
    fi
fi

0xd15d:
if
    0x000000000000d15d: mov byte ptr [rsi + 6], al
    0x000000000000d160: mov eax, edi
    0x000000000000d162: and eax, 4
    0x000000000000d165: cmp eax, 1
    0x000000000000d168: sbb eax, eax
    0x000000000000d16a: and eax, 0xffffffbb
    0x000000000000d16d: add eax, 0x72
    0x000000000000d170: mov byte ptr [rsi + 7], al
    0x000000000000d173: mov eax, edi
    0x000000000000d175: and eax, 2
    0x000000000000d178: cmp eax, 1
    0x000000000000d17b: sbb eax, eax
    0x000000000000d17d: and eax, 0xffffffb6
    0x000000000000d180: add eax, 0x77
    0x000000000000d183: mov byte ptr [rsi + 8], al
    0x000000000000d186: mov eax, edi
    0x000000000000d188: and eax, 1
    0x000000000000d18b: cmp eax, 1
    0x000000000000d18e: sbb eax, eax
    0x000000000000d190: and edi, 0x200
    0x000000000000d196: je 0xd1c0
then
    0x000000000000d1c0: and eax, 0xffffffb5
    0x000000000000d1c3: add eax, 0x78
    0x000000000000d1c6: mov byte ptr [rsi + 9], al
    0x000000000000d1c9: mov eax, 0x20
    0x000000000000d1ce: mov word ptr [rsi + 0xa], ax
    0x000000000000d1d2: ret 
    L := 0x0 (130)
else
    0x000000000000d198: and eax, 0xffffffe0
    0x000000000000d19b: add eax, 0x74
    0x000000000000d19e: mov byte ptr [rsi + 9], al
    0x000000000000d1a1: mov eax, 0x20
    0x000000000000d1a6: mov word ptr [rsi + 0xa], ax
    0x000000000000d1aa: ret 
    L := 0x0 (130)
fi

0x518b:
0x000000000000518b: mov byte ptr [rip + 0x21c180], 0
L := 0x5192 (6)

0x5192:
if
    0x0000000000005192: cmp byte ptr [rip + 0x21c179], 0
    0x0000000000005199: je 0x4a56
then
    L := 0x4a56 (5)
else
    if
        0x000000000000519f: mov edi, 0xd
        0x00000000000051a4: call 0x5c50
        0x00000000000051a9: test al, al
        0x00000000000051ab: jne 0x51e3
    then
        L := 0x51e3 (3)
    else
        if
            0x00000000000051ad: mov edi, 0xe
            0x00000000000051b2: call 0x5c50
            0x00000000000051b7: test al, al
            0x00000000000051b9: je 0x51c4
        then
            L := 0x51c4 (2)
        else
            if
                0x00000000000051bb: cmp byte ptr [rip + 0x21c1ce], 0
                0x00000000000051c2: jne 0x51e3
            then
                L := 0x51e3 (3)
            else
                L := 0x51c4 (2)
            fi
        fi
    fi
fi

0x151a5:
0x00000000000151a5: lea rcx, [rip + 0x5fac]
0x00000000000151ac: lea rsi, [rip + 0x5d4d]
0x00000000000151b3: lea rdi, [rip + 0x5d56]
0x00000000000151ba: mov edx, 0x60
0x00000000000151bf: call 0x3a30
L := 0x151c4 (2)

0x71a7:
if
    0x00000000000071a7: xor esi, esi
    0x00000000000071a9: mov rdx, r12
    0x00000000000071ac: mov edi, r13d
    0x00000000000071af: call 0x3860
    0x00000000000071b4: cmp qword ptr [rsp], 1
    0x00000000000071b9: je 0x71c6
then
    L := 0x71c6 (2)
else
    0x00000000000071bb: mov esi, r13d
    0x00000000000071be: mov rdi, r15
    0x00000000000071c1: call 0x3e30
    L := 0x71c6 (2)
fi

0x151c4:
0x00000000000151c4: mov r9d, 1
0x00000000000151ca: or rbx, 0xffffffffffffffff
0x00000000000151ce: jmp 0x1513b
L := 0x1513b (2)

0x51c4:
if
    0x00000000000051c4: mov edi, 0xc
    0x00000000000051c9: call 0x5c50
    0x00000000000051ce: test al, al
    0x00000000000051d0: je 0x4a56
then
    L := 0x4a56 (5)
else
    if
        0x00000000000051d6: cmp dword ptr [rip + 0x21c15b], 0
        0x00000000000051dd: jne 0x4a56
    then
        L := 0x4a56 (5)
    else
        L := 0x51e3 (3)
    fi
fi

0x71c6:
if
    0x00000000000071c6: cmp rbx, r14
    0x00000000000071c9: jne 0x71a0
then
    0x00000000000071a0: mov r13d, dword ptr [rbx]
    0x00000000000071a3: add rbx, 4
    L := 0x71a7 (2)
else
    0x00000000000071cb: movdqa xmm0, xmmword ptr [rip + 0x21a04d]
    0x00000000000071d3: mov r14d, 0x14
    0x00000000000071d9: mov dword ptr [rsp + 0x88], 0x10000000
    0x00000000000071e4: lea r13, [rip + 0x21a035]
    0x00000000000071eb: lea r15, [rip - 0x1862]
    0x00000000000071f2: movups xmmword ptr [rsp + 8], xmm0
    0x00000000000071f7: movdqa xmm0, xmmword ptr [rip + 0x21a031]
    0x00000000000071ff: movups xmmword ptr [rsp + 0x18], xmm0
    0x0000000000007204: movdqa xmm0, xmmword ptr [rip + 0x21a034]
    0x000000000000720c: movups xmmword ptr [rsp + 0x28], xmm0
    0x0000000000007211: movdqa xmm0, xmmword ptr [rip + 0x21a037]
    0x0000000000007219: movups xmmword ptr [rsp + 0x38], xmm0
    0x000000000000721e: movdqa xmm0, xmmword ptr [rip + 0x21a03a]
    0x0000000000007226: movups xmmword ptr [rsp + 0x48], xmm0
    0x000000000000722b: movdqa xmm0, xmmword ptr [rip + 0x21a03d]
    0x0000000000007233: movups xmmword ptr [rsp + 0x58], xmm0
    0x0000000000007238: movdqa xmm0, xmmword ptr [rip + 0x21a040]
    0x0000000000007240: movups xmmword ptr [rsp + 0x68], xmm0
    0x0000000000007245: movdqa xmm0, xmmword ptr [rip + 0x21a043]
    0x000000000000724d: movups xmmword ptr [rsp + 0x78], xmm0
    0x0000000000007252: jmp 0x7260
    L := 0x7260 (2)
fi

0x51e3:
0x00000000000051e3: mov byte ptr [rip + 0x21c113], 1
0x00000000000051ea: jmp 0x4a56
L := 0x4a56 (5)

0xd200:
if
    0x000000000000d200: sub rsp, 8
    0x000000000000d204: call 0xd220
    0x000000000000d209: test rax, rax
    0x000000000000d20c: je 0xd213
then
    0x000000000000d213: call 0x146d0
    0x000000000000d218: nop dword ptr [rax + rax]
    if
        0x000000000000d220: push r15
        0x000000000000d222: push r14
        0x000000000000d224: mov r15, rdx
        0x000000000000d227: push r13
        0x000000000000d229: push r12
        0x000000000000d22b: mov r14, rdi
        0x000000000000d22e: push rbp
        0x000000000000d22f: push rbx
        0x000000000000d230: mov r12, rsi
        0x000000000000d233: sub rsp, 0x18
        0x000000000000d237: call 0xce10
        0x000000000000d23c: mov r13, rax
        0x000000000000d23f: mov rdi, rax
        0x000000000000d242: mov rbp, r13
        0x000000000000d245: sub rbp, r14
        0x000000000000d248: call 0xce70
        0x000000000000d24d: add rbp, rax
        0x000000000000d250: test rax, rax
        0x000000000000d253: mov rbx, rax
        0x000000000000d256: je 0xd264
    then
        L := 0xd264 (2)
    else
        0x000000000000d258: cmp byte ptr [r13 + rax - 1], 0x2f
        0x000000000000d25e: setne bl
        0x000000000000d261: movzx ebx, bl
        L := 0xd264 (2)
    fi
else
    0x000000000000d20e: add rsp, 8
    0x000000000000d212: ret 
    L := 0x0 (130)
fi

0xf212:
if
    0x000000000000f212: movzx eax, byte ptr [r15]
    0x000000000000f216: test al, al
    0x000000000000f218: je 0xf227
then
    L := 0xf227 (2)
else
    0x000000000000f21a: cmp al, 0x7f
    0x000000000000f21c: movzx ebp, al
    0x000000000000f21f: cmovae rbp, r12
    0x000000000000f223: add r15, 1
    L := 0xf227 (2)
fi

0xf227:
if
    0x000000000000f227: cmp rbp, r12
    0x000000000000f22a: jbe 0xf1d8
then
    if
        0x000000000000f1d8: mov rax, qword ptr [rsp + 0x18]
        0x000000000000f1dd: sub r12, rbp
        0x000000000000f1e0: sub r8, rbp
        0x000000000000f1e3: mov rdi, r8
        0x000000000000f1e6: mov rdx, rbp
        0x000000000000f1e9: lea rsi, [rax + r12]
        0x000000000000f1ed: call 0x3b80
        0x000000000000f1f2: test r12, r12
        0x000000000000f1f5: mov r8, rax
        0x000000000000f1f8: je 0xf708
    then
        0x000000000000f708: mov ebx, dword ptr [rsp + 0x20]
        0x000000000000f70c: mov r15, rax
        0x000000000000f70f: mov r12d, r14d
        0x000000000000f712: jmp 0xf09a
        L := 0xf09a (3)
    else
        0x000000000000f1fe: sub r8, r13
        0x000000000000f201: mov rdx, r13
        0x000000000000f204: mov rsi, rbx
        0x000000000000f207: mov rdi, r8
        0x000000000000f20a: call 0x3b80
        0x000000000000f20f: mov r8, rax
        L := 0xf212 (2)
    fi
else
    0x000000000000f22c: mov eax, r14d
    0x000000000000f22f: mov r15, r8
    0x000000000000f232: mov r14, r12
    0x000000000000f235: mov rsi, qword ptr [rsp + 0x18]
    0x000000000000f23a: sub r15, r14
    0x000000000000f23d: mov rdx, r14
    0x000000000000f240: mov rdi, r15
    0x000000000000f243: mov ebx, dword ptr [rsp + 0x20]
    0x000000000000f247: mov r12d, eax
    0x000000000000f24a: call 0x3b80
    0x000000000000f24f: jmp 0xf09a
    L := 0xf09a (3)
fi

0x15240:
if
    0x0000000000015240: test edi, edi
    0x0000000000015242: push rbx
    0x0000000000015243: je 0x15290
then
    0x0000000000015290: call 0x37f0
    0x0000000000015295: mov dword ptr [rax], 0x5f
    0x000000000001529b: mov eax, 0xffffffff
    0x00000000000152a0: pop rbx
    0x00000000000152a1: ret 
    L := 0x0 (130)
else
    if
        0x0000000000015245: cmp edi, 0xa
        0x0000000000015248: mov eax, edi
        0x000000000001524a: je 0x15250
    then
        if
            0x0000000000015250: mov rdx, qword ptr [rsi]
            0x0000000000015253: lea rdi, [rip + 0x2a51]
            0x000000000001525a: mov rbx, rsi
            0x000000000001525d: mov ecx, 0xa
            0x0000000000015262: mov rsi, rdx
            0x0000000000015265: repe cmpsb byte ptr [rsi], byte ptr [rdi]
            0x0000000000015267: jne 0x1524c
        then
            L := 0x1524c (2)
        else
            0x0000000000015269: mov rdi, rdx
            0x000000000001526c: call 0x3da0
            0x0000000000015271: mov qword ptr [rbx], 0
            0x0000000000015278: call 0x37f0
            0x000000000001527d: mov dword ptr [rax], 0x3d
            0x0000000000015283: mov eax, 0xffffffff
            0x0000000000015288: pop rbx
            0x0000000000015289: ret 
            L := 0x0 (130)
        fi
    else
        L := 0x1524c (2)
    fi
fi

0x1524c:
0x000000000001524c: pop rbx
0x000000000001524d: ret 
L := 0x0 (130)

0x524d:
if
    0x000000000000524d: lea rdx, [rip + 0x1192c]
    0x0000000000005254: lea rsi, [rip + 0x21a725]
    0x000000000000525b: mov ecx, 4
    0x0000000000005260: mov rdi, r14
    0x0000000000005263: call 0xc2c0
    0x0000000000005268: test rax, rax
    0x000000000000526b: js 0x5606
then
    0x0000000000005606: lea rdi, [rip + 0x12894]
    0x000000000000560d: mov rdx, rax
    0x0000000000005610: mov rsi, r14
    0x0000000000005613: lea rbp, [rip + 0x128a8]
    0x000000000000561a: call 0xc3e0
    0x000000000000561f: mov rbx, qword ptr [rip + 0x21ac9a]
    0x0000000000005626: lea rsi, [rip + 0x1287f]
    0x000000000000562d: mov edx, 5
    0x0000000000005632: xor edi, edi
    0x0000000000005634: call 0x3930
    0x0000000000005639: mov rsi, rbx
    0x000000000000563c: mov rdi, rax
    0x000000000000563f: lea rbx, [rip + 0x21a33a]
    0x0000000000005646: call 0x3af0
    0x000000000000564b: lea rcx, [rip + 0x12737]
    L := 0x5652 (2)
else
    if
        0x0000000000005271: cmp rax, 1
        0x0000000000005275: je 0x5731
    then
        0x0000000000005731: lea rax, [rip + 0x127b2]
        0x0000000000005738: mov qword ptr [rip + 0x21a909], rax
        0x000000000000573f: mov qword ptr [rip + 0x21a8fa], rax
        0x0000000000005746: jmp 0x52d3
        L := 0x52d3 (8)
    else
        if
            0x000000000000527b: jle 0x5578
        then
            if
                0x0000000000005578: test rax, rax
                0x000000000000557b: jne 0x52d3
            then
                L := 0x52d3 (8)
            else
                0x0000000000005581: lea rax, [rip + 0x1294a]
                0x0000000000005588: mov qword ptr [rip + 0x21aab9], rax
                0x000000000000558f: mov qword ptr [rip + 0x21aaaa], rax
                0x0000000000005596: jmp 0x52d3
                L := 0x52d3 (8)
            fi
        else
            if
                0x0000000000005281: cmp rax, 2
                0x0000000000005285: je 0x574b
            then
                0x000000000000574b: lea rax, [rip + 0x127a7]
                0x0000000000005752: mov qword ptr [rip + 0x21a8e7], rax
                0x0000000000005759: lea rax, [rip + 0x1278d]
                0x0000000000005760: mov qword ptr [rip + 0x21a8e1], rax
                0x0000000000005767: jmp 0x52d3
                L := 0x52d3 (8)
            else
                if
                    0x000000000000528b: cmp rax, 3
                    0x000000000000528f: jne 0x52d3
                then
                    L := 0x52d3 (8)
                else
                    if
                        0x0000000000005291: mov edi, 2
                        0x0000000000005296: call 0xd830
                        0x000000000000529b: test al, al
                        0x000000000000529d: je 0x52d3
                    then
                        L := 0x52d3 (8)
                    else
                        0x000000000000529f: mov rsi, qword ptr [rip + 0x21ad9a]
                        0x00000000000052a6: mov edx, 2
                        0x00000000000052ab: xor edi, edi
                        0x00000000000052ad: call 0x3930
                        0x00000000000052b2: mov rsi, qword ptr [rip + 0x21ad8f]
                        0x00000000000052b9: mov edx, 2
                        0x00000000000052be: xor edi, edi
                        0x00000000000052c0: mov qword ptr [rip + 0x21ad79], rax
                        0x00000000000052c7: call 0x3930
                        0x00000000000052cc: mov qword ptr [rip + 0x21ad75], rax
                        L := 0x52d3 (8)
                    fi
                fi
            fi
        fi
    fi
fi

0x7260:
if
    0x0000000000007260: mov esi, r14d
    0x0000000000007263: mov rdi, r13
    0x0000000000007266: call 0x3dc0
    0x000000000000726b: test eax, eax
    0x000000000000726d: je 0x728f
then
    L := 0x728f (2)
else
    0x000000000000726f: lea rax, [rip - 0x8f6]
    0x0000000000007276: cmp r14d, 0x14
    0x000000000000727a: mov rsi, r12
    0x000000000000727d: mov edi, r14d
    0x0000000000007280: cmovne rax, r15
    0x0000000000007284: xor edx, edx
    0x0000000000007286: mov qword ptr [rsp], rax
    0x000000000000728a: call 0x3860
    L := 0x728f (2)
fi

0xd264:
if
    0x000000000000d264: movzx eax, byte ptr [r12]
    0x000000000000d269: cmp al, 0x2f
    0x000000000000d26b: mov byte ptr [rsp + 0xf], al
    0x000000000000d26f: je 0xd2e0
then
    L := 0xd2e0 (2)
else
    L := 0xd271 (2)
fi

0xd271:
if
    0x000000000000d271: mov rdi, r12
    0x000000000000d274: call 0x3950
    0x000000000000d279: lea rdi, [rbx + rbp + 1]
    0x000000000000d27e: mov qword ptr [rsp], rax
    0x000000000000d282: add rdi, rax
    0x000000000000d285: call 0x3e78
    0x000000000000d28a: test rax, rax
    0x000000000000d28d: mov r13, rax
    0x000000000000d290: je 0xd2ce
then
    L := 0xd2ce (2)
else
    if
        0x000000000000d292: mov rdi, rax
        0x000000000000d295: mov rdx, rbp
        0x000000000000d298: mov rsi, r14
        0x000000000000d29b: call 0x3d00
        0x000000000000d2a0: test r15, r15
        0x000000000000d2a3: mov byte ptr [rax], 0x2f
        0x000000000000d2a6: lea rdi, [rax + rbx]
        0x000000000000d2aa: je 0xd2bf
    then
        L := 0xd2bf (2)
    else
        0x000000000000d2ac: xor eax, eax
        0x000000000000d2ae: cmp byte ptr [rsp + 0xf], 0x2f
        0x000000000000d2b3: mov rcx, rdi
        0x000000000000d2b6: sete al
        0x000000000000d2b9: sub rcx, rax
        0x000000000000d2bc: mov qword ptr [r15], rcx
        L := 0xd2bf (2)
    fi
fi

0x728f:
if
    0x000000000000728f: cmp rbp, rbx
    0x0000000000007292: jne 0x7258
then
    0x0000000000007258: mov r14d, dword ptr [rbp]
    0x000000000000725c: add rbp, 4
    L := 0x7260 (2)
else
    0x0000000000007294: jmp 0x713f
    L := 0x713f (3)
fi

0x152b0:
0x00000000000152b0: push rbx
0x00000000000152b1: mov rbx, rsi
0x00000000000152b4: call 0x3ba0
0x00000000000152b9: mov rsi, rbx
0x00000000000152bc: mov edi, eax
0x00000000000152be: pop rbx
0x00000000000152bf: jmp 0x15240
L := 0x15240 (2)

0xd2bf:
0x000000000000d2bf: mov rdx, qword ptr [rsp]
0x000000000000d2c3: mov rsi, r12
0x000000000000d2c6: call 0x3d00
0x000000000000d2cb: mov byte ptr [rax], 0
L := 0xd2ce (2)

0xd2ce:
0x000000000000d2ce: add rsp, 0x18
0x000000000000d2d2: mov rax, r13
0x000000000000d2d5: pop rbx
0x000000000000d2d6: pop rbp
0x000000000000d2d7: pop r12
0x000000000000d2d9: pop r13
0x000000000000d2db: pop r14
0x000000000000d2dd: pop r15
0x000000000000d2df: ret 
L := 0x0 (130)

0x152d0:
0x00000000000152d0: push rbx
0x00000000000152d1: mov rbx, rsi
0x00000000000152d4: call 0x3b10
0x00000000000152d9: mov rsi, rbx
0x00000000000152dc: mov edi, eax
0x00000000000152de: pop rbx
0x00000000000152df: jmp 0x15240
L := 0x15240 (2)

0x52d3:
0x00000000000052d3: call 0x5d20
0x00000000000052d8: jmp 0x4a42
L := 0x4a42 (4)

0xd2e0:
if
    0x000000000000d2e0: add r12, 1
    0x000000000000d2e4: cmp byte ptr [r12], 0x2f
    0x000000000000d2e9: jne 0xd271
then
    L := 0xd271 (2)
else
    0x000000000000d2eb: jmp 0xd2e0
    L := 0xd2e0 (2)
fi

0x72f0:
if
    0x00000000000072f0: cmp byte ptr [rip + 0x21a019], 0
    0x00000000000072f7: push rbx
    0x00000000000072f8: mov rbx, rdi
    0x00000000000072fb: je 0x7320
then
    if
        0x0000000000007320: mov edi, 1
        0x0000000000007325: mov byte ptr [rip + 0x219fe4], 1
        0x000000000000732c: call 0x3bd0
        0x0000000000007331: test eax, eax
        0x0000000000007333: jns 0x7340
    then
        0x0000000000007340: mov edi, 1
        0x0000000000007345: call 0x70d0
        0x000000000000734a: call 0x72a0
        0x000000000000734f: jmp 0x72fd
        L := 0x72fd (3)
    else
        0x0000000000007335: call 0x72a0
        0x000000000000733a: jmp 0x72fd
        L := 0x72fd (3)
    fi
else
    L := 0x72fd (3)
fi

0xf2f0:
if
    0x000000000000f2f0: test dl, dl
    0x000000000000f2f2: je 0xf579
then
    if
        0x000000000000f579: test eax, eax
        0x000000000000f57b: jne 0xf306
    then
        L := 0xf306 (2)
    else
        L := 0xf581 (2)
    fi
else
    if
        0x000000000000f2f8: lea r9d, [rax + 1]
        0x000000000000f2fc: cmp r9d, 0xa
        0x000000000000f300: je 0xf601
    then
        if
            0x000000000000f601: lea rsi, [r10 + 1]
            0x000000000000f605: cmp rsi, 0xa
            0x000000000000f609: je 0xf660
        then
            0x000000000000f660: mov r8, qword ptr [rsp + 8]
            0x000000000000f665: jmp 0xf347
            L := 0xf347 (7)
        else
            0x000000000000f60b: xor edi, edi
            0x000000000000f60d: jmp 0xf581
            L := 0xf581 (2)
        fi
    else
        L := 0xf306 (2)
    fi
fi

0x72fd:
0x00000000000072fd: mov rdi, qword ptr [rbx + 8]
0x0000000000007301: mov rsi, qword ptr [rbx]
0x0000000000007304: mov edx, 1
0x0000000000007309: pop rbx
0x000000000000730a: mov rcx, qword ptr [rip + 0x218f77]
0x0000000000007311: jmp 0x3c80
0x0000000000003c80: jmp qword ptr [rip + 0x21c24a]
L := 0x21fed0 (1)

0xf306:
0x000000000000f306: add r9d, 0x30
L := 0xf30a (2)

0xf30a:
if
    0x000000000000f30a: mov rax, qword ptr [rsp]
    0x000000000000f30e: lea r8, [rax + 0x286]
    0x000000000000f315: mov byte ptr [rax + 0x286], r9b
    0x000000000000f31c: mov eax, ebp
    0x000000000000f31e: sub r8, rbp
    0x000000000000f321: cmp ebp, 8
    0x000000000000f324: jae 0xf5b1
then
    if
        0x000000000000f5b1: mov rax, qword ptr [r14]
        0x000000000000f5b4: mov r9, r14
        0x000000000000f5b7: mov qword ptr [r8], rax
        0x000000000000f5ba: mov eax, ebp
        0x000000000000f5bc: mov rdx, qword ptr [r14 + rax - 8]
        0x000000000000f5c1: mov qword ptr [r8 + rax - 8], rdx
        0x000000000000f5c6: lea rdx, [r8 + 8]
        0x000000000000f5ca: mov rax, r8
        0x000000000000f5cd: and rdx, 0xfffffffffffffff8
        0x000000000000f5d1: sub rax, rdx
        0x000000000000f5d4: sub r9, rax
        0x000000000000f5d7: add eax, ebp
        0x000000000000f5d9: and eax, 0xfffffff8
        0x000000000000f5dc: cmp eax, 8
        0x000000000000f5df: jb 0xf347
    then
        L := 0xf347 (7)
    else
        0x000000000000f5e5: and eax, 0xfffffff8
        0x000000000000f5e8: xor edi, edi
        L := 0xf5ea (2)
    fi
else
    if
        0x000000000000f32a: test bpl, 4
        0x000000000000f32e: jne 0xf6b6
    then
        0x000000000000f6b6: mov edx, dword ptr [r14]
        0x000000000000f6b9: mov dword ptr [r8], edx
        0x000000000000f6bc: mov edx, dword ptr [r14 + rax - 4]
        0x000000000000f6c1: mov dword ptr [r8 + rax - 4], edx
        0x000000000000f6c6: jmp 0xf347
        L := 0xf347 (7)
    else
        if
            0x000000000000f334: test eax, eax
            0x000000000000f336: je 0xf347
        then
            L := 0xf347 (7)
        else
            if
                0x000000000000f338: movzx edx, byte ptr [r14]
                0x000000000000f33c: test al, 2
                0x000000000000f33e: mov byte ptr [r8], dl
                0x000000000000f341: jne 0xf6d0
            then
                L := 0xf6d0 (2)
            else
                L := 0xf347 (7)
            fi
        fi
    fi
fi

0x15310:
if
    0x0000000000015310: push r13
    0x0000000000015312: push r12
    0x0000000000015314: mov r13, rsi
    0x0000000000015317: push rbp
    0x0000000000015318: push rbx
    0x0000000000015319: mov rbx, rdi
    0x000000000001531c: mov r12, rdx
    0x000000000001531f: sub rsp, 0x18
    0x0000000000015323: mov rax, qword ptr fs:[0x28]
    0x000000000001532c: mov qword ptr [rsp + 8], rax
    0x0000000000015331: xor eax, eax
    0x0000000000015333: lea rax, [rsp + 4]
    0x0000000000015338: test rdi, rdi
    0x000000000001533b: cmove rbx, rax
    0x000000000001533f: mov rdi, rbx
    0x0000000000015342: call 0x3990
    0x0000000000015347: cmp rax, -3
    0x000000000001534b: mov rbp, rax
    0x000000000001534e: jbe 0x15370
then
    L := 0x15370 (4)
else
    if
        0x0000000000015350: test r12, r12
        0x0000000000015353: je 0x15370
    then
        L := 0x15370 (4)
    else
        if
            0x0000000000015355: xor edi, edi
            0x0000000000015357: call 0xd830
            0x000000000001535c: test al, al
            0x000000000001535e: jne 0x15370
        then
            L := 0x15370 (4)
        else
            0x0000000000015360: movzx eax, byte ptr [r13]
            0x0000000000015365: mov ebp, 1
            0x000000000001536a: mov dword ptr [rbx], eax
            0x000000000001536c: nop dword ptr [rax]
            L := 0x15370 (4)
        fi
    fi
fi

0xf347:
0x000000000000f347: xor edi, edi
0x000000000000f349: xor r9d, r9d
0x000000000000f34c: nop dword ptr [rax]
L := 0xf350 (5)

0xf350:
if
    0x000000000000f350: cmp r15d, 1
    0x000000000000f354: je 0xf4d0
then
    if
        0x000000000000f4d0: mov rax, rsi
        0x000000000000f4d3: movsxd rdi, edi
        0x000000000000f4d6: and eax, 1
        0x000000000000f4d9: add rax, rdi
        0x000000000000f4dc: setne al
        0x000000000000f4df: movzx eax, al
        0x000000000000f4e2: add r9d, eax
        0x000000000000f4e5: cmp r9d, 5
        0x000000000000f4e9: jg 0xf366
    then
        L := 0xf366 (2)
    else
        0x000000000000f4ef: jmp 0xf380
        L := 0xf380 (6)
    fi
else
    if
        0x000000000000f35a: test r15d, r15d
        0x000000000000f35d: jne 0xf380
    then
        L := 0xf380 (6)
    else
        if
            0x000000000000f35f: add edi, r9d
            0x000000000000f362: test edi, edi
            0x000000000000f364: jle 0xf380
        then
            L := 0xf380 (6)
        else
            L := 0xf366 (2)
        fi
    fi
fi

0x7360:
0x0000000000007360: push rbp
0x0000000000007361: push rbx
0x0000000000007362: sub rsp, 0x98
0x0000000000007369: mov rax, qword ptr fs:[0x28]
0x0000000000007372: mov qword ptr [rsp + 0x88], rax
0x000000000000737a: xor eax, eax
0x000000000000737c: mov rbp, rsp
0x000000000000737f: jmp 0x73d9
L := 0x73d9 (2)

0xf366:
if
    0x000000000000f366: add rsi, 1
    0x000000000000f36a: test ecx, ecx
    0x000000000000f36c: je 0xf380
then
    L := 0xf380 (6)
else
    if
        0x000000000000f36e: mov eax, dword ptr [rsp + 0x34]
        0x000000000000f372: cmp rax, rsi
        0x000000000000f375: je 0xf540
    then
        if
            0x000000000000f540: cmp ebx, 8
            0x000000000000f543: je 0xf380
        then
            L := 0xf380 (6)
        else
            if
                0x000000000000f549: add ebx, 1
                0x000000000000f54c: test r12b, 8
                0x000000000000f550: je 0xf612
            then
                if
                    0x000000000000f612: mov rax, rbp
                    0x000000000000f615: mov byte ptr [r8 - 1], 0x30
                    0x000000000000f61a: not rax
                    0x000000000000f61d: add r8, rax
                    0x000000000000f620: cmp ebp, 8
                    0x000000000000f623: mov eax, ebp
                    0x000000000000f625: jae 0xf66a
                then
                    if
                        0x000000000000f66a: mov rax, qword ptr [r14]
                        0x000000000000f66d: lea rcx, [r8 + 8]
                        0x000000000000f671: and rcx, 0xfffffffffffffff8
                        0x000000000000f675: mov qword ptr [r8], rax
                        0x000000000000f678: mov eax, ebp
                        0x000000000000f67a: mov rdx, qword ptr [r14 + rax - 8]
                        0x000000000000f67f: mov qword ptr [r8 + rax - 8], rdx
                        0x000000000000f684: mov rax, r8
                        0x000000000000f687: sub rax, rcx
                        0x000000000000f68a: sub r14, rax
                        0x000000000000f68d: add eax, ebp
                        0x000000000000f68f: and eax, 0xfffffff8
                        0x000000000000f692: cmp eax, 8
                        0x000000000000f695: jb 0xf556
                    then
                        L := 0xf556 (7)
                    else
                        0x000000000000f69b: and eax, 0xfffffff8
                        0x000000000000f69e: xor edx, edx
                        L := 0xf6a0 (2)
                    fi
                else
                    if
                        0x000000000000f627: and ebp, 4
                        0x000000000000f62a: jne 0xf6e1
                    then
                        0x000000000000f6e1: mov edx, dword ptr [r14]
                        0x000000000000f6e4: mov dword ptr [r8], edx
                        0x000000000000f6e7: mov edx, dword ptr [r14 + rax - 4]
                        0x000000000000f6ec: mov dword ptr [r8 + rax - 4], edx
                        0x000000000000f6f1: jmp 0xf556
                        L := 0xf556 (7)
                    else
                        if
                            0x000000000000f630: test eax, eax
                            0x000000000000f632: je 0xf556
                        then
                            L := 0xf556 (7)
                        else
                            if
                                0x000000000000f638: movzx edx, byte ptr [r14]
                                0x000000000000f63c: test al, 2
                                0x000000000000f63e: mov byte ptr [r8], dl
                                0x000000000000f641: je 0xf556
                            then
                                L := 0xf556 (7)
                            else
                                0x000000000000f647: movzx edx, word ptr [r14 + rax - 2]
                                0x000000000000f64d: mov word ptr [r8 + rax - 2], dx
                                0x000000000000f653: jmp 0xf556
                                L := 0xf556 (7)
                            fi
                        fi
                    fi
                fi
            else
                L := 0xf556 (7)
            fi
        fi
    else
        0x000000000000f37b: nop dword ptr [rax + rax]
        L := 0xf380 (6)
    fi
fi

0x15370:
if
    0x0000000000015370: mov rdx, qword ptr [rsp + 8]
    0x0000000000015375: xor rdx, qword ptr fs:[0x28]
    0x000000000001537e: mov rax, rbp
    0x0000000000015381: jne 0x1538e
then
    0x000000000001538e: call 0x3970
    0x0000000000015393: nop word ptr cs:[rax + rax]
    0x000000000001539d: nop dword ptr [rax]
    0x00000000000153a0: lea rsi, [rip + 0x5b48]
    0x00000000000153a7: sub rsp, 8
    0x00000000000153ab: mov edx, 5
    0x00000000000153b0: xor edi, edi
    0x00000000000153b2: call 0x3930
    0x00000000000153b7: mov rdi, qword ptr [rip + 0x20af02]
    0x00000000000153be: lea rdx, [rip + 0x57cb]
    0x00000000000153c5: mov rcx, rax
    0x00000000000153c8: mov esi, 1
    0x00000000000153cd: xor eax, eax
    0x00000000000153cf: call 0x3df0
    0x00000000000153d4: mov edi, dword ptr [rip + 0x20ae1e]
    0x00000000000153da: call 0x3dd0
    0x00000000000153df: nop 
    if
        0x00000000000153e0: test byte ptr [rdi + 0x50], 1
        0x00000000000153e4: mov rax, qword ptr [rdi + 0x38]
        0x00000000000153e8: jne 0x153f0
    then
        0x00000000000153f0: mov rdi, qword ptr [rdi + 0x48]
        0x00000000000153f4: jmp rax
        L := 0x0 (130)
    else
        0x00000000000153ea: mov rdi, rsi
        0x00000000000153ed: jmp rax
        L := 0x0 (130)
    fi
else
    0x0000000000015383: add rsp, 0x18
    0x0000000000015387: pop rbx
    0x0000000000015388: pop rbp
    0x0000000000015389: pop r12
    0x000000000001538b: pop r13
    0x000000000001538d: ret 
    L := 0x0 (130)
fi

0xf380:
0x000000000000f380: mov r15, r8
0x000000000000f383: movabs rcx, 0xcccccccccccccccd
0x000000000000f38d: nop dword ptr [rax]
L := 0xf390 (2)

0x7388:
if
    0x0000000000007388: mov rdi, qword ptr [rip + 0x218ef9]
    0x000000000000738f: call 0x3e00
    0x0000000000007394: lea rsi, [rip + 0x219e85]
    0x000000000000739b: xor edi, edi
    0x000000000000739d: mov rdx, rbp
    0x00000000000073a0: call 0x37b0
    0x00000000000073a5: mov ebx, dword ptr [rip + 0x219e6d]
    0x00000000000073ab: mov eax, dword ptr [rip + 0x219e63]
    0x00000000000073b1: test eax, eax
    0x00000000000073b3: je 0x7418
then
    0x0000000000007418: xor esi, esi
    0x000000000000741a: mov edi, ebx
    0x000000000000741c: call 0x3b30
    0x0000000000007421: jmp 0x73c3
    L := 0x73c3 (2)
else
    0x00000000000073b5: sub eax, 1
    0x00000000000073b8: mov ebx, 0x13
    0x00000000000073bd: mov dword ptr [rip + 0x219e51], eax
    L := 0x73c3 (2)
fi

0xf390:
if
    0x000000000000f390: mov rax, rsi
    0x000000000000f393: sub r15, 1
    0x000000000000f397: mul rcx
    0x000000000000f39a: shr rdx, 3
    0x000000000000f39e: lea rax, [rdx + rdx*4]
    0x000000000000f3a2: add rax, rax
    0x000000000000f3a5: sub rsi, rax
    0x000000000000f3a8: add esi, 0x30
    0x000000000000f3ab: test rdx, rdx
    0x000000000000f3ae: mov byte ptr [r15], sil
    0x000000000000f3b1: mov rsi, rdx
    0x000000000000f3b4: jne 0xf390
then
    L := 0xf390 (2)
else
    0x000000000000f3b6: jmp 0xf090
    L := 0xf090 (3)
fi

0x133a0:
if
    0x00000000000133a0: push r15
    0x00000000000133a2: push r14
    0x00000000000133a4: movsxd r15, edi
    0x00000000000133a7: push r13
    0x00000000000133a9: push r12
    0x00000000000133ab: mov r14, rdx
    0x00000000000133ae: push rbp
    0x00000000000133af: push rbx
    0x00000000000133b0: mov rbp, rcx
    0x00000000000133b3: sub rsp, 0x28
    0x00000000000133b7: mov qword ptr [rsp + 8], rsi
    0x00000000000133bc: call 0x37f0
    0x00000000000133c1: mov r13, rax
    0x00000000000133c4: mov eax, dword ptr [rax]
    0x00000000000133c6: test r15d, r15d
    0x00000000000133c9: mov rbx, qword ptr [rip + 0x20ce70]
    0x00000000000133d0: mov dword ptr [rsp + 0x18], eax
    0x00000000000133d4: js 0x13541
then
    0x0000000000013541: call 0x37e0
    L := 0x13546 (2)
else
    if
        0x00000000000133da: cmp dword ptr [rip + 0x20ce57], r15d
        0x00000000000133e1: jg 0x13445
    then
        L := 0x13445 (2)
    else
        if
            0x00000000000133e3: cmp r15d, 0x7ffffffe
            0x00000000000133ea: ja 0x13546
        then
            L := 0x13546 (2)
        else
            if
                0x00000000000133f0: lea r12d, [r15 + 1]
                0x00000000000133f4: lea rax, [rip + 0x20ce55]
                0x00000000000133fb: movsxd rsi, r12d
                0x00000000000133fe: shl rsi, 4
                0x0000000000013402: cmp rbx, rax
                0x0000000000013405: je 0x13520
            then
                0x0000000000013520: xor edi, edi
                0x0000000000013522: call 0x144e0
                0x0000000000013527: movdqa xmm0, xmmword ptr [rip + 0x20cd21]
                0x000000000001352f: mov rbx, rax
                0x0000000000013532: mov qword ptr [rip + 0x20cd07], rax
                0x0000000000013539: movups xmmword ptr [rax], xmm0
                0x000000000001353c: jmp 0x1341d
                L := 0x1341d (2)
            else
                0x000000000001340b: mov rdi, rbx
                0x000000000001340e: call 0x144e0
                0x0000000000013413: mov rbx, rax
                0x0000000000013416: mov qword ptr [rip + 0x20ce23], rax
                L := 0x1341d (2)
            fi
        fi
    fi
fi

0x73c3:
0x00000000000073c3: mov edi, ebx
0x00000000000073c5: call 0x37d0
0x00000000000073ca: xor edx, edx
0x00000000000073cc: mov rsi, rbp
0x00000000000073cf: mov edi, 2
0x00000000000073d4: call 0x37b0
L := 0x73d9 (2)

0x53c7:
0x00000000000053c7: mov qword ptr [rip + 0x21ac72], r14
0x00000000000053ce: mov qword ptr [rip + 0x21ac73], r15
0x00000000000053d5: jmp 0x52d3
L := 0x52d3 (8)

0x73d9:
if
    0x00000000000073d9: mov eax, dword ptr [rip + 0x219e39]
    0x00000000000073df: test eax, eax
    0x00000000000073e1: jne 0x73ed
then
    L := 0x73ed (2)
else
    if
        0x00000000000073e3: mov eax, dword ptr [rip + 0x219e2b]
        0x00000000000073e9: test eax, eax
        0x00000000000073eb: je 0x7428
    then
        if
            0x0000000000007428: mov rax, qword ptr [rsp + 0x88]
            0x0000000000007430: xor rax, qword ptr fs:[0x28]
            0x0000000000007439: jne 0x7445
        then
            if
                0x0000000000007445: call 0x3970
                0x000000000000744a: nop word ptr [rax + rax]
                0x0000000000007450: cmp byte ptr [rip + 0x219ebb], 0
                0x0000000000007457: je 0x7470
            then
                0x0000000000007470: ret 
                L := 0x0 (130)
            else
                if
                    0x0000000000007459: sub rsp, 8
                    0x000000000000745d: mov edi, 4
                    0x0000000000007462: call 0x5c50
                    0x0000000000007467: test al, al
                    0x0000000000007469: jne 0x7478
                then
                    0x0000000000007478: lea rdi, [rip + 0x218be1]
                    0x000000000000747f: call 0x72f0
                    0x0000000000007484: lea rdi, [rip + 0x218c15]
                    0x000000000000748b: call 0x72f0
                    0x0000000000007490: lea rdi, [rip + 0x218bd9]
                    0x0000000000007497: add rsp, 8
                    0x000000000000749b: jmp 0x72f0
                    L := 0x72f0 (3)
                else
                    0x000000000000746b: add rsp, 8
                    0x000000000000746f: ret 
                    L := 0x0 (130)
                fi
            fi
        else
            0x000000000000743b: add rsp, 0x98
            0x0000000000007442: pop rbx
            0x0000000000007443: pop rbp
            0x0000000000007444: ret 
            L := 0x0 (130)
        fi
    else
        L := 0x73ed (2)
    fi
fi

0xf3dd:
if
    0x000000000000f3dd: imul rax, rdx
    0x000000000000f3e1: cmp rcx, rax
    0x000000000000f3e4: jbe 0xf0a9
then
    L := 0xf0a9 (4)
else
    if
        0x000000000000f3ea: add ebx, 1
        0x000000000000f3ed: cmp ebx, 8
        0x000000000000f3f0: jne 0xf3dd
    then
        L := 0xf3dd (2)
    else
        0x000000000000f3f2: jmp 0xf0a9
        L := 0xf0a9 (4)
    fi
fi

0x73ed:
if
    0x00000000000073ed: cmp byte ptr [rip + 0x219f1c], 0
    0x00000000000073f4: je 0x7388
then
    L := 0x7388 (2)
else
    0x00000000000073f6: lea rdi, [rip + 0x218c63]
    0x00000000000073fd: call 0x72f0
    0x0000000000007402: lea rdi, [rip + 0x218c67]
    0x0000000000007409: call 0x72f0
    0x000000000000740e: jmp 0x7388
    L := 0x7388 (2)
fi

0x15400:
if
    0x0000000000015400: test byte ptr [rdi + 0x50], 1
    0x0000000000015404: mov rax, qword ptr [rdi + 0x40]
    0x0000000000015408: jne 0x15410
then
    0x0000000000015410: mov rdi, qword ptr [rdi + 0x48]
    0x0000000000015414: jmp rax
    L := 0x0 (130)
else
    0x000000000001540a: mov rdi, rsi
    0x000000000001540d: jmp rax
    L := 0x0 (130)
fi

0x540a:
if
    0x000000000000540a: mov rax, qword ptr [rsp + 0x28]
    0x000000000000540f: movzx edx, byte ptr [rax]
    0x0000000000005412: cmp dl, 0x2a
    0x0000000000005415: je 0x55a3
then
    if
        0x00000000000055a3: mov edi, 0x28
        0x00000000000055a8: lea rbx, [rsp + 0x28]
        0x00000000000055ad: call 0x14480
        0x00000000000055b2: mov r14, rax
        0x00000000000055b5: mov rax, qword ptr [rip + 0x21bd4c]
        0x00000000000055bc: mov edx, 1
        0x00000000000055c1: mov rcx, r14
        0x00000000000055c4: mov rsi, rbx
        0x00000000000055c7: mov rdi, r12
        0x00000000000055ca: add qword ptr [rsp + 0x28], 1
        0x00000000000055d0: mov qword ptr [rip + 0x21bd31], r14
        0x00000000000055d7: mov qword ptr [r14 + 0x20], rax
        0x00000000000055db: mov rax, qword ptr [rsp + 0x30]
        0x00000000000055e0: mov qword ptr [r14 + 8], rax
        0x00000000000055e4: call 0x59c0
        0x00000000000055e9: test al, al
        0x00000000000055eb: jne 0x56a3
    then
        L := 0x56a3 (2)
    else
        L := 0x55f1 (5)
    fi
else
    if
        0x000000000000541b: cmp dl, 0x3a
        0x000000000000541e: je 0x577b
    then
        0x000000000000577b: add rax, 1
        0x000000000000577f: mov qword ptr [rsp + 0x28], rax
        0x0000000000005784: jmp 0x540a
        L := 0x540a (4)
    else
        if
            0x0000000000005424: test dl, dl
            0x0000000000005426: je 0x5789
        then
            0x0000000000005789: mov ebp, dword ptr [rsp + 8]
            0x000000000000578d: mov rbx, qword ptr [rsp + 0x10]
            0x0000000000005792: jmp 0x551b
            L := 0x551b (2)
        else
            if
                0x000000000000542c: lea rdx, [rax + 1]
                0x0000000000005430: mov qword ptr [rsp + 0x28], rdx
                0x0000000000005435: movzx edx, byte ptr [rax]
                0x0000000000005438: mov byte ptr [rsp + 0x45], dl
                0x000000000000543c: cmp byte ptr [rax + 1], 0
                0x0000000000005440: je 0x55f1
            then
                L := 0x55f1 (5)
            else
                if
                    0x0000000000005446: lea rdx, [rax + 2]
                    0x000000000000544a: mov qword ptr [rsp + 0x28], rdx
                    0x000000000000544f: movzx edx, byte ptr [rax + 1]
                    0x0000000000005453: mov byte ptr [rsp + 0x46], dl
                    0x0000000000005457: lea rdx, [rax + 3]
                    0x000000000000545b: mov qword ptr [rsp + 0x28], rdx
                    0x0000000000005460: cmp byte ptr [rax + 2], 0x3d
                    0x0000000000005464: jne 0x55f1
                then
                    L := 0x55f1 (5)
                else
                    0x000000000000546a: lea rsi, [rip + 0x12921]
                    0x0000000000005471: lea rbx, [rsp + 0x45]
                    0x0000000000005476: xor ebp, ebp
                    L := 0x5478 (2)
                fi
            fi
        fi
    fi
fi

0x1341d:
0x000000000001341d: movsxd rdi, dword ptr [rip + 0x20ce14]
0x0000000000013424: mov edx, r12d
0x0000000000013427: xor esi, esi
0x0000000000013429: sub edx, edi
0x000000000001342b: shl rdi, 4
0x000000000001342f: movsxd rdx, edx
0x0000000000013432: add rdi, rbx
0x0000000000013435: shl rdx, 4
0x0000000000013439: call 0x3a60
0x000000000001343e: mov dword ptr [rip + 0x20cdf3], r12d
L := 0x13445 (2)

0x9420:
if
    0x0000000000009420: cmp dword ptr [rip + 0x217f11], 4
    0x0000000000009427: ja 0x9778
then
    0x0000000000009778: ret 
    L := 0x0 (130)
else
    0x000000000000942d: push r15
    0x000000000000942f: push r14
    0x0000000000009431: lea rdx, [rip + 0xd14c]
    0x0000000000009438: push r13
    0x000000000000943a: push r12
    0x000000000000943c: push rbp
    0x000000000000943d: push rbx
    0x000000000000943e: sub rsp, 0x38
    0x0000000000009442: mov eax, dword ptr [rip + 0x217ef0]
    0x0000000000009448: movsxd rax, dword ptr [rdx + rax*4]
    0x000000000000944c: add rax, rdx
    0x000000000000944f: jmp rax
    L := 0x0 (130)
fi

0x15433:
if
    0x0000000000015433: test rsi, rsi
    0x0000000000015436: mov eax, 0xfe0
    0x000000000001543b: mov qword ptr [rbx + 0x30], r12
    0x000000000001543f: cmove rsi, rax
    0x0000000000015443: mov rdi, rbx
    0x0000000000015446: mov qword ptr [rbx], rsi
    0x0000000000015449: call 0x153e0
    0x000000000001544e: test rax, rax
    0x0000000000015451: mov qword ptr [rbx + 8], rax
    0x0000000000015455: je 0x1549d
then
    0x000000000001549d: call qword ptr [rip + 0x20adbd]
    0x00000000000154a3: nop dword ptr [rax]
    0x00000000000154a6: nop word ptr cs:[rax + rax]
    0x00000000000154b0: and byte ptr [rdi + 0x50], 0xfe
    0x00000000000154b4: mov qword ptr [rdi + 0x38], rcx
    0x00000000000154b8: mov qword ptr [rdi + 0x40], r8
    0x00000000000154bc: jmp 0x15420
    if
        0x0000000000015420: test rdx, rdx
        0x0000000000015423: push r12
        0x0000000000015425: push rbp
        0x0000000000015426: push rbx
        0x0000000000015427: mov rbx, rdi
        0x000000000001542a: je 0x15490
    then
        0x0000000000015490: mov r12d, 0xf
        0x0000000000015496: mov ebp, 0x10
        0x000000000001549b: jmp 0x15433
        L := 0x15433 (2)
    else
        0x000000000001542c: lea r12, [rdx - 1]
        0x0000000000015430: mov rbp, rdx
        L := 0x15433 (2)
    fi
else
    0x0000000000015457: lea rdx, [rax + r12 + 0x10]
    0x000000000001545c: neg rbp
    0x000000000001545f: and rbp, rdx
    0x0000000000015462: mov rdx, qword ptr [rbx]
    0x0000000000015465: mov qword ptr [rbx + 0x10], rbp
    0x0000000000015469: mov qword ptr [rbx + 0x18], rbp
    0x000000000001546d: add rdx, rax
    0x0000000000015470: mov qword ptr [rax], rdx
    0x0000000000015473: mov qword ptr [rbx + 0x20], rdx
    0x0000000000015477: mov qword ptr [rax + 8], 0
    0x000000000001547f: mov eax, 1
    0x0000000000015484: and byte ptr [rbx + 0x50], 0xf9
    0x0000000000015488: pop rbx
    0x0000000000015489: pop rbp
    0x000000000001548a: pop r12
    0x000000000001548c: ret 
    L := 0x0 (130)
fi

0x13445:
if
    0x0000000000013445: mov eax, dword ptr [rbp + 4]
    0x0000000000013448: shl r15, 4
    0x000000000001344c: sub rsp, 8
    0x0000000000013450: add rbx, r15
    0x0000000000013453: lea r15, [rbp + 8]
    0x0000000000013457: mov r8d, dword ptr [rbp]
    0x000000000001345b: mov r11, qword ptr [rbx]
    0x000000000001345e: mov r12, qword ptr [rbx + 8]
    0x0000000000013462: mov rcx, r14
    0x0000000000013465: or eax, 1
    0x0000000000013468: mov dword ptr [rsp + 0x24], eax
    0x000000000001346c: push qword ptr [rbp + 0x30]
    0x000000000001346f: mov r9d, eax
    0x0000000000013472: push qword ptr [rbp + 0x28]
    0x0000000000013475: push r15
    0x0000000000013477: mov rsi, r11
    0x000000000001347a: mov rdx, qword ptr [rsp + 0x28]
    0x000000000001347f: mov rdi, r12
    0x0000000000013482: mov qword ptr [rsp + 0x30], r11
    0x0000000000013487: call 0x12160
    0x000000000001348c: add rsp, 0x20
    0x0000000000013490: mov r11, qword ptr [rsp + 0x10]
    0x0000000000013495: cmp r11, rax
    0x0000000000013498: ja 0x13501
then
    L := 0x13501 (2)
else
    if
        0x000000000001349a: lea rsi, [rax + 1]
        0x000000000001349e: lea rax, [rip + 0x20df7b]
        0x00000000000134a5: cmp r12, rax
        0x00000000000134a8: mov qword ptr [rbx], rsi
        0x00000000000134ab: je 0x134bf
    then
        L := 0x134bf (2)
    else
        0x00000000000134ad: mov rdi, r12
        0x00000000000134b0: mov qword ptr [rsp + 0x10], rsi
        0x00000000000134b5: call 0x3e70
        0x00000000000134ba: mov rsi, qword ptr [rsp + 0x10]
        L := 0x134bf (2)
    fi
fi

0xf453:
0x000000000000f453: fdivp st(1)
0x000000000000f455: sub rsp, 0x10
0x000000000000f459: lea rcx, [rip + 0xafa0]
0x000000000000f460: mov r14, qword ptr [rsp + 0x10]
0x000000000000f465: mov rdx, -1
0x000000000000f46c: mov esi, 1
0x000000000000f471: xor eax, eax
0x000000000000f473: xor ebp, ebp
0x000000000000f475: mov rdi, r14
0x000000000000f478: fstp xword ptr [rsp]
0x000000000000f47b: call 0x3e60
0x000000000000f480: mov rdi, r14
0x000000000000f483: call 0x3950
0x000000000000f488: pop r10
0x000000000000f48a: mov r14, rax
0x000000000000f48d: pop r11
0x000000000000f48f: jmp 0xf070
L := 0xf070 (4)

0x5478:
if
    0x0000000000005478: mov rdi, rbx
    0x000000000000547b: call 0x3b20
    0x0000000000005480: test eax, eax
    0x0000000000005482: je 0x56e1
then
    if
        0x00000000000056e1: lea rax, [rip + 0x21a978]
        0x00000000000056e8: movsxd rcx, ebp
        0x00000000000056eb: lea rsi, [rsp + 0x28]
        0x00000000000056f0: shl rcx, 4
        0x00000000000056f4: xor edx, edx
        0x00000000000056f6: mov rdi, r12
        0x00000000000056f9: add rcx, rax
        0x00000000000056fc: mov rax, qword ptr [rsp + 0x30]
        0x0000000000005701: mov qword ptr [rcx + 8], rax
        0x0000000000005705: call 0x59c0
        0x000000000000570a: test al, al
        0x000000000000570c: jne 0x540a
    then
        L := 0x540a (4)
    else
        0x0000000000005712: jmp 0x5495
        L := 0x5495 (2)
    fi
else
    if
        0x0000000000005488: add rbp, 1
        0x000000000000548c: mov rsi, qword ptr [r15 + rbp*8]
        0x0000000000005490: test rsi, rsi
        0x0000000000005493: jne 0x5478
    then
        L := 0x5478 (2)
    else
        L := 0x5495 (2)
    fi
fi

0x5495:
0x0000000000005495: mov rdi, rbx
0x0000000000005498: mov ebp, dword ptr [rsp + 8]
0x000000000000549c: mov rbx, qword ptr [rsp + 0x10]
0x00000000000054a1: call 0x13ce0
0x00000000000054a6: lea rsi, [rip + 0x12a70]
0x00000000000054ad: mov r14, rax
0x00000000000054b0: mov edx, 5
0x00000000000054b5: xor edi, edi
0x00000000000054b7: call 0x3930
0x00000000000054bc: mov rcx, r14
0x00000000000054bf: mov rdx, rax
0x00000000000054c2: xor esi, esi
0x00000000000054c4: xor edi, edi
0x00000000000054c6: xor eax, eax
0x00000000000054c8: call 0x3d20
L := 0x54cd (2)

0xf4a0:
if
    0x000000000000f4a0: fld xword ptr [rip + 0xafaa]
    0x000000000000f4a6: fucomip st(2)
    0x000000000000f4a8: jbe 0xf453
then
    L := 0xf453 (4)
else
    0x000000000000f4aa: fstp dword ptr [rsp + 0x18]
    0x000000000000f4ae: sub rsp, 0x10
    0x000000000000f4b2: mov edi, r15d
    0x000000000000f4b5: fstp xword ptr [rsp]
    0x000000000000f4b8: call 0xec40
    0x000000000000f4bd: pop rbp
    0x000000000000f4be: pop r14
    0x000000000000f4c0: fld dword ptr [rsp + 0x18]
    0x000000000000f4c4: jmp 0xf453
    L := 0xf453 (4)
fi

0x74a0:
if
    0x00000000000074a0: push r15
    0x00000000000074a2: push r14
    0x00000000000074a4: mov r14, rdx
    0x00000000000074a7: push r13
    0x00000000000074a9: push r12
    0x00000000000074ab: mov r12, rsi
    0x00000000000074ae: push rbp
    0x00000000000074af: push rbx
    0x00000000000074b0: mov ebx, ecx
    0x00000000000074b2: sub rsp, 0x68
    0x00000000000074b6: mov r13, qword ptr [rdi]
    0x00000000000074b9: mov qword ptr [rsp + 0x30], rdi
    0x00000000000074be: mov rdi, rdx
    0x00000000000074c1: mov qword ptr [rsp + 0x20], r8
    0x00000000000074c6: mov rcx, qword ptr fs:[0x28]
    0x00000000000074cf: mov qword ptr [rsp + 0x58], rcx
    0x00000000000074d4: xor ecx, ecx
    0x00000000000074d6: mov qword ptr [rsp + 0x38], r9
    0x00000000000074db: call 0x13590
    0x00000000000074e0: cmp eax, 2
    0x00000000000074e3: setbe al
    0x00000000000074e6: and al, byte ptr [rip + 0x219dec]
    0x00000000000074ec: mov byte ptr [rsp + 0x2f], al
    0x00000000000074f0: jne 0x7650
then
    if
        0x0000000000007650: test ebx, ebx
        0x0000000000007652: jne 0x78fe
    then
        L := 0x78fe (2)
    else
        if
            0x0000000000007658: mov rdi, r12
            0x000000000000765b: call 0x3950
            0x0000000000007660: cmp rax, 0x1fff
            0x0000000000007666: mov rbp, rax
            0x0000000000007669: lea rdx, [rax + 1]
            0x000000000000766d: ja 0x7898
        then
            0x0000000000007898: mov rdi, rdx
            0x000000000000789b: mov qword ptr [rsp + 8], rdx
            0x00000000000078a0: call 0x14480
            0x00000000000078a5: mov rdx, qword ptr [rsp + 8]
            0x00000000000078aa: mov r13, rax
            0x00000000000078ad: jmp 0x7673
            L := 0x7673 (2)
        else
            L := 0x7673 (2)
        fi
    fi
else
    if
        0x00000000000074f6: xor r9d, r9d
        0x00000000000074f9: test ebx, ebx
        0x00000000000074fb: je 0x7570
    then
        0x0000000000007570: mov rdi, r12
        0x0000000000007573: mov r13, r12
        0x0000000000007576: call 0x3950
        0x000000000000757b: mov rbx, rax
        L := 0x757e (2)
    else
        L := 0x74fd (2)
    fi
fi

0x134bf:
0x00000000000134bf: mov rdi, rsi
0x00000000000134c2: mov qword ptr [rsp + 0x10], rsi
0x00000000000134c7: call 0x14480
0x00000000000134cc: sub rsp, 8
0x00000000000134d0: mov qword ptr [rbx + 8], rax
0x00000000000134d4: mov r8d, dword ptr [rbp]
0x00000000000134d8: push qword ptr [rbp + 0x30]
0x00000000000134db: push qword ptr [rbp + 0x28]
0x00000000000134de: mov rcx, r14
0x00000000000134e1: push r15
0x00000000000134e3: mov r9d, dword ptr [rsp + 0x3c]
0x00000000000134e8: mov rdi, rax
0x00000000000134eb: mov rdx, qword ptr [rsp + 0x28]
0x00000000000134f0: mov rsi, qword ptr [rsp + 0x30]
0x00000000000134f5: mov r12, rax
0x00000000000134f8: call 0x12160
0x00000000000134fd: add rsp, 0x20
L := 0x13501 (2)

0x54cd:
0x00000000000054cd: lea rsi, [rip + 0x14d6c]
0x00000000000054d4: mov edx, 5
0x00000000000054d9: xor edi, edi
0x00000000000054db: call 0x3930
0x00000000000054e0: xor esi, esi
0x00000000000054e2: mov rdx, rax
0x00000000000054e5: xor edi, edi
0x00000000000054e7: xor eax, eax
0x00000000000054e9: call 0x3d20
0x00000000000054ee: mov rdi, qword ptr [rip + 0x21be0b]
0x00000000000054f5: call 0x3e70
0x00000000000054fa: mov rdi, qword ptr [rip + 0x21be07]
0x0000000000005501: jmp 0x550f
L := 0x550f (2)

0x154f0:
if
    0x00000000000154f0: push r14
    0x00000000000154f2: push r13
    0x00000000000154f4: xor edx, edx
    0x00000000000154f6: push r12
    0x00000000000154f8: push rbp
    0x00000000000154f9: push rbx
    0x00000000000154fa: mov rbx, qword ptr [rdi + 0x18]
    0x00000000000154fe: sub rbx, qword ptr [rdi + 0x10]
    0x0000000000015502: mov rbp, qword ptr [rdi + 8]
    0x0000000000015506: add rsi, rbx
    0x0000000000015509: mov rcx, rbx
    0x000000000001550c: setb dl
    0x000000000001550f: add rsi, qword ptr [rdi + 0x30]
    0x0000000000015513: setb al
    0x0000000000015516: shr rcx, 3
    0x000000000001551a: cmp qword ptr [rdi], rsi
    0x000000000001551d: lea r12, [rsi + rcx + 0x64]
    0x0000000000015522: cmovae rsi, qword ptr [rdi]
    0x0000000000015526: cmp rsi, r12
    0x0000000000015529: cmovae r12, rsi
    0x000000000001552d: test rdx, rdx
    0x0000000000015530: jne 0x155d5
then
    L := 0x155d5 (3)
else
    if
        0x0000000000015536: movzx eax, al
        0x0000000000015539: test rax, rax
        0x000000000001553c: jne 0x155d5
    then
        L := 0x155d5 (3)
    else
        if
            0x0000000000015542: mov rsi, r12
            0x0000000000015545: mov r13, rdi
            0x0000000000015548: call 0x153e0
            0x000000000001554d: test rax, rax
            0x0000000000015550: mov r14, rax
            0x0000000000015553: je 0x155d5
        then
            L := 0x155d5 (3)
        else
            if
                0x0000000000015559: lea rsi, [rax + r12]
                0x000000000001555d: mov qword ptr [r13 + 8], rax
                0x0000000000015561: mov qword ptr [rax + 8], rbp
                0x0000000000015565: mov rdx, rbx
                0x0000000000015568: mov qword ptr [r13 + 0x20], rsi
                0x000000000001556c: mov qword ptr [rax], rsi
                0x000000000001556f: mov rax, qword ptr [r13 + 0x30]
                0x0000000000015573: mov rsi, qword ptr [r13 + 0x10]
                0x0000000000015577: lea r12, [r14 + rax + 0x10]
                0x000000000001557c: not rax
                0x000000000001557f: and r12, rax
                0x0000000000015582: mov rdi, r12
                0x0000000000015585: call 0x3b80
                0x000000000001558a: test byte ptr [r13 + 0x50], 2
                0x000000000001558f: jne 0x155a6
            then
                L := 0x155a6 (3)
            else
                if
                    0x0000000000015591: mov rax, qword ptr [r13 + 0x30]
                    0x0000000000015595: lea rdx, [rbp + rax + 0x10]
                    0x000000000001559a: not rax
                    0x000000000001559d: and rax, rdx
                    0x00000000000155a0: cmp qword ptr [r13 + 0x10], rax
                    0x00000000000155a4: je 0x155c0
                then
                    0x00000000000155c0: mov rax, qword ptr [rbp + 8]
                    0x00000000000155c4: mov rsi, rbp
                    0x00000000000155c7: mov rdi, r13
                    0x00000000000155ca: mov qword ptr [r14 + 8], rax
                    0x00000000000155ce: call 0x15400
                    0x00000000000155d3: jmp 0x155a6
                    L := 0x155a6 (3)
                else
                    L := 0x155a6 (3)
                fi
            fi
        fi
    fi
fi

0x74fd:
if
    0x00000000000074fd: mov r8, r14
    0x0000000000007500: mov rcx, -1
    0x0000000000007507: mov rdx, r12
    0x000000000000750a: mov esi, 0x2000
    0x000000000000750f: mov rdi, r13
    0x0000000000007512: mov dword ptr [rsp + 8], r9d
    0x0000000000007517: call 0x13660
    0x000000000000751c: cmp rax, 0x1fff
    0x0000000000007522: mov rbx, rax
    0x0000000000007525: mov r9d, dword ptr [rsp + 8]
    0x000000000000752a: ja 0x78b8
then
    0x00000000000078b8: lea r15, [rax + 1]
    0x00000000000078bc: mov rdi, r15
    0x00000000000078bf: call 0x14480
    0x00000000000078c4: mov r8, r14
    0x00000000000078c7: mov rcx, -1
    0x00000000000078ce: mov rdx, r12
    0x00000000000078d1: mov rsi, r15
    0x00000000000078d4: mov rdi, rax
    0x00000000000078d7: mov r13, rax
    0x00000000000078da: call 0x13660
    0x00000000000078df: mov r9d, dword ptr [rsp + 8]
    0x00000000000078e4: jmp 0x7530
    L := 0x7530 (2)
else
    L := 0x7530 (2)
fi

0x13501:
0x0000000000013501: mov eax, dword ptr [rsp + 0x18]
0x0000000000013505: mov dword ptr [r13], eax
0x0000000000013509: add rsp, 0x28
0x000000000001350d: mov rax, r12
0x0000000000013510: pop rbx
0x0000000000013511: pop rbp
0x0000000000013512: pop r12
0x0000000000013514: pop r13
0x0000000000013516: pop r14
0x0000000000013518: pop r15
0x000000000001351a: ret 
L := 0x0 (130)

0x550f:
if
    0x000000000000550f: test rdi, rdi
    0x0000000000005512: jne 0x5503
then
    0x0000000000005503: mov r14, qword ptr [rdi + 0x20]
    0x0000000000005507: call 0x3e70
    0x000000000000550c: mov rdi, r14
    L := 0x550f (2)
else
    0x0000000000005514: mov byte ptr [rip + 0x21bdf7], 0
    L := 0x551b (2)
fi

0x551b:
if
    0x000000000000551b: cmp qword ptr [rip + 0x21abad], 6
    0x0000000000005523: jne 0x5192
then
    L := 0x5192 (6)
else
    if
        0x0000000000005529: mov rdi, qword ptr [rip + 0x21aba8]
        0x0000000000005530: lea rsi, [rip + 0x129fe]
        0x0000000000005537: mov edx, 6
        0x000000000000553c: call 0x3800
        0x0000000000005541: test eax, eax
        0x0000000000005543: jne 0x5192
    then
        L := 0x5192 (6)
    else
        0x0000000000005549: mov byte ptr [rip + 0x21be40], 1
        0x0000000000005550: jmp 0x5192
        L := 0x5192 (6)
    fi
fi

0x7530:
if
    0x0000000000007530: movzx eax, byte ptr [r13]
    0x0000000000007535: mov byte ptr [rsp + 0x2f], 1
    0x000000000000753a: cmp byte ptr [r12], al
    0x000000000000753e: jne 0x755a
then
    L := 0x755a (2)
else
    0x0000000000007540: mov rdi, r12
    0x0000000000007543: mov dword ptr [rsp + 8], r9d
    0x0000000000007548: call 0x3950
    0x000000000000754d: mov r9d, dword ptr [rsp + 8]
    0x0000000000007552: cmp rbx, rax
    0x0000000000007555: setne byte ptr [rsp + 0x2f]
    L := 0x755a (2)
fi

0xf534:
0x000000000000f534: mov qword ptr [rsp + 8], rdx
0x000000000000f539: jmp 0xf117
L := 0xf117 (5)

0x13546:
0x0000000000013546: call 0x146d0
0x000000000001354b: nop dword ptr [rax + rax]
0x0000000000013550: push r12
0x0000000000013552: push rbp
0x0000000000013553: push rbx
0x0000000000013554: mov rbx, rdi
0x0000000000013557: call 0x37f0
0x000000000001355c: mov r12d, dword ptr [rax]
0x000000000001355f: mov rbp, rax
0x0000000000013562: lea rax, [rip + 0x20dfb7]
0x0000000000013569: test rbx, rbx
0x000000000001356c: mov esi, 0x38
0x0000000000013571: cmove rbx, rax
0x0000000000013575: mov rdi, rbx
0x0000000000013578: call 0x14680
0x000000000001357d: mov dword ptr [rbp], r12d
0x0000000000013581: pop rbx
0x0000000000013582: pop rbp
0x0000000000013583: pop r12
0x0000000000013585: ret 
L := 0x0 (130)

0xf556:
0x000000000000f556: lea r15, [r8 - 1]
0x000000000000f55a: mov byte ptr [r8 - 1], 0x31
0x000000000000f55f: jmp 0xf090
L := 0xf090 (3)

0x755a:
if
    0x000000000000755a: test r9d, r9d
    0x000000000000755d: je 0x757e
then
    L := 0x757e (2)
else
    0x000000000000755f: mov rbp, rbx
    0x0000000000007562: jmp 0x7683
    L := 0x7683 (2)
fi

0xf568:
0x000000000000f568: mov r8, qword ptr [rsp + 8]
0x000000000000f56d: jmp 0xf350
L := 0xf350 (5)

0x757e:
if
    0x000000000000757e: cmp qword ptr [rsp + 0x20], 0
    0x0000000000007584: je 0x7638
then
    if
        0x0000000000007638: cmp byte ptr [rip + 0x219d69], 0
        0x000000000000763f: jne 0x75e0
    then
        L := 0x75e0 (5)
    else
        0x0000000000007641: mov rax, qword ptr [rsp + 0x38]
        0x0000000000007646: mov byte ptr [rax], 0
        0x0000000000007649: jmp 0x7605
        L := 0x7605 (3)
    fi
else
    if
        0x000000000000758a: call 0x3940
        0x000000000000758f: cmp rax, 1
        0x0000000000007593: ja 0x7798
    then
        if
            0x0000000000007798: xor edx, edx
            0x000000000000779a: mov rsi, rbx
            0x000000000000779d: mov rdi, r13
            0x00000000000077a0: call 0x101b0
            0x00000000000077a5: movsxd rbp, eax
            0x00000000000077a8: movzx eax, byte ptr [rip + 0x219bf9]
            0x00000000000077af: test al, al
            0x00000000000077b1: je 0x75f1
        then
            L := 0x75f1 (5)
        else
            0x00000000000077b7: jmp 0x75e0
            L := 0x75e0 (5)
        fi
    else
        if
            0x0000000000007599: lea r12, [r13 + rbx]
            0x000000000000759e: cmp r13, r12
            0x00000000000075a1: jae 0x78f2
        then
            0x00000000000078f2: xor ebp, ebp
            0x00000000000078f4: jmp 0x75d5
            L := 0x75d5 (3)
        else
            0x00000000000075a7: call 0x3e50
            0x00000000000075ac: xor ebp, ebp
            0x00000000000075ae: mov rcx, qword ptr [rax]
            0x00000000000075b1: mov rax, r13
            0x00000000000075b4: nop dword ptr [rax]
            L := 0x75b8 (2)
        fi
    fi
fi

0xf581:
if
    0x000000000000f581: test r12b, 8
    0x000000000000f585: jne 0xf5a4
then
    0x000000000000f5a4: mov r8, qword ptr [rsp + 8]
    0x000000000000f5a9: xor r9d, r9d
    0x000000000000f5ac: jmp 0xf350
    L := 0xf350 (5)
else
    0x000000000000f587: mov r9d, 0x30
    0x000000000000f58d: jmp 0xf30a
    L := 0xf30a (2)
fi

0x13590:
0x0000000000013590: lea rax, [rip + 0x20df89]
0x0000000000013597: test rdi, rdi
0x000000000001359a: cmove rdi, rax
0x000000000001359e: mov eax, dword ptr [rdi]
0x00000000000135a0: ret 
L := 0x0 (130)

0x155a6:
0x00000000000155a6: and byte ptr [r13 + 0x50], 0xfd
0x00000000000155ab: add rbx, r12
0x00000000000155ae: mov qword ptr [r13 + 0x10], r12
0x00000000000155b2: mov qword ptr [r13 + 0x18], rbx
0x00000000000155b6: pop rbx
0x00000000000155b7: pop rbp
0x00000000000155b8: pop r12
0x00000000000155ba: pop r13
0x00000000000155bc: pop r14
0x00000000000155be: ret 
L := 0x0 (130)

0x135b0:
0x00000000000135b0: lea rax, [rip + 0x20df69]
0x00000000000135b7: test rdi, rdi
0x00000000000135ba: cmove rdi, rax
0x00000000000135be: mov dword ptr [rdi], esi
0x00000000000135c0: ret 
L := 0x0 (130)

0x75b8:
if
    0x00000000000075b8: movzx edx, byte ptr [rax]
    0x00000000000075bb: movzx edx, word ptr [rcx + rdx*2]
    0x00000000000075bf: and dx, 0x4000
    0x00000000000075c4: cmp dx, 1
    0x00000000000075c8: sbb rbp, -1
    0x00000000000075cc: add rax, 1
    0x00000000000075d0: cmp r12, rax
    0x00000000000075d3: jne 0x75b8
then
    L := 0x75b8 (2)
else
    L := 0x75d5 (3)
fi

0x135d0:
0x00000000000135d0: lea rax, [rip + 0x20df49]
0x00000000000135d7: test rdi, rdi
0x00000000000135da: mov ecx, esi
0x00000000000135dc: cmove rdi, rax
0x00000000000135e0: mov eax, esi
0x00000000000135e2: and ecx, 0x1f
0x00000000000135e5: shr al, 5
0x00000000000135e8: movzx eax, al
0x00000000000135eb: lea rdi, [rdi + rax*4 + 8]
0x00000000000135f0: mov esi, dword ptr [rdi]
0x00000000000135f2: mov eax, esi
0x00000000000135f4: shr eax, cl
0x00000000000135f6: xor edx, eax
0x00000000000135f8: and eax, 1
0x00000000000135fb: and edx, 1
0x00000000000135fe: shl edx, cl
0x0000000000013600: xor edx, esi
0x0000000000013602: mov dword ptr [rdi], edx
0x0000000000013604: ret 
L := 0x0 (130)

0x155d5:
if
    0x00000000000155d5: call qword ptr [rip + 0x20ac85]
    0x00000000000155db: nop dword ptr [rax + rax]
    0x00000000000155e0: mov rax, qword ptr [rdi + 8]
    0x00000000000155e4: test rax, rax
    0x00000000000155e7: je 0x15616
then
    0x0000000000015616: ret 
    L := 0x0 (130)
else
    0x00000000000155e9: nop dword ptr [rax]
    L := 0x155f0 (2)
fi

0x75d5:
if
    0x00000000000075d5: movzx eax, byte ptr [rip + 0x219dcc]
    0x00000000000075dc: test al, al
    0x00000000000075de: je 0x75f1
then
    L := 0x75f1 (5)
else
    L := 0x75e0 (5)
fi

0x75e0:
0x00000000000075e0: movzx eax, byte ptr [rip + 0x219dc2]
0x00000000000075e7: xor eax, 1
0x00000000000075ea: or al, byte ptr [rsp + 0x2f]
0x00000000000075ee: xor eax, 1
L := 0x75f1 (5)

0xf5ea:
if
    0x000000000000f5ea: mov r10d, edi
    0x000000000000f5ed: add edi, 8
    0x000000000000f5f0: mov r11, qword ptr [r9 + r10]
    0x000000000000f5f4: cmp edi, eax
    0x000000000000f5f6: mov qword ptr [rdx + r10], r11
    0x000000000000f5fa: jb 0xf5ea
then
    L := 0xf5ea (2)
else
    0x000000000000f5fc: jmp 0xf347
    L := 0xf347 (7)
fi

0x155f0:
if
    0x00000000000155f0: cmp rsi, rax
    0x00000000000155f3: jbe 0x155fa
then
    L := 0x155fa (2)
else
    if
        0x00000000000155f5: cmp qword ptr [rax], rsi
        0x00000000000155f8: jae 0x15610
    then
        0x0000000000015610: mov eax, 1
        0x0000000000015615: ret 
        L := 0x0 (130)
    else
        L := 0x155fa (2)
    fi
fi

0x55f1:
0x00000000000055f1: mov ebp, dword ptr [rsp + 8]
0x00000000000055f5: mov rbx, qword ptr [rsp + 0x10]
0x00000000000055fa: jmp 0x54cd
L := 0x54cd (2)

0x75f1:
if
    0x00000000000075f1: mov rcx, qword ptr [rsp + 0x38]
    0x00000000000075f6: mov byte ptr [rcx], al
    0x00000000000075f8: mov rax, qword ptr [rsp + 0x20]
    0x00000000000075fd: test rax, rax
    0x0000000000007600: je 0x7605
then
    L := 0x7605 (3)
else
    0x0000000000007602: mov qword ptr [rax], rbp
    L := 0x7605 (3)
fi

0x155fa:
if
    0x00000000000155fa: mov rax, qword ptr [rax + 8]
    0x00000000000155fe: test rax, rax
    0x0000000000015601: jne 0x155f0
then
    L := 0x155f0 (2)
else
    0x0000000000015603: xor eax, eax
    0x0000000000015605: ret 
    L := 0x0 (130)
fi

0x7605:
if
    0x0000000000007605: mov rax, qword ptr [rsp + 0x30]
    0x000000000000760a: mov qword ptr [rax], r13
    0x000000000000760d: mov rax, rbx
    0x0000000000007610: mov rbx, qword ptr [rsp + 0x58]
    0x0000000000007615: xor rbx, qword ptr fs:[0x28]
    0x000000000000761e: jne 0x78f9
then
    0x00000000000078f9: call 0x3970
    L := 0x78fe (2)
else
    0x0000000000007624: add rsp, 0x68
    0x0000000000007628: pop rbx
    0x0000000000007629: pop rbp
    0x000000000000762a: pop r12
    0x000000000000762c: pop r13
    0x000000000000762e: pop r14
    0x0000000000007630: pop r15
    0x0000000000007632: ret 
    L := 0x0 (130)
fi

0x5652:
if
    0x0000000000005652: mov rdi, qword ptr [rip + 0x21ac67]
    0x0000000000005659: add rbx, 8
    0x000000000000565d: xor eax, eax
    0x000000000000565f: mov rdx, rbp
    0x0000000000005662: mov esi, 1
    0x0000000000005667: call 0x3df0
    0x000000000000566c: mov rcx, qword ptr [rbx]
    0x000000000000566f: test rcx, rcx
    0x0000000000005672: jne 0x5652
then
    L := 0x5652 (2)
else
    0x0000000000005674: mov rbx, qword ptr [rip + 0x21ac45]
    0x000000000000567b: lea rsi, [rip + 0x14af6]
    0x0000000000005682: xor edi, edi
    0x0000000000005684: mov edx, 5
    0x0000000000005689: call 0x3930
    0x000000000000568e: mov rsi, rbx
    0x0000000000005691: mov rdi, rax
    0x0000000000005694: call 0x3af0
    L := 0x5699 (2)
fi

0x13660:
0x0000000000013660: push r15
0x0000000000013662: push r14
0x0000000000013664: lea rax, [rip + 0x20deb5]
0x000000000001366b: push r13
0x000000000001366d: push r12
0x000000000001366f: mov r13, rdi
0x0000000000013672: push rbp
0x0000000000013673: push rbx
0x0000000000013674: mov rbx, r8
0x0000000000013677: mov r14, rsi
0x000000000001367a: mov r15, rdx
0x000000000001367d: sub rsp, 0x18
0x0000000000013681: test r8, r8
0x0000000000013684: cmove rbx, rax
0x0000000000013688: mov qword ptr [rsp + 8], rcx
0x000000000001368d: call 0x37f0
0x0000000000013692: mov r12d, dword ptr [rax]
0x0000000000013695: mov rbp, rax
0x0000000000013698: lea rax, [rbx + 8]
0x000000000001369c: sub rsp, 8
0x00000000000136a0: mov r9d, dword ptr [rbx + 4]
0x00000000000136a4: push qword ptr [rbx + 0x30]
0x00000000000136a7: mov r8d, dword ptr [rbx]
0x00000000000136aa: push qword ptr [rbx + 0x28]
0x00000000000136ad: mov rdx, r15
0x00000000000136b0: push rax
0x00000000000136b1: mov rcx, qword ptr [rsp + 0x28]
0x00000000000136b6: mov rsi, r14
0x00000000000136b9: mov rdi, r13
0x00000000000136bc: call 0x12160
0x00000000000136c1: mov dword ptr [rbp], r12d
0x00000000000136c5: add rsp, 0x38
0x00000000000136c9: pop rbx
0x00000000000136ca: pop rbp
0x00000000000136cb: pop r12
0x00000000000136cd: pop r13
0x00000000000136cf: pop r14
0x00000000000136d1: pop r15
0x00000000000136d3: ret 
L := 0x0 (130)

0x7673:
0x0000000000007673: mov rsi, r12
0x0000000000007676: mov rdi, r13
0x0000000000007679: call 0x3b80
0x000000000000767e: mov byte ptr [rsp + 0x2f], 0
L := 0x7683 (2)

0x7683:
if
    0x0000000000007683: lea rbx, [r13 + rbp]
    0x0000000000007688: call 0x3940
    0x000000000000768d: cmp rax, 1
    0x0000000000007691: mov qword ptr [rsp + 8], rbx
    0x0000000000007696: jbe 0x7850
then
    if
        0x0000000000007850: cmp r13, qword ptr [rsp + 8]
        0x0000000000007855: jae 0x787b
    then
        L := 0x787b (2)
    else
        0x0000000000007857: call 0x3e50
        0x000000000000785c: mov rdx, r13
        0x000000000000785f: nop 
        L := 0x7860 (2)
    fi
else
    if
        0x000000000000769c: cmp r13, rbx
        0x000000000000769f: jae 0x78e9
    then
        0x00000000000078e9: xor ebx, ebx
        0x00000000000078eb: xor ebp, ebp
        0x00000000000078ed: jmp 0x75d5
        L := 0x75d5 (3)
    else
        0x00000000000076a5: lea rax, [rsp + 0x4c]
        0x00000000000076aa: lea r12, [rsp + 0x50]
        0x00000000000076af: mov rbx, r13
        0x00000000000076b2: mov r15, r13
        0x00000000000076b5: xor ebp, ebp
        0x00000000000076b7: mov qword ptr [rsp + 0x18], rax
        0x00000000000076bc: nop dword ptr [rax]
        L := 0x76c0 (2)
    fi
fi

0x5699:
0x0000000000005699: mov edi, 2
0x000000000000569e: call 0xbb20
L := 0x56a3 (2)

0xf6a0:
if
    0x000000000000f6a0: mov esi, edx
    0x000000000000f6a2: add edx, 8
    0x000000000000f6a5: mov rdi, qword ptr [r14 + rsi]
    0x000000000000f6a9: cmp edx, eax
    0x000000000000f6ab: mov qword ptr [rcx + rsi], rdi
    0x000000000000f6af: jb 0xf6a0
then
    L := 0xf6a0 (2)
else
    0x000000000000f6b1: jmp 0xf556
    L := 0xf556 (7)
fi

0x56a3:
if
    0x00000000000056a3: mov rax, qword ptr [rsp + 0x28]
    0x00000000000056a8: lea rdx, [rax + 1]
    0x00000000000056ac: mov qword ptr [rsp + 0x28], rdx
    0x00000000000056b1: cmp byte ptr [rax], 0x3d
    0x00000000000056b4: jne 0x55f1
then
    L := 0x55f1 (5)
else
    if
        0x00000000000056ba: mov rax, qword ptr [rsp + 0x30]
        0x00000000000056bf: lea rcx, [r14 + 0x10]
        0x00000000000056c3: xor edx, edx
        0x00000000000056c5: mov rsi, rbx
        0x00000000000056c8: mov rdi, r12
        0x00000000000056cb: mov qword ptr [r14 + 0x18], rax
        0x00000000000056cf: call 0x59c0
        0x00000000000056d4: test al, al
        0x00000000000056d6: jne 0x540a
    then
        L := 0x540a (4)
    else
        0x00000000000056dc: jmp 0x55f1
        L := 0x55f1 (5)
    fi
fi

0x76c0:
if
    0x00000000000076c0: movzx eax, byte ptr [r15]
    0x00000000000076c4: cmp al, 0x3f
    0x00000000000076c6: jg 0x77f0
then
    if
        0x00000000000077f0: cmp al, 0x41
        0x00000000000077f2: jl 0x76e0
    then
        L := 0x76e0 (3)
    else
        if
            0x00000000000077f8: cmp al, 0x5f
            0x00000000000077fa: jle 0x7808
        then
            L := 0x7808 (4)
        else
            if
                0x00000000000077fc: lea edx, [rax - 0x61]
                0x00000000000077ff: cmp dl, 0x1d
                0x0000000000007802: ja 0x76e0
            then
                L := 0x76e0 (3)
            else
                L := 0x7808 (4)
            fi
        fi
    fi
else
    if
        0x00000000000076cc: cmp al, 0x25
        0x00000000000076ce: jge 0x7808
    then
        L := 0x7808 (4)
    else
        if
            0x00000000000076d4: lea edx, [rax - 0x20]
            0x00000000000076d7: cmp dl, 3
            0x00000000000076da: jbe 0x7808
        then
            L := 0x7808 (4)
        else
            L := 0x76e0 (3)
        fi
    fi
fi

0xf6d0:
0x000000000000f6d0: movzx edx, word ptr [r14 + rax - 2]
0x000000000000f6d6: mov word ptr [r8 + rax - 2], dx
0x000000000000f6dc: jmp 0xf347
L := 0xf347 (7)

0x76e0:
0x00000000000076e0: mov qword ptr [rsp + 0x50], 0
0x00000000000076e9: nop dword ptr [rax]
L := 0x76f0 (2)

0x76f0:
if
    0x00000000000076f0: mov rdx, qword ptr [rsp + 8]
    0x00000000000076f5: mov rdi, qword ptr [rsp + 0x18]
    0x00000000000076fa: mov rcx, r12
    0x00000000000076fd: mov rsi, r15
    0x0000000000007700: lea r14, [rbx + 1]
    0x0000000000007704: sub rdx, r15
    0x0000000000007707: call 0x15310
    0x000000000000770c: cmp rax, -1
    0x0000000000007710: je 0x7820
then
    0x0000000000007820: add r15, 1
    0x0000000000007824: mov byte ptr [rbx], 0x3f
    0x0000000000007827: add rbp, 1
    L := 0x782b (2)
else
    if
        0x0000000000007716: cmp rax, -2
        0x000000000000771a: je 0x7838
    then
        0x0000000000007838: mov byte ptr [rbx], 0x3f
        0x000000000000783b: add rbp, 1
        0x000000000000783f: mov r15, qword ptr [rsp + 8]
        0x0000000000007844: jmp 0x782b
        L := 0x782b (2)
    else
        if
            0x0000000000007720: test rax, rax
            0x0000000000007723: mov edi, dword ptr [rsp + 0x4c]
            0x0000000000007727: mov qword ptr [rsp + 0x10], rax
            0x000000000000772c: je 0x77d0
        then
            if
                0x00000000000077d0: call 0x3c00
                0x00000000000077d5: test eax, eax
                0x00000000000077d7: lea rcx, [r15 + 1]
                0x00000000000077db: js 0x77c0
            then
                L := 0x77c0 (2)
            else
                0x00000000000077dd: movzx edx, byte ptr [r15]
                0x00000000000077e1: mov r15, rcx
                0x00000000000077e4: mov byte ptr [rbx], dl
                0x00000000000077e6: mov rbx, r14
                0x00000000000077e9: jmp 0x775f
                L := 0x775f (2)
            fi
        else
            if
                0x0000000000007732: call 0x3c00
                0x0000000000007737: mov rdx, qword ptr [rsp + 0x10]
                0x000000000000773c: test eax, eax
                0x000000000000773e: lea rcx, [r15 + rdx]
                0x0000000000007742: js 0x77c0
            then
                L := 0x77c0 (2)
            else
                0x0000000000007744: mov rdi, rbx
                0x0000000000007747: nop word ptr [rax + rax]
                L := 0x7750 (2)
            fi
        fi
    fi
fi

0xf720:
if
    0x000000000000f720: push r13
    0x000000000000f722: push r12
    0x000000000000f724: mov r13, rsi
    0x000000000000f727: push rbp
    0x000000000000f728: push rbx
    0x000000000000f729: mov r12, rdx
    0x000000000000f72c: mov rbx, rdi
    0x000000000000f72f: sub rsp, 0x18
    0x000000000000f733: mov rax, qword ptr fs:[0x28]
    0x000000000000f73c: mov qword ptr [rsp + 8], rax
    0x000000000000f741: xor eax, eax
    0x000000000000f743: test rdi, rdi
    0x000000000000f746: je 0xf860
then
    if
        0x000000000000f860: lea rdi, [rip + 0x8601]
        0x000000000000f867: call 0x37a0
        0x000000000000f86c: test rax, rax
        0x000000000000f86f: mov rbx, rax
        0x000000000000f872: jne 0xf74c
    then
        L := 0xf74c (3)
    else
        if
            0x000000000000f878: lea rdi, [rip + 0xab8d]
            0x000000000000f87f: call 0x37a0
            0x000000000000f884: test rax, rax
            0x000000000000f887: mov rbx, rax
            0x000000000000f88a: jne 0xf74c
        then
            L := 0xf74c (3)
        else
            if
                0x000000000000f890: lea rdi, [rip + 0xab7f]
                0x000000000000f897: call 0x37a0
                0x000000000000f89c: test rax, rax
                0x000000000000f89f: je 0xf8ea
            then
                0x000000000000f8ea: mov qword ptr [r12], 0x400
                0x000000000000f8f2: xor eax, eax
                0x000000000000f8f4: mov dword ptr [r13], 0
                0x000000000000f8fc: jmp 0xf795
                L := 0xf795 (5)
            else
                0x000000000000f8a1: mov qword ptr [r12], 0x200
                0x000000000000f8a9: xor eax, eax
                0x000000000000f8ab: mov dword ptr [r13], 0
                0x000000000000f8b3: jmp 0xf795
                L := 0xf795 (5)
            fi
        fi
    fi
else
    L := 0xf74c (3)
fi

0xf74c:
if
    0x000000000000f74c: xor ebp, ebp
    0x000000000000f74e: cmp byte ptr [rbx], 0x27
    0x000000000000f751: jne 0xf75c
then
    L := 0xf75c (2)
else
    0x000000000000f753: add rbx, 1
    0x000000000000f757: mov ebp, 4
    L := 0xf75c (2)
fi

0x7750:
if
    0x0000000000007750: mov rsi, r15
    0x0000000000007753: movsb byte ptr [rdi], byte ptr [rsi]
    0x0000000000007754: cmp rsi, rcx
    0x0000000000007757: mov r15, rsi
    0x000000000000775a: jne 0x7750
then
    L := 0x7750 (2)
else
    0x000000000000775c: add rbx, rdx
    L := 0x775f (2)
fi

0xf75c:
if
    0x000000000000f75c: lea rdx, [rip + 0xacd5]
    0x000000000000f763: lea rsi, [rip + 0x210246]
    0x000000000000f76a: mov ecx, 4
    0x000000000000f76f: mov rdi, rbx
    0x000000000000f772: call 0xc2c0
    0x000000000000f777: test eax, eax
    0x000000000000f779: js 0xf7b8
then
    if
        0x000000000000f7b8: lea r8, [rip + 0xac67]
        0x000000000000f7bf: xor edx, edx
        0x000000000000f7c1: mov rsi, rsp
        0x000000000000f7c4: mov rcx, r12
        0x000000000000f7c7: mov rdi, rbx
        0x000000000000f7ca: call 0x14e20
        0x000000000000f7cf: test eax, eax
        0x000000000000f7d1: jne 0xf818
    then
        0x000000000000f818: mov rdx, qword ptr [r12]
        0x000000000000f81c: mov dword ptr [r13], 0
        L := 0xf824 (2)
    else
        if
            0x000000000000f7d3: movzx esi, byte ptr [rbx]
            0x000000000000f7d6: lea edx, [rsi - 0x30]
            0x000000000000f7d9: cmp dl, 9
            0x000000000000f7dc: jbe 0xf808
        then
            L := 0xf808 (4)
        else
            if
                0x000000000000f7de: mov rcx, qword ptr [rsp]
                0x000000000000f7e2: cmp rbx, rcx
                0x000000000000f7e5: jne 0xf7f9
            then
                L := 0xf7f9 (2)
            else
                0x000000000000f7e7: jmp 0xf8c0
                L := 0xf8c0 (2)
            fi
        fi
    fi
else
    0x000000000000f77b: lea rdx, [rip + 0xacb6]
    0x000000000000f782: cdqe 
    0x000000000000f784: mov qword ptr [r12], 1
    0x000000000000f78c: or ebp, dword ptr [rdx + rax*4]
    0x000000000000f78f: xor eax, eax
    0x000000000000f791: mov dword ptr [r13], ebp
    L := 0xf795 (5)
fi

0x775f:
0x000000000000775f: cdqe 
0x0000000000007761: add rbp, rax
L := 0x7764 (2)

0x7764:
if
    0x0000000000007764: mov rdi, r12
    0x0000000000007767: call 0x3e10
    0x000000000000776c: test eax, eax
    0x000000000000776e: je 0x76f0
then
    L := 0x76f0 (2)
else
    L := 0x7770 (3)
fi

0x7770:
if
    0x0000000000007770: cmp r15, qword ptr [rsp + 8]
    0x0000000000007775: jb 0x76c0
then
    L := 0x76c0 (2)
else
    if
        0x000000000000777b: movzx eax, byte ptr [rip + 0x219c26]
        0x0000000000007782: sub rbx, r13
        0x0000000000007785: test al, al
        0x0000000000007787: je 0x75f1
    then
        L := 0x75f1 (5)
    else
        0x000000000000778d: jmp 0x75e0
        L := 0x75e0 (5)
    fi
fi

0x15780:
if
    0x0000000000015780: test rdi, rdi
    0x0000000000015783: push r12
    0x0000000000015785: push rbp
    0x0000000000015786: push rbx
    0x0000000000015787: je 0x157e8
then
    if
        0x00000000000157e8: mov edi, 0x80
        0x00000000000157ed: call 0x3e78
        0x00000000000157f2: test rax, rax
        0x00000000000157f5: mov rbx, rax
        0x00000000000157f8: je 0x157db
    then
        L := 0x157db (3)
    else
        0x00000000000157fa: xor edx, edx
        0x00000000000157fc: mov qword ptr [rbx], 0
        0x0000000000015803: mov rax, rbx
        0x0000000000015806: mov word ptr [rbx + 8], dx
        0x000000000001580a: pop rbx
        0x000000000001580b: pop rbp
        0x000000000001580c: pop r12
        0x000000000001580e: ret 
        L := 0x0 (130)
    fi
else
    if
        0x0000000000015789: mov r12, rdi
        0x000000000001578c: call 0x3950
        0x0000000000015791: lea rbp, [rax + 1]
        0x0000000000015795: mov edi, 0x76
        0x000000000001579a: cmp rbp, 0x76
        0x000000000001579e: cmovae rdi, rbp
        0x00000000000157a2: add rdi, 0x11
        0x00000000000157a6: and rdi, 0xfffffffffffffff8
        0x00000000000157aa: call 0x3e78
        0x00000000000157af: test rax, rax
        0x00000000000157b2: mov rbx, rax
        0x00000000000157b5: je 0x157db
    then
        L := 0x157db (3)
    else
        0x00000000000157b7: mov qword ptr [rax], 0
        0x00000000000157be: lea rdi, [rbx + 9]
        0x00000000000157c2: mov eax, 1
        0x00000000000157c7: mov word ptr [rbx + 8], ax
        0x00000000000157cb: mov rdx, rbp
        0x00000000000157ce: mov rsi, r12
        0x00000000000157d1: call 0x3b80
        0x00000000000157d6: mov byte ptr [rbx + rbp + 9], 0
        L := 0x157db (3)
    fi
fi

0x3790:
0x0000000000003790: jmp qword ptr [rip + 0x21c4c2]
L := 0x21fc58 (1)

0xf795:
if
    0x000000000000f795: mov rcx, qword ptr [rsp + 8]
    0x000000000000f79a: xor rcx, qword ptr fs:[0x28]
    0x000000000000f7a3: jne 0xf901
then
    0x000000000000f901: call 0x3970
    0x000000000000f906: nop word ptr cs:[rax + rax]
    if
        0x000000000000f910: push r12
        0x000000000000f912: push rbp
        0x000000000000f913: push rbx
        0x000000000000f914: mov rbx, qword ptr [rip + 0x211add]
        0x000000000000f91b: test rbx, rbx
        0x000000000000f91e: je 0xf93d
    then
        L := 0xf93d (2)
    else
        if
            0x000000000000f920: cmp edi, dword ptr [rbx]
            0x000000000000f922: jne 0xf934
        then
            L := 0xf934 (2)
        else
            0x000000000000f924: jmp 0xf990
            L := 0xf990 (3)
        fi
    fi
else
    0x000000000000f7a9: add rsp, 0x18
    0x000000000000f7ad: pop rbx
    0x000000000000f7ae: pop rbp
    0x000000000000f7af: pop r12
    0x000000000000f7b1: pop r13
    0x000000000000f7b3: ret 
    L := 0x0 (130)
fi

0x37a0:
0x00000000000037a0: jmp qword ptr [rip + 0x21c4ba]
L := 0x21fc60 (1)

0x37b0:
0x00000000000037b0: jmp qword ptr [rip + 0x21c4b2]
L := 0x21fc68 (1)

0x37c0:
0x00000000000037c0: jmp qword ptr [rip + 0x21c4aa]
L := 0x21fc70 (1)

0x77c0:
0x00000000000077c0: mov byte ptr [rbx], 0x3f
0x00000000000077c3: add rbp, 1
0x00000000000077c7: mov rbx, r14
0x00000000000077ca: mov r15, rcx
0x00000000000077cd: jmp 0x7764
L := 0x7764 (2)

0x37d0:
0x00000000000037d0: jmp qword ptr [rip + 0x21c4a2]
L := 0x21fc78 (1)

0x157db:
0x00000000000157db: mov rax, rbx
0x00000000000157de: pop rbx
0x00000000000157df: pop rbp
0x00000000000157e0: pop r12
0x00000000000157e2: ret 
L := 0x0 (130)

0x37e0:
0x00000000000037e0: jmp qword ptr [rip + 0x21c49a]
L := 0x21fc80 (1)

0x57e4:
0x00000000000057e4: lea rcx, [rip + 0x1124d]
0x00000000000057eb: lea rsi, [rip + 0x1240e]
0x00000000000057f2: lea rdi, [rip + 0x149b7]
0x00000000000057f9: mov edx, 0x402
0x00000000000057fe: call 0x3a30
L := 0x5803 (2)

0x37f0:
0x00000000000037f0: jmp qword ptr [rip + 0x21c492]
L := 0x21fc88 (1)

0xf7f9:
if
    0x000000000000f7f9: add rbx, 1
    0x000000000000f7fd: movzx edi, byte ptr [rbx]
    0x000000000000f800: lea edx, [rdi - 0x30]
    0x000000000000f803: cmp dl, 9
    0x000000000000f806: ja 0xf7f0
then
    if
        0x000000000000f7f0: cmp rbx, rcx
        0x000000000000f7f3: je 0xf8c0
    then
        L := 0xf8c0 (2)
    else
        L := 0xf7f9 (2)
    fi
else
    L := 0xf808 (4)
fi

0x3800:
0x0000000000003800: jmp qword ptr [rip + 0x21c48a]
L := 0x21fc90 (1)

0x5803:
0x0000000000005803: lea rcx, [rip + 0x112d0]
0x000000000000580a: lea rsi, [rip + 0x123ef]
0x0000000000005811: lea rdi, [rip + 0x12727]
0x0000000000005818: mov edx, 0x638
0x000000000000581d: call 0x3a30
L := 0x5822 (2)

0x7808:
0x0000000000007808: mov byte ptr [rbx], al
0x000000000000780a: add r15, 1
0x000000000000780e: add rbp, 1
0x0000000000007812: add rbx, 1
0x0000000000007816: jmp 0x7770
L := 0x7770 (3)

0xf808:
0x000000000000f808: mov rdx, qword ptr [r12]
0x000000000000f80c: mov dword ptr [r13], ebp
0x000000000000f810: jmp 0xf824
L := 0xf824 (2)

0x5822:
0x0000000000005822: lea rcx, [rip + 0x112b1]
0x0000000000005829: lea rsi, [rip + 0x123d0]
0x0000000000005830: lea rdi, [rip + 0x149d9]
0x0000000000005837: mov edx, 0x66c
0x000000000000583c: call 0x3a30
L := 0x5841 (2)

0xf824:
if
    0x000000000000f824: test rdx, rdx
    0x000000000000f827: jne 0xf795
then
    L := 0xf795 (5)
else
    0x000000000000f82d: lea rdi, [rip + 0xabe2]
    0x000000000000f834: call 0x37a0
    0x000000000000f839: cmp rax, 1
    0x000000000000f83d: sbb rax, rax
    0x000000000000f840: and eax, 0x200
    0x000000000000f845: add rax, 0x200
    0x000000000000f84b: mov qword ptr [r12], rax
    0x000000000000f84f: mov eax, 4
    0x000000000000f854: jmp 0xf795
    L := 0xf795 (5)
fi

0x782b:
0x000000000000782b: mov rbx, r14
0x000000000000782e: jmp 0x7770
L := 0x7770 (3)

0xd830:
if
    0x000000000000d830: sub rsp, 8
    0x000000000000d834: xor esi, esi
    0x000000000000d836: call 0x3cc0
    0x000000000000d83b: mov rdx, rax
    0x000000000000d83e: mov eax, 1
    0x000000000000d843: test rdx, rdx
    0x000000000000d846: je 0xd867
then
    L := 0xd867 (2)
else
    if
        0x000000000000d848: lea rdi, [rip + 0xcaf0]
        0x000000000000d84f: mov ecx, 2
        0x000000000000d854: mov rsi, rdx
        0x000000000000d857: repe cmpsb byte ptr [rsi], byte ptr [rdi]
        0x000000000000d859: seta sil
        0x000000000000d85d: setb cl
        0x000000000000d860: xor eax, eax
        0x000000000000d862: cmp sil, cl
        0x000000000000d865: jne 0xd870
    then
        0x000000000000d870: lea rdi, [rip + 0xcaca]
        0x000000000000d877: mov ecx, 6
        0x000000000000d87c: mov rsi, rdx
        0x000000000000d87f: repe cmpsb byte ptr [rsi], byte ptr [rdi]
        0x000000000000d881: setne al
        0x000000000000d884: add rsp, 8
        0x000000000000d888: ret 
        L := 0x0 (130)
    else
        L := 0xd867 (2)
    fi
fi

0x3830:
0x0000000000003830: jmp qword ptr [rip + 0x21c472]
L := 0x21fca8 (1)

0x5841:
0x0000000000005841: call 0x3970
L := 0x5846 (2)

0x5846:
0x0000000000005846: call 0x146d0
0x000000000000584b: nop dword ptr [rax + rax]
0x0000000000005850: xor ebp, ebp
0x0000000000005852: mov r9, rdx
0x0000000000005855: pop rsi
0x0000000000005856: mov rdx, rsp
0x0000000000005859: and rsp, 0xfffffffffffffff0
0x000000000000585d: push rax
0x000000000000585e: push rsp
0x000000000000585f: lea r8, [rip + 0x10aca]
0x0000000000005866: lea rcx, [rip + 0x10a53]
0x000000000000586d: lea rdi, [rip - 0x19e4]
0x0000000000005874: call qword ptr [rip + 0x21a75e]
0x000000000000587a: hlt 
L := 0x0 (130)

0x3850:
0x0000000000003850: jmp qword ptr [rip + 0x21c462]
L := 0x21fcb8 (1)

0x3860:
0x0000000000003860: jmp qword ptr [rip + 0x21c45a]
L := 0x21fcc0 (1)

0x7860:
if
    0x0000000000007860: movzx esi, byte ptr [rdx]
    0x0000000000007863: mov rcx, qword ptr [rax]
    0x0000000000007866: test byte ptr [rcx + rsi*2 + 1], 0x40
    0x000000000000786b: jne 0x7870
then
    L := 0x7870 (2)
else
    0x000000000000786d: mov byte ptr [rdx], 0x3f
    L := 0x7870 (2)
fi

0xd867:
0x000000000000d867: add rsp, 8
0x000000000000d86b: ret 
L := 0x0 (130)

0x7870:
if
    0x0000000000007870: add rdx, 1
    0x0000000000007874: cmp rdx, qword ptr [rsp + 8]
    0x0000000000007879: jne 0x7860
then
    L := 0x7860 (2)
else
    L := 0x787b (2)
fi

0x3870:
0x0000000000003870: jmp qword ptr [rip + 0x21c452]
L := 0x21fcc8 (1)

0x787b:
if
    0x000000000000787b: movzx eax, byte ptr [rip + 0x219b26]
    0x0000000000007882: mov rbx, rbp
    0x0000000000007885: test al, al
    0x0000000000007887: je 0x75f1
then
    L := 0x75f1 (5)
else
    0x000000000000788d: jmp 0x75e0
    L := 0x75e0 (5)
fi

0x3880:
0x0000000000003880: jmp qword ptr [rip + 0x21c44a]
L := 0x21fcd0 (1)

0xd890:
if
    0x000000000000d890: cmp rdi, 0xa
    0x000000000000d894: mov eax, 0xa
    0x000000000000d899: movabs r9, 0xaaaaaaaaaaaaaaab
    0x000000000000d8a3: cmovb rdi, rax
    0x000000000000d8a7: or rdi, 1
    0x000000000000d8ab: cmp rdi, -1
    0x000000000000d8af: je 0xd91f
then
    L := 0xd91f (3)
else
    0x000000000000d8b1: nop dword ptr [rax]
    L := 0xd8b8 (2)
fi

0x3890:
0x0000000000003890: jmp qword ptr [rip + 0x21c442]
L := 0x21fcd8 (1)

0x38a0:
0x00000000000038a0: jmp qword ptr [rip + 0x21c43a]
L := 0x21fce0 (1)

0x38b0:
0x00000000000038b0: jmp qword ptr [rip + 0x21c432]
L := 0x21fce8 (1)

0xd8b8:
if
    0x000000000000d8b8: mov rax, rdi
    0x000000000000d8bb: mov rcx, rdi
    0x000000000000d8be: mul r9
    0x000000000000d8c1: mov rax, rdx
    0x000000000000d8c4: shr rax, 1
    0x000000000000d8c7: lea rax, [rax + rax*2]
    0x000000000000d8cb: sub rcx, rax
    0x000000000000d8ce: cmp rdi, 9
    0x000000000000d8d2: mov rax, rcx
    0x000000000000d8d5: jbe 0xd910
then
    L := 0xd910 (2)
else
    if
        0x000000000000d8d7: test rcx, rcx
        0x000000000000d8da: je 0xd915
    then
        L := 0xd915 (3)
    else
        0x000000000000d8dc: mov r8d, 0x10
        0x000000000000d8e2: mov esi, 9
        0x000000000000d8e7: mov ecx, 3
        0x000000000000d8ec: jmp 0xd8f9
        L := 0xd8f9 (2)
    fi
fi

0xf8c0:
if
    0x000000000000f8c0: cmp byte ptr [rcx - 1], 0x42
    0x000000000000f8c4: je 0xf8d8
then
    if
        0x000000000000f8d8: or ebp, 0x180
        0x000000000000f8de: cmp byte ptr [rcx - 2], 0x69
        0x000000000000f8e2: jne 0xf808
    then
        L := 0xf808 (4)
    else
        0x000000000000f8e8: jmp 0xf8ca
        L := 0xf8ca (2)
    fi
else
    0x000000000000f8c6: or bpl, 0x80
    L := 0xf8ca (2)
fi

0xf8ca:
0x000000000000f8ca: or ebp, 0x20
0x000000000000f8cd: jmp 0xf808
L := 0xf808 (4)

0x38e0:
0x00000000000038e0: jmp qword ptr [rip + 0x21c41a]
L := 0x21fd00 (1)

0xd8f9:
if
    0x000000000000d8f9: add rcx, 2
    0x000000000000d8fd: xor edx, edx
    0x000000000000d8ff: mov rax, rdi
    0x000000000000d902: div rcx
    0x000000000000d905: add rsi, r8
    0x000000000000d908: cmp rsi, rdi
    0x000000000000d90b: mov rax, rdx
    0x000000000000d90e: jb 0xd8f0
then
    if
        0x000000000000d8f0: add r8, 8
        0x000000000000d8f4: test rdx, rdx
        0x000000000000d8f7: je 0xd915
    then
        L := 0xd915 (3)
    else
        L := 0xd8f9 (2)
    fi
else
    L := 0xd910 (2)
fi

0x78fe:
0x00000000000078fe: mov r9d, 1
0x0000000000007904: jmp 0x74fd
L := 0x74fd (2)

0x3900:
0x0000000000003900: jmp qword ptr [rip + 0x21c40a]
L := 0x21fd10 (1)

0xd910:
if
    0x000000000000d910: test rax, rax
    0x000000000000d913: jne 0xd91f
then
    L := 0xd91f (3)
else
    L := 0xd915 (3)
fi

0x7910:
if
    0x0000000000007910: push r15
    0x0000000000007912: push r14
    0x0000000000007914: mov rax, rdi
    0x0000000000007917: push r13
    0x0000000000007919: push r12
    0x000000000000791b: mov r14, rcx
    0x000000000000791e: push rbp
    0x000000000000791f: push rbx
    0x0000000000007920: mov rbx, r9
    0x0000000000007923: mov r15d, r8d
    0x0000000000007926: xor r8d, r8d
    0x0000000000007929: sub rsp, 0x2048
    0x0000000000007930: mov qword ptr [rsp], rdi
    0x0000000000007934: lea r13, [rsp + 0x30]
    0x0000000000007939: lea rdi, [rsp + 0x28]
    0x000000000000793e: lea r9, [rsp + 0x27]
    0x0000000000007943: mov r12, qword ptr [rsp + 0x2080]
    0x000000000000794b: mov rcx, qword ptr fs:[0x28]
    0x0000000000007954: mov qword ptr [rsp + 0x2038], rcx
    0x000000000000795c: xor ecx, ecx
    0x000000000000795e: mov ecx, edx
    0x0000000000007960: mov rdx, rsi
    0x0000000000007963: mov rsi, rax
    0x0000000000007966: mov qword ptr [rsp + 0x28], r13
    0x000000000000796b: call 0x74a0
    0x0000000000007970: cmp byte ptr [rsp + 0x27], 0
    0x0000000000007975: mov rbp, rax
    0x0000000000007978: je 0x7983
then
    L := 0x7983 (3)
else
    if
        0x000000000000797a: test r15b, r15b
        0x000000000000797d: jne 0x7bd8
    then
        if
            0x0000000000007bd8: mov rdi, qword ptr [rip + 0x2186a9]
            0x0000000000007bdf: mov rax, qword ptr [rdi + 0x28]
            0x0000000000007be3: cmp rax, qword ptr [rdi + 0x30]
            0x0000000000007be7: jae 0x7ce0
        then
            0x0000000000007ce0: mov esi, 0x20
            0x0000000000007ce5: call 0x39d0
            0x0000000000007cea: jmp 0x7bf8
            L := 0x7bf8 (2)
        else
            0x0000000000007bed: lea rdx, [rax + 1]
            0x0000000000007bf1: mov qword ptr [rdi + 0x28], rdx
            0x0000000000007bf5: mov byte ptr [rax], 0x20
            L := 0x7bf8 (2)
        fi
    else
        L := 0x7983 (3)
    fi
fi

0x9910:
if
    0x0000000000009910: push rbp
    0x0000000000009911: push rbx
    0x0000000000009912: mov ebp, edi
    0x0000000000009914: sub rsp, 0x28
    0x0000000000009918: mov rax, qword ptr fs:[0x28]
    0x0000000000009921: mov qword ptr [rsp + 0x18], rax
    0x0000000000009926: xor eax, eax
    0x0000000000009928: cmp byte ptr [rip + 0x2179fe], 0
    0x000000000000992f: je 0x99a8
then
    if
        0x00000000000099a8: call 0xf910
        0x00000000000099ad: test rax, rax
        0x00000000000099b0: mov rdi, rax
        0x00000000000099b3: je 0x9931
    then
        L := 0x9931 (2)
    else
        0x00000000000099b9: xor esi, esi
        0x00000000000099bb: call 0x10370
        0x00000000000099c0: mov edx, 0
        0x00000000000099c5: test eax, eax
        0x00000000000099c7: cmovs eax, edx
        0x00000000000099ca: jmp 0x998e
        L := 0x998e (2)
    fi
else
    L := 0x9931 (2)
fi

0x3910:
0x0000000000003910: jmp qword ptr [rip + 0x21c402]
L := 0x21fd18 (1)

0xd915:
if
    0x000000000000d915: add rdi, 2
    0x000000000000d919: cmp rdi, -1
    0x000000000000d91d: jne 0xd8b8
then
    L := 0xd8b8 (2)
else
    L := 0xd91f (3)
fi

0xd91f:
0x000000000000d91f: mov rax, rdi
0x000000000000d922: ret 
L := 0x0 (130)

0x3920:
0x0000000000003920: jmp qword ptr [rip + 0x21c3fa]
L := 0x21fd20 (1)

0x3930:
0x0000000000003930: jmp qword ptr [rip + 0x21c3f2]
L := 0x21fd28 (1)

0x9931:
0x0000000000009931: mov rbx, rsp
0x0000000000009934: lea rcx, [rip + 0xe2e9]
0x000000000000993b: mov r8d, ebp
0x000000000000993e: mov edx, 0x15
0x0000000000009943: mov esi, 1
0x0000000000009948: mov rdi, rbx
0x000000000000994b: xor eax, eax
0x000000000000994d: call 0x3e60
0x0000000000009952: mov rax, rbx
L := 0x9955 (2)

0xf934:
if
    0x000000000000f934: mov rbx, qword ptr [rbx + 8]
    0x000000000000f938: test rbx, rbx
    0x000000000000f93b: jne 0xf930
then
    if
        0x000000000000f930: cmp dword ptr [rbx], edi
        0x000000000000f932: je 0xf990
    then
        L := 0xf990 (3)
    else
        L := 0xf934 (2)
    fi
else
    L := 0xf93d (2)
fi

0xf93d:
if
    0x000000000000f93d: mov ebp, edi
    0x000000000000f93f: lea r12, [rip + 0x8304]
    0x000000000000f946: call 0x3910
    0x000000000000f94b: test rax, rax
    0x000000000000f94e: mov edi, 0x18
    0x000000000000f953: je 0xf968
then
    L := 0xf968 (2)
else
    0x000000000000f955: mov r12, qword ptr [rax]
    0x000000000000f958: mov rdi, r12
    0x000000000000f95b: call 0x3950
    0x000000000000f960: lea rdi, [rax + 0x18]
    0x000000000000f964: and rdi, 0xfffffffffffffff8
    L := 0xf968 (2)
fi

0x3940:
0x0000000000003940: jmp qword ptr [rip + 0x21c3ea]
L := 0x21fd30 (1)

0x3950:
0x0000000000003950: jmp qword ptr [rip + 0x21c3e2]
L := 0x21fd38 (1)

0xd950:
if
    0x000000000000d950: push rbx
    0x000000000000d951: mov rbx, rdi
    0x000000000000d954: mov rdi, rsi
    0x000000000000d957: mov rsi, qword ptr [rbx + 0x10]
    0x000000000000d95b: call qword ptr [rbx + 0x30]
    0x000000000000d95e: cmp qword ptr [rbx + 0x10], rax
    0x000000000000d962: jbe 0xd96d
then
    0x000000000000d96d: call 0x37e0
    0x000000000000d972: nop dword ptr [rax]
    0x000000000000d976: nop word ptr cs:[rax + rax]
    if
        0x000000000000d980: push r14
        0x000000000000d982: push r13
        0x000000000000d984: mov r14, rdx
        0x000000000000d987: push r12
        0x000000000000d989: push rbp
        0x000000000000d98a: mov r12, rdi
        0x000000000000d98d: push rbx
        0x000000000000d98e: mov rbp, rsi
        0x000000000000d991: mov r13d, ecx
        0x000000000000d994: call 0xd950
        0x000000000000d999: mov qword ptr [r14], rax
        0x000000000000d99c: mov rsi, qword ptr [rax]
        0x000000000000d99f: test rsi, rsi
        0x000000000000d9a2: je 0xda90
    then
        L := 0xda90 (3)
    else
        if
            0x000000000000d9a8: cmp rsi, rbp
            0x000000000000d9ab: mov rbx, rax
            0x000000000000d9ae: je 0xda43
        then
            L := 0xda43 (2)
        else
            if
                0x000000000000d9b4: mov rdi, rbp
                0x000000000000d9b7: call qword ptr [r12 + 0x38]
                0x000000000000d9bc: test al, al
                0x000000000000d9be: jne 0xda40
            then
                0x000000000000da40: mov rsi, qword ptr [rbx]
                L := 0xda43 (2)
            else
                if
                    0x000000000000d9c4: mov rax, qword ptr [rbx + 8]
                    0x000000000000d9c8: test rax, rax
                    0x000000000000d9cb: je 0xda90
                then
                    L := 0xda90 (3)
                else
                    if
                        0x000000000000d9d1: mov rsi, qword ptr [rax]
                        0x000000000000d9d4: cmp rbp, rsi
                        0x000000000000d9d7: jne 0xd9f9
                    then
                        L := 0xd9f9 (2)
                    else
                        0x000000000000d9d9: jmp 0xda0c
                        L := 0xda0c (3)
                    fi
                fi
            fi
        fi
    fi
else
    0x000000000000d964: shl rax, 4
    0x000000000000d968: add rax, qword ptr [rbx]
    0x000000000000d96b: pop rbx
    0x000000000000d96c: ret 
    L := 0x0 (130)
fi

0x9955:
if
    0x0000000000009955: mov ecx, dword ptr [rax]
    0x0000000000009957: add rax, 4
    0x000000000000995b: lea edx, [rcx - 0x1010101]
    0x0000000000009961: not ecx
    0x0000000000009963: and edx, ecx
    0x0000000000009965: and edx, 0x80808080
    0x000000000000996b: je 0x9955
then
    L := 0x9955 (2)
else
    0x000000000000996d: mov ecx, edx
    0x000000000000996f: shr ecx, 0x10
    0x0000000000009972: test edx, 0x8080
    0x0000000000009978: cmove edx, ecx
    0x000000000000997b: lea rcx, [rax + 2]
    0x000000000000997f: mov esi, edx
    0x0000000000009981: cmove rax, rcx
    0x0000000000009985: add sil, dl
    0x0000000000009988: sbb rax, 3
    0x000000000000998c: sub eax, ebx
    L := 0x998e (2)
fi

0x3960:
0x0000000000003960: jmp qword ptr [rip + 0x21c3da]
L := 0x21fd40 (1)

0xf968:
0x000000000000f968: call 0x14480
0x000000000000f96d: lea rdi, [rax + 0x10]
0x000000000000f971: mov dword ptr [rax], ebp
0x000000000000f973: mov rsi, r12
0x000000000000f976: mov rbx, rax
0x000000000000f979: call 0x3830
0x000000000000f97e: mov rax, qword ptr [rip + 0x211a73]
0x000000000000f985: mov qword ptr [rip + 0x211a6c], rbx
0x000000000000f98c: mov qword ptr [rbx + 8], rax
L := 0xf990 (3)

0x3970:
0x0000000000003970: jmp qword ptr [rip + 0x21c3d2]
L := 0x21fd48 (1)

0x13979:
if
    0x0000000000013979: call 0x3970
    0x000000000001397e: nop 
    0x0000000000013980: sub rsp, 0x48
    0x0000000000013984: mov rax, rdx
    0x0000000000013987: mov rdx, rcx
    0x000000000001398a: mov rcx, qword ptr fs:[0x28]
    0x0000000000013993: mov qword ptr [rsp + 0x38], rcx
    0x0000000000013998: xor ecx, ecx
    0x000000000001399a: cmp esi, 0xa
    0x000000000001399d: je 0x13a00
then
    0x0000000000013a00: call 0x37e0
    L := 0x13a05 (2)
else
    if
        0x000000000001399f: mov dword ptr [rsp], esi
        0x00000000000139a2: mov rcx, rsp
        0x00000000000139a5: mov rsi, rax
        0x00000000000139a8: mov qword ptr [rsp + 4], 0
        0x00000000000139b1: mov qword ptr [rsp + 0xc], 0
        0x00000000000139ba: mov qword ptr [rsp + 0x14], 0
        0x00000000000139c3: mov qword ptr [rsp + 0x1c], 0
        0x00000000000139cc: mov qword ptr [rsp + 0x24], 0
        0x00000000000139d5: mov qword ptr [rsp + 0x2c], 0
        0x00000000000139de: mov dword ptr [rsp + 0x34], 0
        0x00000000000139e6: call 0x133a0
        0x00000000000139eb: mov rdx, qword ptr [rsp + 0x38]
        0x00000000000139f0: xor rdx, qword ptr fs:[0x28]
        0x00000000000139f9: jne 0x13a05
    then
        L := 0x13a05 (2)
    else
        0x00000000000139fb: add rsp, 0x48
        0x00000000000139ff: ret 
        L := 0x0 (130)
    fi
fi

0x3980:
0x0000000000003980: jmp qword ptr [rip + 0x21c3ca]
L := 0x21fd50 (1)

0x7983:
if
    0x0000000000007983: test r14, r14
    0x0000000000007986: je 0x79ba
then
    L := 0x79ba (2)
else
    if
        0x0000000000007988: mov edi, 4
        0x000000000000798d: call 0x5c50
        0x0000000000007992: test al, al
        0x0000000000007994: jne 0x7c48
    then
        0x0000000000007c48: lea rdi, [rip + 0x218411]
        0x0000000000007c4f: call 0x72f0
        0x0000000000007c54: lea rdi, [rip + 0x218415]
        0x0000000000007c5b: call 0x72f0
        0x0000000000007c60: jmp 0x799a
        L := 0x799a (2)
    else
        L := 0x799a (2)
    fi
fi

0x998e:
if
    0x000000000000998e: mov rsi, qword ptr [rsp + 0x18]
    0x0000000000009993: xor rsi, qword ptr fs:[0x28]
    0x000000000000999c: jne 0x99cc
then
    0x00000000000099cc: call 0x3970
    0x00000000000099d1: nop dword ptr [rax + rax]
    0x00000000000099d6: nop word ptr cs:[rax + rax]
    if
        0x00000000000099e0: push rbp
        0x00000000000099e1: mov rbp, rsp
        0x00000000000099e4: push r15
        0x00000000000099e6: push r14
        0x00000000000099e8: push r13
        0x00000000000099ea: push r12
        0x00000000000099ec: mov r15, rcx
        0x00000000000099ef: push rbx
        0x00000000000099f0: mov r14d, esi
        0x00000000000099f3: mov r13d, edx
        0x00000000000099f6: sub rsp, 0x378
        0x00000000000099fd: mov rcx, qword ptr [rip + 0x2179ac]
        0x0000000000009a04: mov qword ptr [rbp - 0x388], rdi
        0x0000000000009a0b: mov rax, qword ptr fs:[0x28]
        0x0000000000009a14: mov qword ptr [rbp - 0x38], rax
        0x0000000000009a18: xor eax, eax
        0x0000000000009a1a: cmp rcx, qword ptr [rip + 0x217997]
        0x0000000000009a21: mov rdi, qword ptr [rip + 0x217998]
        0x0000000000009a28: jne 0x9a78
    then
        L := 0x9a78 (2)
    else
        if
            0x0000000000009a2a: mov edx, 0x190
            0x0000000000009a2f: xor esi, esi
            0x0000000000009a31: mov rax, rdx
            0x0000000000009a34: mul rcx
            0x0000000000009a37: jo 0xa84c
        then
            L := 0xa84c (2)
        else
            L := 0x9a3d (2)
        fi
    fi
else
    0x000000000000999e: add rsp, 0x28
    0x00000000000099a2: pop rbx
    0x00000000000099a3: pop rbp
    0x00000000000099a4: ret 
    L := 0x0 (130)
fi

0x3990:
0x0000000000003990: jmp qword ptr [rip + 0x21c3c2]
L := 0x21fd58 (1)

0xf990:
if
    0x000000000000f990: cmp byte ptr [rbx + 0x10], 0
    0x000000000000f994: je 0xf9a0
then
    0x000000000000f9a0: xor eax, eax
    0x000000000000f9a2: jmp 0xf99a
    L := 0xf99a (2)
else
    0x000000000000f996: lea rax, [rbx + 0x10]
    L := 0xf99a (2)
fi

0x799a:
0x000000000000799a: lea rdi, [rip + 0x2186bf]
0x00000000000079a1: call 0x72f0
0x00000000000079a6: mov rdi, r14
0x00000000000079a9: call 0x72f0
0x00000000000079ae: lea rdi, [rip + 0x2186bb]
0x00000000000079b5: call 0x72f0
L := 0x79ba (2)

0xf99a:
0x000000000000f99a: pop rbx
0x000000000000f99b: pop rbp
0x000000000000f99c: pop r12
0x000000000000f99e: ret 
L := 0x0 (130)

0x39a0:
0x00000000000039a0: jmp qword ptr [rip + 0x21c3ba]
L := 0x21fd60 (1)

0x39b0:
0x00000000000039b0: jmp qword ptr [rip + 0x21c3b2]
L := 0x21fd68 (1)

0x79ba:
if
    0x00000000000079ba: test r12, r12
    0x00000000000079bd: je 0x7c08
then
    if
        0x0000000000007c08: xor r9d, r9d
        0x0000000000007c0b: xor r14d, r14d
        0x0000000000007c0e: test rbx, rbx
        0x0000000000007c11: mov r10, rbp
        0x0000000000007c14: jne 0x7a60
    then
        L := 0x7a60 (2)
    else
        L := 0x7c1a (2)
    fi
else
    if
        0x00000000000079c3: movzx r14d, byte ptr [rip + 0x2199dd]
        0x00000000000079cb: test r14b, r14b
        0x00000000000079ce: jne 0x7b80
    then
        if
            0x0000000000007b80: movzx r14d, byte ptr [rip + 0x219821]
            0x0000000000007b88: test r14b, r14b
            0x0000000000007b8b: je 0x79d4
        then
            L := 0x79d4 (2)
        else
            if
                0x0000000000007b91: cmp byte ptr [rsp + 0x27], 0
                0x0000000000007b96: jne 0x7cb8
            then
                0x0000000000007cb8: mov r10, rbp
                0x0000000000007cbb: xor r9d, r9d
                0x0000000000007cbe: xor r14d, r14d
                0x0000000000007cc1: jmp 0x79da
                L := 0x79da (4)
            else
                if
                    0x0000000000007b9c: mov rax, qword ptr [rsp + 0x28]
                    0x0000000000007ba1: mov rdi, qword ptr [rip + 0x2186e0]
                    0x0000000000007ba8: lea r10, [rbp - 2]
                    0x0000000000007bac: movzx edx, byte ptr [rax]
                    0x0000000000007baf: mov rax, qword ptr [rdi + 0x28]
                    0x0000000000007bb3: cmp rax, qword ptr [rdi + 0x30]
                    0x0000000000007bb7: jae 0x7cef
                then
                    0x0000000000007cef: movzx esi, dl
                    0x0000000000007cf2: mov qword ptr [rsp + 8], r10
                    0x0000000000007cf7: call 0x39d0
                    0x0000000000007cfc: mov r9d, 1
                    0x0000000000007d02: mov r10, qword ptr [rsp + 8]
                    0x0000000000007d07: jmp 0x79da
                    L := 0x79da (4)
                else
                    0x0000000000007bbd: lea rcx, [rax + 1]
                    0x0000000000007bc1: mov r9d, 1
                    0x0000000000007bc7: mov qword ptr [rdi + 0x28], rcx
                    0x0000000000007bcb: mov byte ptr [rax], dl
                    0x0000000000007bcd: jmp 0x79da
                    L := 0x79da (4)
                fi
            fi
        fi
    else
        L := 0x79d4 (2)
    fi
fi

0x39c0:
0x00000000000039c0: jmp qword ptr [rip + 0x21c3aa]
L := 0x21fd70 (1)

0x59c0:
0x00000000000059c0: mov r8, qword ptr [rsi]
0x00000000000059c3: mov r9, qword ptr [rdi]
0x00000000000059c6: lea r11, [rip + 0x109d3]
0x00000000000059cd: push r15
0x00000000000059cf: xor r10d, r10d
0x00000000000059d2: push r14
0x00000000000059d4: mov eax, 1
0x00000000000059d9: push r13
0x00000000000059db: push r12
0x00000000000059dd: mov r12d, edx
0x00000000000059e0: push rbp
0x00000000000059e1: movabs rbp, 0x7e000000000000
0x00000000000059eb: push rbx
0x00000000000059ec: mov rbx, rcx
L := 0x59ef (3)

0x79d4:
0x00000000000079d4: mov r10, rbp
0x00000000000079d7: xor r9d, r9d
L := 0x79da (4)

0x79da:
if
    0x00000000000079da: mov rdi, qword ptr [rip + 0x2199a7]
    0x00000000000079e1: xor esi, esi
    0x00000000000079e3: mov qword ptr [rsp + 0x18], r10
    0x00000000000079e8: mov qword ptr [rsp + 0x10], r9
    0x00000000000079ed: call 0x6210
    0x00000000000079f2: mov esi, 1
    0x00000000000079f7: mov rdi, r12
    0x00000000000079fa: mov r15, rax
    0x00000000000079fd: call 0x6210
    0x0000000000007a02: cmp byte ptr [rax], 0x2f
    0x0000000000007a05: mov r11, rax
    0x0000000000007a08: lea rcx, [rip + 0x1053e]
    0x0000000000007a0f: lea rax, [rip + 0x10234]
    0x0000000000007a16: lea rsi, [rip + 0x10213]
    0x0000000000007a1d: mov r8, r11
    0x0000000000007a20: mov rdx, r15
    0x0000000000007a23: mov edi, 1
    0x0000000000007a28: mov qword ptr [rsp + 8], r11
    0x0000000000007a2d: cmove rcx, rax
    0x0000000000007a31: xor eax, eax
    0x0000000000007a33: call 0x3cd0
    0x0000000000007a38: mov rdi, r15
    0x0000000000007a3b: call 0x3e70
    0x0000000000007a40: mov r11, qword ptr [rsp + 8]
    0x0000000000007a45: mov rdi, r11
    0x0000000000007a48: call 0x3e70
    0x0000000000007a4d: test rbx, rbx
    0x0000000000007a50: mov r9, qword ptr [rsp + 0x10]
    0x0000000000007a55: mov r10, qword ptr [rsp + 0x18]
    0x0000000000007a5a: je 0x7c1a
then
    L := 0x7c1a (2)
else
    L := 0x7a60 (2)
fi

0x39e0:
0x00000000000039e0: jmp qword ptr [rip + 0x21c39a]
L := 0x21fd80 (1)

0x59ef:
if
    0x00000000000059ef: movzx ecx, byte ptr [r8]
    0x00000000000059f3: cmp cl, 0x3d
    0x00000000000059f6: je 0x5a42
then
    L := 0x5a42 (2)
else
    0x00000000000059f8: nop dword ptr [rax + rax]
    L := 0x5a00 (2)
fi

0xd9f9:
if
    0x000000000000d9f9: mov rdi, rbp
    0x000000000000d9fc: call qword ptr [r12 + 0x38]
    0x000000000000da01: test al, al
    0x000000000000da03: je 0xd9e0
then
    if
        0x000000000000d9e0: mov rbx, qword ptr [rbx + 8]
        0x000000000000d9e4: mov rax, qword ptr [rbx + 8]
        0x000000000000d9e8: test rax, rax
        0x000000000000d9eb: je 0xda90
    then
        L := 0xda90 (3)
    else
        if
            0x000000000000d9f1: mov rsi, qword ptr [rax]
            0x000000000000d9f4: cmp rsi, rbp
            0x000000000000d9f7: je 0xda0c
        then
            L := 0xda0c (3)
        else
            L := 0xd9f9 (2)
        fi
    fi
else
    0x000000000000da05: mov rax, qword ptr [rbx + 8]
    0x000000000000da09: mov rsi, qword ptr [rax]
    L := 0xda0c (3)
fi

0x5a00:
if
    0x0000000000005a00: jle 0x5ad8
then
    if
        0x0000000000005ad8: test cl, cl
        0x0000000000005ada: je 0x5ae5
    then
        L := 0x5ae5 (2)
    else
        if
            0x0000000000005adc: cmp cl, 0x3a
            0x0000000000005adf: jne 0x5a50
        then
            L := 0x5a50 (3)
        else
            L := 0x5ae5 (2)
        fi
    fi
else
    if
        0x0000000000005a06: cmp cl, 0x5c
        0x0000000000005a09: je 0x5a68
    then
        if
            0x0000000000005a68: movzx ecx, byte ptr [r8 + 1]
            0x0000000000005a6d: add r8, 2
            0x0000000000005a71: cmp cl, 0x78
            0x0000000000005a74: ja 0x5a2e
        then
            L := 0x5a2e (2)
        else
            0x0000000000005a76: movzx r13d, cl
            0x0000000000005a7a: movsxd r13, dword ptr [r11 + r13*4]
            0x0000000000005a7e: add r13, r11
            0x0000000000005a81: jmp r13
            L := 0x0 (130)
        fi
    else
        if
            0x0000000000005a0b: cmp cl, 0x5e
            0x0000000000005a0e: jne 0x5a50
        then
            L := 0x5a50 (3)
        else
            if
                0x0000000000005a10: movzx ecx, byte ptr [r8 + 1]
                0x0000000000005a15: lea r14, [r8 + 1]
                0x0000000000005a19: lea r13d, [rcx - 0x40]
                0x0000000000005a1d: cmp r13b, 0x3e
                0x0000000000005a21: ja 0x5ab8
            then
                if
                    0x0000000000005ab8: cmp cl, 0x3f
                    0x0000000000005abb: je 0x5af0
                then
                    0x0000000000005af0: mov byte ptr [r9], 0x7f
                    0x0000000000005af4: add r10, 1
                    0x0000000000005af8: add r9, 1
                    0x0000000000005afc: mov r8, r14
                    0x0000000000005aff: jmp 0x59ef
                    L := 0x59ef (3)
                else
                    0x0000000000005abd: xor eax, eax
                    L := 0x5abf (3)
                fi
            else
                0x0000000000005a27: add r8, 2
                0x0000000000005a2b: and ecx, 0x1f
                L := 0x5a2e (2)
            fi
        fi
    fi
fi

0x13a05:
0x0000000000013a05: call 0x3970
0x0000000000013a0a: nop word ptr [rax + rax]
0x0000000000013a10: mov rdx, rsi
0x0000000000013a13: mov esi, edi
0x0000000000013a15: xor edi, edi
0x0000000000013a17: jmp 0x138f0
if
    0x00000000000138f0: sub rsp, 0x48
    0x00000000000138f4: mov rax, rdx
    0x00000000000138f7: mov rdx, qword ptr fs:[0x28]
    0x0000000000013900: mov qword ptr [rsp + 0x38], rdx
    0x0000000000013905: xor edx, edx
    0x0000000000013907: cmp esi, 0xa
    0x000000000001390a: je 0x13974
then
    0x0000000000013974: call 0x37e0
    L := 0x13979 (2)
else
    if
        0x000000000001390c: mov dword ptr [rsp], esi
        0x000000000001390f: mov rcx, rsp
        0x0000000000013912: mov rdx, -1
        0x0000000000013919: mov rsi, rax
        0x000000000001391c: mov qword ptr [rsp + 4], 0
        0x0000000000013925: mov qword ptr [rsp + 0xc], 0
        0x000000000001392e: mov qword ptr [rsp + 0x14], 0
        0x0000000000013937: mov qword ptr [rsp + 0x1c], 0
        0x0000000000013940: mov qword ptr [rsp + 0x24], 0
        0x0000000000013949: mov qword ptr [rsp + 0x2c], 0
        0x0000000000013952: mov dword ptr [rsp + 0x34], 0
        0x000000000001395a: call 0x133a0
        0x000000000001395f: mov rcx, qword ptr [rsp + 0x38]
        0x0000000000013964: xor rcx, qword ptr fs:[0x28]
        0x000000000001396d: jne 0x13979
    then
        L := 0x13979 (2)
    else
        0x000000000001396f: add rsp, 0x48
        0x0000000000013973: ret 
        L := 0x0 (130)
    fi
fi

0xda0c:
if
    0x000000000000da0c: test r13b, r13b
    0x000000000000da0f: je 0xda2e
then
    L := 0xda2e (4)
else
    0x000000000000da11: mov rdx, qword ptr [rax + 8]
    0x000000000000da15: mov qword ptr [rbx + 8], rdx
    0x000000000000da19: mov qword ptr [rax], 0
    0x000000000000da20: mov rdx, qword ptr [r12 + 0x48]
    0x000000000000da25: mov qword ptr [rax + 8], rdx
    0x000000000000da29: mov qword ptr [r12 + 0x48], rax
    L := 0xda2e (4)
fi

0x3a10:
0x0000000000003a10: jmp qword ptr [rip + 0x21c382]
L := 0x21fd98 (1)

0xda2e:
0x000000000000da2e: pop rbx
0x000000000000da2f: mov rax, rsi
0x000000000000da32: pop rbp
0x000000000000da33: pop r12
0x000000000000da35: pop r13
0x000000000000da37: pop r14
0x000000000000da39: ret 
L := 0x0 (130)

0x5a2e:
if
    0x0000000000005a2e: mov byte ptr [r9], cl
    0x0000000000005a31: movzx ecx, byte ptr [r8]
    0x0000000000005a35: add r10, 1
    0x0000000000005a39: add r9, 1
    0x0000000000005a3d: cmp cl, 0x3d
    0x0000000000005a40: jne 0x5a00
then
    L := 0x5a00 (2)
else
    L := 0x5a42 (2)
fi

0x3a30:
0x0000000000003a30: jmp qword ptr [rip + 0x21c372]
L := 0x21fda8 (1)

0x9a3d:
if
    0x0000000000009a3d: test rax, rax
    0x0000000000009a40: js 0xa856
then
    L := 0xa856 (2)
else
    if
        0x0000000000009a46: test rsi, rsi
        0x0000000000009a49: jne 0xa856
    then
        L := 0xa856 (2)
    else
        0x0000000000009a4f: lea rax, [rcx + rcx*4]
        0x0000000000009a53: lea rsi, [rax + rax*4]
        0x0000000000009a57: shl rsi, 4
        0x0000000000009a5b: call 0x144e0
        0x0000000000009a60: shl qword ptr [rip + 0x217951], 1
        0x0000000000009a67: mov rcx, qword ptr [rip + 0x217942]
        0x0000000000009a6e: mov rdi, rax
        0x0000000000009a71: mov qword ptr [rip + 0x217948], rax
        L := 0x9a78 (2)
    fi
fi

0x3a40:
0x0000000000003a40: jmp qword ptr [rip + 0x21c36a]
L := 0x21fdb0 (1)

0x5a42:
if
    0x0000000000005a42: test r12b, r12b
    0x0000000000005a45: je 0x5a50
then
    L := 0x5a50 (3)
else
    0x0000000000005a47: mov eax, edx
    0x0000000000005a49: mov r14, r8
    0x0000000000005a4c: jmp 0x5abf
    L := 0x5abf (3)
fi

0xda43:
if
    0x000000000000da43: test r13b, r13b
    0x000000000000da46: je 0xda2e
then
    L := 0xda2e (4)
else
    if
        0x000000000000da48: mov rax, qword ptr [rbx + 8]
        0x000000000000da4c: test rax, rax
        0x000000000000da4f: je 0xda80
    then
        0x000000000000da80: mov qword ptr [rbx], 0
        0x000000000000da87: jmp 0xda2e
        L := 0xda2e (4)
    else
        0x000000000000da51: movdqu xmm0, xmmword ptr [rax]
        0x000000000000da55: movups xmmword ptr [rbx], xmm0
        0x000000000000da58: mov qword ptr [rax], 0
        0x000000000000da5f: mov rdx, qword ptr [r12 + 0x48]
        0x000000000000da64: mov qword ptr [rax + 8], rdx
        0x000000000000da68: mov qword ptr [r12 + 0x48], rax
        0x000000000000da6d: mov rax, rsi
        0x000000000000da70: pop rbx
        0x000000000000da71: pop rbp
        0x000000000000da72: pop r12
        0x000000000000da74: pop r13
        0x000000000000da76: pop r14
        0x000000000000da78: ret 
        L := 0x0 (130)
    fi
fi

0x3a50:
0x0000000000003a50: jmp qword ptr [rip + 0x21c362]
L := 0x21fdb8 (1)

0x5a50:
0x0000000000005a50: mov byte ptr [r9], cl
0x0000000000005a53: add r8, 1
0x0000000000005a57: add r10, 1
0x0000000000005a5b: add r9, 1
0x0000000000005a5f: jmp 0x59ef
L := 0x59ef (3)

0x7a60:
if
    0x0000000000007a60: cmp byte ptr [rip + 0x2198b1], 0
    0x0000000000007a67: je 0x7a8d
then
    L := 0x7a8d (2)
else
    if
        0x0000000000007a69: mov rdx, qword ptr [rbx + 0x18]
        0x0000000000007a6d: mov rax, qword ptr [rbx + 0x20]
        0x0000000000007a71: sub rax, rdx
        0x0000000000007a74: cmp rax, 7
        0x0000000000007a78: jbe 0x7c68
    then
        0x0000000000007c68: mov esi, 8
        0x0000000000007c6d: mov rdi, rbx
        0x0000000000007c70: mov qword ptr [rsp + 0x10], r10
        0x0000000000007c75: mov qword ptr [rsp + 8], r9
        0x0000000000007c7a: call 0x154f0
        0x0000000000007c7f: mov rdx, qword ptr [rbx + 0x18]
        0x0000000000007c83: mov r10, qword ptr [rsp + 0x10]
        0x0000000000007c88: mov r9, qword ptr [rsp + 8]
        0x0000000000007c8d: jmp 0x7a7e
        L := 0x7a7e (2)
    else
        L := 0x7a7e (2)
    fi
fi

0x3a70:
0x0000000000003a70: jmp qword ptr [rip + 0x21c352]
L := 0x21fdc8 (1)

0x9a78:
if
    0x0000000000009a78: lea rax, [rcx + rcx*4]
    0x0000000000009a7c: lea rax, [rax + rax*4]
    0x0000000000009a80: lea rbx, [rdi + rax*8]
    0x0000000000009a84: xor eax, eax
    0x0000000000009a86: lea rdi, [rbx + 8]
    0x0000000000009a8a: mov rcx, rbx
    0x0000000000009a8d: mov qword ptr [rbx], 0
    0x0000000000009a94: mov qword ptr [rbx + 0xbc], 0
    0x0000000000009a9f: and rdi, 0xfffffffffffffff8
    0x0000000000009aa3: sub rcx, rdi
    0x0000000000009aa6: add ecx, 0xc4
    0x0000000000009aac: shr ecx, 3
    0x0000000000009aaf: rep stosq qword ptr [rdi], rax
    0x0000000000009ab2: mov qword ptr [rbx + 0x20], 0
    0x0000000000009aba: mov dword ptr [rbx + 0xa8], r14d
    0x0000000000009ac1: mov dword ptr [rbx + 0xc4], 0xffffffff
    0x0000000000009acb: cmp byte ptr [rip + 0x2178d7], 0
    0x0000000000009ad2: jne 0x9ae1
then
    L := 0x9ae1 (4)
else
    if
        0x0000000000009ad4: cmp byte ptr [rip + 0x2178cd], 0
        0x0000000000009adb: jne 0xa3f0
    then
        if
            0x000000000000a3f0: mov rdi, qword ptr [rbp - 0x388]
            0x000000000000a3f7: call 0x6190
            0x000000000000a3fc: movzx edx, al
            0x000000000000a3ff: test al, al
            0x000000000000a401: mov dword ptr [rbx + 0xc4], edx
            0x000000000000a407: je 0x9ae1
        then
            L := 0x9ae1 (4)
        else
            0x000000000000a40d: mov byte ptr [rip + 0x216f95], 1
            0x000000000000a414: jmp 0x9ae1
            L := 0x9ae1 (4)
        fi
    else
        L := 0x9ae1 (4)
    fi
fi

0x7a7e:
0x0000000000007a7e: mov rax, qword ptr [rip + 0x219773]
0x0000000000007a85: mov qword ptr [rdx], rax
0x0000000000007a88: add qword ptr [rbx + 0x18], 8
L := 0x7a8d (2)

0x3a80:
0x0000000000003a80: jmp qword ptr [rip + 0x21c34a]
L := 0x21fdd0 (1)

0x7a8d:
if
    0x0000000000007a8d: mov rdi, qword ptr [rsp + 0x28]
    0x0000000000007a92: mov rcx, qword ptr [rip + 0x2187ef]
    0x0000000000007a99: mov rdx, r10
    0x0000000000007a9c: mov esi, 1
    0x0000000000007aa1: add rdi, r9
    0x0000000000007aa4: call 0x3c80
    0x0000000000007aa9: mov rax, qword ptr [rip + 0x219748]
    0x0000000000007ab0: add rax, rbp
    0x0000000000007ab3: cmp byte ptr [rip + 0x21985e], 0
    0x0000000000007aba: mov qword ptr [rip + 0x219737], rax
    0x0000000000007ac1: je 0x7ae0
then
    L := 0x7ae0 (3)
else
    if
        0x0000000000007ac3: mov rcx, qword ptr [rbx + 0x18]
        0x0000000000007ac7: mov rdx, qword ptr [rbx + 0x20]
        0x0000000000007acb: sub rdx, rcx
        0x0000000000007ace: cmp rdx, 7
        0x0000000000007ad2: jbe 0x7c98
    then
        0x0000000000007c98: mov esi, 8
        0x0000000000007c9d: mov rdi, rbx
        0x0000000000007ca0: call 0x154f0
        0x0000000000007ca5: mov rcx, qword ptr [rbx + 0x18]
        0x0000000000007ca9: mov rax, qword ptr [rip + 0x219548]
        0x0000000000007cb0: jmp 0x7ad8
        L := 0x7ad8 (2)
    else
        L := 0x7ad8 (2)
    fi
fi

0xda90:
0x000000000000da90: xor esi, esi
0x000000000000da92: pop rbx
0x000000000000da93: mov rax, rsi
0x000000000000da96: pop rbp
0x000000000000da97: pop r12
0x000000000000da99: pop r13
0x000000000000da9b: pop r14
0x000000000000da9d: ret 
L := 0x0 (130)

0x3a90:
0x0000000000003a90: jmp qword ptr [rip + 0x21c342]
L := 0x21fdd8 (1)

0xdaa0:
if
    0x000000000000daa0: mov rdx, qword ptr [rdi]
    0x000000000000daa3: lea rcx, [rip + 0xc916]
    0x000000000000daaa: mov eax, 1
    0x000000000000daaf: cmp rdx, rcx
    0x000000000000dab2: je 0xdb15
then
    L := 0xdb15 (3)
else
    if
        0x000000000000dab4: movss xmm0, dword ptr [rdx + 8]
        0x000000000000dab9: ucomiss xmm0, dword ptr [rip + 0xc914]
        0x000000000000dac0: jbe 0xdb10
    then
        L := 0xdb10 (7)
    else
        if
            0x000000000000dac2: movss xmm1, dword ptr [rip + 0xc90e]
            0x000000000000daca: ucomiss xmm1, xmm0
            0x000000000000dacd: jbe 0xdb10
        then
            L := 0xdb10 (7)
        else
            if
                0x000000000000dacf: movss xmm1, dword ptr [rdx + 0xc]
                0x000000000000dad4: ucomiss xmm1, dword ptr [rip + 0xc901]
                0x000000000000dadb: jbe 0xdb10
            then
                L := 0xdb10 (7)
            else
                if
                    0x000000000000dadd: movss xmm1, dword ptr [rdx]
                    0x000000000000dae1: ucomiss xmm1, dword ptr [rip + 0xc8f8]
                    0x000000000000dae8: jb 0xdb10
                then
                    L := 0xdb10 (7)
                else
                    if
                        0x000000000000daea: addss xmm1, dword ptr [rip + 0xc8e2]
                        0x000000000000daf2: movss xmm2, dword ptr [rdx + 4]
                        0x000000000000daf7: ucomiss xmm2, xmm1
                        0x000000000000dafa: jbe 0xdb10
                    then
                        L := 0xdb10 (7)
                    else
                        if
                            0x000000000000dafc: movss xmm3, dword ptr [rip + 0xc8e0]
                            0x000000000000db04: ucomiss xmm3, xmm2
                            0x000000000000db07: jb 0xdb10
                        then
                            L := 0xdb10 (7)
                        else
                            if
                                0x000000000000db09: ucomiss xmm0, xmm1
                                0x000000000000db0c: ja 0xdb15
                            then
                                L := 0xdb15 (3)
                            else
                                0x000000000000db0e: nop 
                                L := 0xdb10 (7)
                            fi
                        fi
                    fi
                fi
            fi
        fi
    fi
fi

0x3aa0:
0x0000000000003aa0: jmp qword ptr [rip + 0x21c33a]
L := 0x21fde0 (1)

0x3ab0:
0x0000000000003ab0: jmp qword ptr [rip + 0x21c332]
L := 0x21fde8 (1)

0xfab0:
if
    0x000000000000fab0: push r12
    0x000000000000fab2: push rbp
    0x000000000000fab3: push rbx
    0x000000000000fab4: mov rbx, qword ptr [rip + 0x21192d]
    0x000000000000fabb: test rbx, rbx
    0x000000000000fabe: je 0xfadd
then
    L := 0xfadd (2)
else
    if
        0x000000000000fac0: cmp edi, dword ptr [rbx]
        0x000000000000fac2: jne 0xfad4
    then
        L := 0xfad4 (2)
    else
        0x000000000000fac4: jmp 0xfb30
        L := 0xfb30 (3)
    fi
fi

0x5abf:
0x0000000000005abf: mov qword ptr [rdi], r9
0x0000000000005ac2: mov qword ptr [rsi], r14
0x0000000000005ac5: mov qword ptr [rbx], r10
0x0000000000005ac8: pop rbx
0x0000000000005ac9: pop rbp
0x0000000000005aca: pop r12
0x0000000000005acc: pop r13
0x0000000000005ace: pop r14
0x0000000000005ad0: pop r15
0x0000000000005ad2: ret 
L := 0x0 (130)

0x3ac0:
0x0000000000003ac0: jmp qword ptr [rip + 0x21c32a]
L := 0x21fdf0 (1)

0x3ad0:
0x0000000000003ad0: jmp qword ptr [rip + 0x21c322]
L := 0x21fdf8 (1)

0xfad4:
if
    0x000000000000fad4: mov rbx, qword ptr [rbx + 8]
    0x000000000000fad8: test rbx, rbx
    0x000000000000fadb: jne 0xfad0
then
    if
        0x000000000000fad0: cmp dword ptr [rbx], edi
        0x000000000000fad2: je 0xfb30
    then
        L := 0xfb30 (3)
    else
        L := 0xfad4 (2)
    fi
else
    L := 0xfadd (2)
fi

0x7ad8:
0x0000000000007ad8: mov qword ptr [rcx], rax
0x0000000000007adb: add qword ptr [rbx + 0x18], 8
L := 0x7ae0 (3)

0xfadd:
if
    0x000000000000fadd: mov ebp, edi
    0x000000000000fadf: lea r12, [rip + 0x8164]
    0x000000000000fae6: call 0x39b0
    0x000000000000faeb: test rax, rax
    0x000000000000faee: mov edi, 0x18
    0x000000000000faf3: je 0xfb08
then
    L := 0xfb08 (2)
else
    0x000000000000faf5: mov r12, qword ptr [rax]
    0x000000000000faf8: mov rdi, r12
    0x000000000000fafb: call 0x3950
    0x000000000000fb00: lea rdi, [rax + 0x18]
    0x000000000000fb04: and rdi, 0xfffffffffffffff8
    L := 0xfb08 (2)
fi

0x3ae0:
0x0000000000003ae0: jmp qword ptr [rip + 0x21c31a]
L := 0x21fe00 (1)

0x7ae0:
if
    0x0000000000007ae0: test r12, r12
    0x0000000000007ae3: je 0x7b30
then
    L := 0x7b30 (4)
else
    if
        0x0000000000007ae5: mov rcx, qword ptr [rip + 0x21879c]
        0x0000000000007aec: lea rdi, [rip + 0x10151]
        0x0000000000007af3: mov edx, 6
        0x0000000000007af8: mov esi, 1
        0x0000000000007afd: call 0x3c80
        0x0000000000007b02: test r14b, r14b
        0x0000000000007b05: je 0x7b30
    then
        L := 0x7b30 (4)
    else
        if
            0x0000000000007b07: mov rax, qword ptr [rsp + 0x28]
            0x0000000000007b0c: mov rdi, qword ptr [rip + 0x218775]
            0x0000000000007b13: movzx edx, byte ptr [rax + rbp - 1]
            0x0000000000007b18: mov rax, qword ptr [rdi + 0x28]
            0x0000000000007b1c: cmp rax, qword ptr [rdi + 0x30]
            0x0000000000007b20: jae 0x7cd0
        then
            0x0000000000007cd0: movzx esi, dl
            0x0000000000007cd3: call 0x39d0
            0x0000000000007cd8: jmp 0x7b30
            L := 0x7b30 (4)
        else
            0x0000000000007b26: lea rcx, [rax + 1]
            0x0000000000007b2a: mov qword ptr [rdi + 0x28], rcx
            0x0000000000007b2e: mov byte ptr [rax], dl
            L := 0x7b30 (4)
        fi
    fi
fi

0x9ae1:
if
    0x0000000000009ae1: test r13b, r13b
    0x0000000000009ae4: movzx r8d, byte ptr [rip + 0x217825]
    0x0000000000009aec: je 0x9cd0
then
    if
        0x0000000000009cd0: test r8b, r8b
        0x0000000000009cd3: jne 0xa0d0
    then
        if
            0x000000000000a0d0: mov rax, qword ptr [rbp - 0x388]
            0x000000000000a0d7: movzx edx, byte ptr [rax]
            0x000000000000a0da: cmp dl, 0x2f
            0x000000000000a0dd: jne 0xa308
        then
            if
                0x000000000000a308: movzx ecx, byte ptr [r15]
                0x000000000000a30c: mov r12, qword ptr [rbp - 0x388]
                0x000000000000a313: test cl, cl
                0x000000000000a315: je 0xa0ea
            then
                L := 0xa0ea (3)
            else
                L := 0xa31b (3)
            fi
        else
            0x000000000000a0e3: mov r12, qword ptr [rbp - 0x388]
            L := 0xa0ea (3)
        fi
    else
        if
            0x0000000000009cd9: cmp byte ptr [rip + 0x2175c1], 0
            0x0000000000009ce0: jne 0x9e10
        then
            L := 0x9e10 (15)
        else
            if
                0x0000000000009ce6: cmp r14d, 3
                0x0000000000009cea: je 0xa730
            then
                if
                    0x000000000000a730: cmp byte ptr [rip + 0x216bdb], 0
                    0x000000000000a737: je 0x9cf0
                then
                    L := 0x9cf0 (3)
                else
                    if
                        0x000000000000a73d: mov edi, 0x13
                        0x000000000000a742: mov byte ptr [rbp - 0x390], r8b
                        0x000000000000a749: call 0x5c50
                        0x000000000000a74e: test al, al
                        0x000000000000a750: movzx r8d, byte ptr [rbp - 0x390]
                        0x000000000000a758: jne 0x9e10
                    then
                        L := 0x9e10 (15)
                    else
                        if
                            0x000000000000a75e: mov edi, 0x12
                            0x000000000000a763: call 0x5c50
                            0x000000000000a768: test al, al
                            0x000000000000a76a: movzx r8d, byte ptr [rbp - 0x390]
                            0x000000000000a772: jne 0x9e10
                        then
                            L := 0x9e10 (15)
                        else
                            if
                                0x000000000000a778: mov edi, 0x14
                                0x000000000000a77d: call 0x5c50
                                0x000000000000a782: test al, al
                                0x000000000000a784: movzx r8d, byte ptr [rbp - 0x390]
                                0x000000000000a78c: jne 0x9e10
                            then
                                L := 0x9e10 (15)
                            else
                                0x000000000000a792: jmp 0x9cf0
                                L := 0x9cf0 (3)
                            fi
                        fi
                    fi
                fi
            else
                L := 0x9cf0 (3)
            fi
        fi
    fi
else
    if
        0x0000000000009af2: mov r12, qword ptr [rbp - 0x388]
        0x0000000000009af9: movzx edx, byte ptr [r12]
        0x0000000000009afe: cmp dl, 0x2f
        0x0000000000009b01: je 0xa678
    then
        0x000000000000a678: mov r12, qword ptr [rbp - 0x388]
        0x000000000000a67f: jmp 0x9b13
        L := 0x9b13 (3)
    else
        if
            0x0000000000009b07: movzx ecx, byte ptr [r15]
            0x0000000000009b0b: test cl, cl
            0x0000000000009b0d: jne 0xa31b
        then
            L := 0xa31b (3)
        else
            L := 0x9b13 (3)
        fi
    fi
fi

0x5ae5:
0x0000000000005ae5: mov r14, r8
0x0000000000005ae8: mov eax, 1
0x0000000000005aed: jmp 0x5abf
L := 0x5abf (3)

0x3af0:
0x0000000000003af0: jmp qword ptr [rip + 0x21c312]
L := 0x21fe08 (1)

0x3b00:
0x0000000000003b00: jmp qword ptr [rip + 0x21c30a]
L := 0x21fe10 (1)

0xfb08:
0x000000000000fb08: call 0x14480
0x000000000000fb0d: lea rdi, [rax + 0x10]
0x000000000000fb11: mov dword ptr [rax], ebp
0x000000000000fb13: mov rsi, r12
0x000000000000fb16: mov rbx, rax
0x000000000000fb19: call 0x3830
0x000000000000fb1e: mov rax, qword ptr [rip + 0x2118c3]
0x000000000000fb25: mov qword ptr [rip + 0x2118bc], rbx
0x000000000000fb2c: mov qword ptr [rbx + 8], rax
L := 0xfb30 (3)

0xdb10:
0x000000000000db10: mov qword ptr [rdi], rcx
0x000000000000db13: xor eax, eax
L := 0xdb15 (3)

0x13b10:
if
    0x0000000000013b10: sub rsp, 0x48
    0x0000000000013b14: mov rax, rdx
    0x0000000000013b17: mov rdx, qword ptr fs:[0x28]
    0x0000000000013b20: mov qword ptr [rsp + 0x38], rdx
    0x0000000000013b25: xor edx, edx
    0x0000000000013b27: cmp esi, 0xa
    0x0000000000013b2a: je 0x13b94
then
    0x0000000000013b94: call 0x37e0
    L := 0x13b99 (2)
else
    if
        0x0000000000013b2c: mov dword ptr [rsp], esi
        0x0000000000013b2f: mov rcx, rsp
        0x0000000000013b32: mov rdx, -1
        0x0000000000013b39: mov rsi, rax
        0x0000000000013b3c: mov qword ptr [rsp + 4], 0
        0x0000000000013b45: mov qword ptr [rsp + 0xc], 0x4000000
        0x0000000000013b4e: mov qword ptr [rsp + 0x14], 0
        0x0000000000013b57: mov qword ptr [rsp + 0x1c], 0
        0x0000000000013b60: mov qword ptr [rsp + 0x24], 0
        0x0000000000013b69: mov qword ptr [rsp + 0x2c], 0
        0x0000000000013b72: mov dword ptr [rsp + 0x34], 0
        0x0000000000013b7a: call 0x133a0
        0x0000000000013b7f: mov rcx, qword ptr [rsp + 0x38]
        0x0000000000013b84: xor rcx, qword ptr fs:[0x28]
        0x0000000000013b8d: jne 0x13b99
    then
        L := 0x13b99 (2)
    else
        0x0000000000013b8f: add rsp, 0x48
        0x0000000000013b93: ret 
        L := 0x0 (130)
    fi
fi

0x3b10:
0x0000000000003b10: jmp qword ptr [rip + 0x21c302]
L := 0x21fe18 (1)

0x9b13:
if
    0x0000000000009b13: test r8b, r8b
    0x0000000000009b16: jne 0xa0ea
then
    L := 0xa0ea (3)
else
    L := 0x9b1c (4)
fi

0xdb15:
0x000000000000db15: ret 
L := 0x0 (130)

0x9b1c:
if
    0x0000000000009b1c: mov ecx, dword ptr [rip + 0x2177d6]
    0x0000000000009b22: lea r15, [rbx + 0x18]
    0x0000000000009b26: cmp ecx, 3
    0x0000000000009b29: jb 0x9e50
then
    L := 0x9e50 (6)
else
    if
        0x0000000000009b2f: cmp ecx, 4
        0x0000000000009b32: jbe 0xa130
    then
        if
            0x000000000000a130: test r13b, r13b
            0x000000000000a133: je 0x9e50
        then
            L := 0x9e50 (6)
        else
            if
                0x000000000000a139: mov rdx, r15
                0x000000000000a13c: mov rsi, r12
                0x000000000000a13f: mov edi, 1
                0x000000000000a144: mov dword ptr [rbp - 0x390], ecx
                0x000000000000a14a: call 0x3be0
                0x000000000000a14f: mov ecx, dword ptr [rbp - 0x390]
                0x000000000000a155: cmp ecx, 3
                0x000000000000a158: je 0xa177
            then
                L := 0xa177 (2)
            else
                if
                    0x000000000000a15a: test eax, eax
                    0x000000000000a15c: js 0xa6b0
                then
                    if
                        0x000000000000a6b0: call 0x37f0
                        0x000000000000a6b5: cmp dword ptr [rax], 2
                        0x000000000000a6b8: je 0x9e50
                    then
                        L := 0x9e50 (6)
                    else
                        L := 0xa6be (2)
                    fi
                else
                    if
                        0x000000000000a162: mov edx, dword ptr [rbx + 0x30]
                        0x000000000000a165: and edx, 0xf000
                        0x000000000000a16b: cmp edx, 0x4000
                        0x000000000000a171: jne 0x9e50
                    then
                        L := 0x9e50 (6)
                    else
                        L := 0xa177 (2)
                    fi
                fi
            fi
        fi
    else
        if
            0x0000000000009b38: cmp ecx, 5
            0x0000000000009b3b: jne 0x9e50
        then
            L := 0x9e50 (6)
        else
            L := 0x9b41 (2)
        fi
    fi
fi

0xbb20:
if
    0x000000000000bb20: push r12
    0x000000000000bb22: push rbp
    0x000000000000bb23: mov r12d, edi
    0x000000000000bb26: push rbx
    0x000000000000bb27: mov edx, 5
    0x000000000000bb2c: add rsp, -0x80
    0x000000000000bb30: mov rbx, qword ptr [rip + 0x2158c9]
    0x000000000000bb37: mov rax, qword ptr fs:[0x28]
    0x000000000000bb40: mov qword ptr [rsp + 0x78], rax
    0x000000000000bb45: xor eax, eax
    0x000000000000bb47: test edi, edi
    0x000000000000bb49: je 0xbb7a
then
    L := 0xbb7a (2)
else
    0x000000000000bb4b: lea rsi, [rip + 0xc6d6]
    0x000000000000bb52: xor edi, edi
    0x000000000000bb54: call 0x3930
    0x000000000000bb59: mov rdi, qword ptr [rip + 0x214760]
    0x000000000000bb60: mov rdx, rax
    0x000000000000bb63: mov rcx, rbx
    0x000000000000bb66: mov esi, 1
    0x000000000000bb6b: xor eax, eax
    0x000000000000bb6d: call 0x3df0
    L := 0xbb72 (2)
fi

0x3b20:
0x0000000000003b20: jmp qword ptr [rip + 0x21c2fa]
L := 0x21fe20 (1)

0xdb20:
if
    0x000000000000db20: push r15
    0x000000000000db22: push r14
    0x000000000000db24: push r13
    0x000000000000db26: push r12
    0x000000000000db28: push rbp
    0x000000000000db29: push rbx
    0x000000000000db2a: sub rsp, 8
    0x000000000000db2e: mov r12, qword ptr [rsi]
    0x000000000000db31: cmp r12, qword ptr [rsi + 8]
    0x000000000000db35: jae 0xdc18
then
    L := 0xdc18 (2)
else
    0x000000000000db3b: mov rbp, rdi
    0x000000000000db3e: mov r13, rsi
    0x000000000000db41: mov r14d, edx
    0x000000000000db44: nop dword ptr [rax]
    L := 0xdb48 (2)
fi

0x3b30:
0x0000000000003b30: jmp qword ptr [rip + 0x21c2f2]
L := 0x21fe28 (1)

0x7b30:
if
    0x0000000000007b30: mov rdi, qword ptr [rsp + 0x28]
    0x0000000000007b35: cmp rdi, qword ptr [rsp]
    0x0000000000007b39: je 0x7b45
then
    L := 0x7b45 (3)
else
    if
        0x0000000000007b3b: cmp rdi, r13
        0x0000000000007b3e: je 0x7b45
    then
        L := 0x7b45 (3)
    else
        0x0000000000007b40: call 0x3e70
        L := 0x7b45 (3)
    fi
fi

0xfb30:
if
    0x000000000000fb30: cmp byte ptr [rbx + 0x10], 0
    0x000000000000fb34: je 0xfb40
then
    0x000000000000fb40: xor eax, eax
    0x000000000000fb42: jmp 0xfb3a
    L := 0xfb3a (2)
else
    0x000000000000fb36: lea rax, [rbx + 0x10]
    L := 0xfb3a (2)
fi

0xfb3a:
0x000000000000fb3a: pop rbx
0x000000000000fb3b: pop rbp
0x000000000000fb3c: pop r12
0x000000000000fb3e: ret 
L := 0x0 (130)

0x3b40:
0x0000000000003b40: jmp qword ptr [rip + 0x21c2ea]
L := 0x21fe30 (1)

0x9b41:
if
    0x0000000000009b41: mov rdx, r15
    0x0000000000009b44: mov rsi, r12
    0x0000000000009b47: mov edi, 1
    0x0000000000009b4c: call 0x3be0
    0x0000000000009b51: test eax, eax
    0x0000000000009b53: mov edx, 1
    0x0000000000009b58: jne 0x9e6a
then
    L := 0x9e6a (2)
else
    L := 0x9b5e (3)
fi

0x7b45:
if
    0x0000000000007b45: movzx eax, byte ptr [rsp + 0x27]
    0x0000000000007b4a: add rax, rbp
    0x0000000000007b4d: mov rbx, qword ptr [rsp + 0x2038]
    0x0000000000007b55: xor rbx, qword ptr fs:[0x28]
    0x0000000000007b5e: jne 0x7d0c
then
    if
        0x0000000000007d0c: call 0x3970
        0x0000000000007d11: nop dword ptr [rax + rax]
        0x0000000000007d16: nop word ptr cs:[rax + rax]
        0x0000000000007d20: push r15
        0x0000000000007d22: push r14
        0x0000000000007d24: mov r15d, esi
        0x0000000000007d27: push r13
        0x0000000000007d29: push r12
        0x0000000000007d2b: mov r14, rdi
        0x0000000000007d2e: push rbp
        0x0000000000007d2f: push rbx
        0x0000000000007d30: mov r13, rdx
        0x0000000000007d33: mov r12, rcx
        0x0000000000007d36: sub rsp, 0x18
        0x0000000000007d3a: test sil, sil
        0x0000000000007d3d: movzx eax, byte ptr [rip + 0x2195ce]
        0x0000000000007d44: je 0x7da0
    then
        if
            0x0000000000007da0: test al, al
            0x0000000000007da2: mov rbp, qword ptr [rdi]
            0x0000000000007da5: je 0x7d52
        then
            L := 0x7d52 (3)
        else
            if
                0x0000000000007da7: cmp byte ptr [rip + 0x2195e2], 0
                0x0000000000007dae: movzx edx, byte ptr [rdi + 0xb9]
                0x0000000000007db5: jne 0x7f88
            then
                if
                    0x0000000000007f88: test dl, dl
                    0x0000000000007f8a: je 0x7dbb
                then
                    L := 0x7dbb (2)
                else
                    0x0000000000007f90: mov r8d, dword ptr [r14 + 0xac]
                    0x0000000000007f97: jmp 0x7dbf
                    L := 0x7dbf (3)
                fi
            else
                L := 0x7dbb (2)
            fi
        fi
    else
        if
            0x0000000000007d46: test al, al
            0x0000000000007d48: mov rbp, qword ptr [rdi + 8]
            0x0000000000007d4c: jne 0x7ec8
        then
            if
                0x0000000000007ec8: cmp byte ptr [rdi + 0xb9], 0
                0x0000000000007ecf: mov r8d, dword ptr [rdi + 0xac]
                0x0000000000007ed6: jne 0x7f00
            then
                if
                    0x0000000000007f00: movzx ecx, byte ptr [r14 + 0xb8]
                    0x0000000000007f08: xor edx, edx
                    0x0000000000007f0a: test cl, cl
                    0x0000000000007f0c: je 0x7dcf
                then
                    L := 0x7dcf (2)
                else
                    L := 0x7f12 (2)
                fi
            else
                if
                    0x0000000000007ed8: mov edi, 0xc
                    0x0000000000007edd: call 0x5c50
                    0x0000000000007ee2: test al, al
                    0x0000000000007ee4: mov edx, 0xffffffff
                    0x0000000000007ee9: je 0x7dbf
                then
                    L := 0x7dbf (3)
                else
                    0x0000000000007eef: mov ecx, 0xc0
                    0x0000000000007ef4: jmp 0x7e27
                    L := 0x7e27 (18)
                fi
            fi
        else
            L := 0x7d52 (3)
        fi
    fi
else
    0x0000000000007b64: add rsp, 0x2048
    0x0000000000007b6b: pop rbx
    0x0000000000007b6c: pop rbp
    0x0000000000007b6d: pop r12
    0x0000000000007b6f: pop r13
    0x0000000000007b71: pop r14
    0x0000000000007b73: pop r15
    0x0000000000007b75: ret 
    L := 0x0 (130)
fi

0xdb48:
if
    0x000000000000db48: mov r15, qword ptr [r12]
    0x000000000000db4c: test r15, r15
    0x000000000000db4f: je 0xdc0a
then
    L := 0xdc0a (3)
else
    if
        0x000000000000db55: mov rbx, qword ptr [r12 + 8]
        0x000000000000db5a: test rbx, rbx
        0x000000000000db5d: jne 0xdb7c
    then
        L := 0xdb7c (3)
    else
        0x000000000000db5f: jmp 0xdbbb
        L := 0xdbbb (2)
    fi
fi

0x9b5e:
if
    0x0000000000009b5e: cmp r14d, 5
    0x0000000000009b62: mov byte ptr [rbx + 0xb8], 1
    0x0000000000009b69: je 0xa070
then
    L := 0xa070 (2)
else
    if
        0x0000000000009b6f: mov eax, dword ptr [rbx + 0x30]
        0x0000000000009b72: and eax, 0xf000
        0x0000000000009b77: cmp eax, 0x8000
        0x0000000000009b7c: je 0xa070
    then
        L := 0xa070 (2)
    else
        L := 0x9b82 (4)
    fi
fi

0x3b60:
0x0000000000003b60: jmp qword ptr [rip + 0x21c2da]
L := 0x21fe40 (1)

0x3b70:
0x0000000000003b70: jmp qword ptr [rip + 0x21c2d2]
L := 0x21fe48 (1)

0xbb72:
0x000000000000bb72: mov edi, r12d
0x000000000000bb75: call 0x3dd0
L := 0xbb7a (2)

0xbb7a:
if
    0x000000000000bb7a: lea rsi, [rip + 0xc6cf]
    0x000000000000bb81: xor edi, edi
    0x000000000000bb83: lea rbp, [rip + 0xc1f8]
    0x000000000000bb8a: call 0x3930
    0x000000000000bb8f: mov rdx, rbx
    0x000000000000bb92: mov rsi, rax
    0x000000000000bb95: mov edi, 1
    0x000000000000bb9a: xor eax, eax
    0x000000000000bb9c: call 0x3cd0
    0x000000000000bba1: mov rbx, qword ptr [rip + 0x2146e0]
    0x000000000000bba8: lea rsi, [rip + 0xc6c9]
    0x000000000000bbaf: mov edx, 5
    0x000000000000bbb4: xor edi, edi
    0x000000000000bbb6: call 0x3930
    0x000000000000bbbb: mov rsi, rbx
    0x000000000000bbbe: mov rdi, rax
    0x000000000000bbc1: call 0x3af0
    0x000000000000bbc6: mov rbx, qword ptr [rip + 0x2146bb]
    0x000000000000bbcd: lea rsi, [rip + 0xc734]
    0x000000000000bbd4: mov edx, 5
    0x000000000000bbd9: xor edi, edi
    0x000000000000bbdb: call 0x3930
    0x000000000000bbe0: mov rsi, rbx
    0x000000000000bbe3: mov rdi, rax
    0x000000000000bbe6: call 0x3af0
    0x000000000000bbeb: mov rbx, qword ptr [rip + 0x214696]
    0x000000000000bbf2: lea rsi, [rip + 0xc75f]
    0x000000000000bbf9: mov edx, 5
    0x000000000000bbfe: xor edi, edi
    0x000000000000bc00: call 0x3930
    0x000000000000bc05: mov rsi, rbx
    0x000000000000bc08: mov rdi, rax
    0x000000000000bc0b: call 0x3af0
    0x000000000000bc10: mov rbx, qword ptr [rip + 0x214671]
    0x000000000000bc17: lea rsi, [rip + 0xc84a]
    0x000000000000bc1e: mov edx, 5
    0x000000000000bc23: xor edi, edi
    0x000000000000bc25: call 0x3930
    0x000000000000bc2a: mov rsi, rbx
    0x000000000000bc2d: mov rdi, rax
    0x000000000000bc30: call 0x3af0
    0x000000000000bc35: mov rbx, qword ptr [rip + 0x21464c]
    0x000000000000bc3c: lea rsi, [rip + 0xca6d]
    0x000000000000bc43: mov edx, 5
    0x000000000000bc48: xor edi, edi
    0x000000000000bc4a: call 0x3930
    0x000000000000bc4f: mov rsi, rbx
    0x000000000000bc52: mov rdi, rax
    0x000000000000bc55: call 0x3af0
    0x000000000000bc5a: mov rbx, qword ptr [rip + 0x214627]
    0x000000000000bc61: lea rsi, [rip + 0xcbb8]
    0x000000000000bc68: mov edx, 5
    0x000000000000bc6d: xor edi, edi
    0x000000000000bc6f: call 0x3930
    0x000000000000bc74: mov rsi, rbx
    0x000000000000bc77: mov rdi, rax
    0x000000000000bc7a: call 0x3af0
    0x000000000000bc7f: mov rbx, qword ptr [rip + 0x214602]
    0x000000000000bc86: lea rsi, [rip + 0xcd3b]
    0x000000000000bc8d: mov edx, 5
    0x000000000000bc92: xor edi, edi
    0x000000000000bc94: call 0x3930
    0x000000000000bc99: mov rsi, rbx
    0x000000000000bc9c: mov rdi, rax
    0x000000000000bc9f: call 0x3af0
    0x000000000000bca4: mov rbx, qword ptr [rip + 0x2145dd]
    0x000000000000bcab: lea rsi, [rip + 0xcd56]
    0x000000000000bcb2: mov edx, 5
    0x000000000000bcb7: xor edi, edi
    0x000000000000bcb9: call 0x3930
    0x000000000000bcbe: mov rsi, rbx
    0x000000000000bcc1: mov rdi, rax
    0x000000000000bcc4: call 0x3af0
    0x000000000000bcc9: mov rbx, qword ptr [rip + 0x2145b8]
    0x000000000000bcd0: lea rsi, [rip + 0xce29]
    0x000000000000bcd7: mov edx, 5
    0x000000000000bcdc: xor edi, edi
    0x000000000000bcde: call 0x3930
    0x000000000000bce3: mov rsi, rbx
    0x000000000000bce6: mov rdi, rax
    0x000000000000bce9: call 0x3af0
    0x000000000000bcee: mov rbx, qword ptr [rip + 0x214593]
    0x000000000000bcf5: lea rsi, [rip + 0xcf14]
    0x000000000000bcfc: mov edx, 5
    0x000000000000bd01: xor edi, edi
    0x000000000000bd03: call 0x3930
    0x000000000000bd08: mov rsi, rbx
    0x000000000000bd0b: mov rdi, rax
    0x000000000000bd0e: call 0x3af0
    0x000000000000bd13: mov rbx, qword ptr [rip + 0x21456e]
    0x000000000000bd1a: lea rsi, [rip + 0xd097]
    0x000000000000bd21: mov edx, 5
    0x000000000000bd26: xor edi, edi
    0x000000000000bd28: call 0x3930
    0x000000000000bd2d: mov rsi, rbx
    0x000000000000bd30: mov rdi, rax
    0x000000000000bd33: call 0x3af0
    0x000000000000bd38: mov rbx, qword ptr [rip + 0x214549]
    0x000000000000bd3f: lea rsi, [rip + 0xd10a]
    0x000000000000bd46: mov edx, 5
    0x000000000000bd4b: xor edi, edi
    0x000000000000bd4d: call 0x3930
    0x000000000000bd52: mov rsi, rbx
    0x000000000000bd55: mov rdi, rax
    0x000000000000bd58: call 0x3af0
    0x000000000000bd5d: mov rbx, qword ptr [rip + 0x214524]
    0x000000000000bd64: lea rsi, [rip + 0xd295]
    0x000000000000bd6b: mov edx, 5
    0x000000000000bd70: xor edi, edi
    0x000000000000bd72: call 0x3930
    0x000000000000bd77: mov rsi, rbx
    0x000000000000bd7a: mov rdi, rax
    0x000000000000bd7d: call 0x3af0
    0x000000000000bd82: mov rbx, qword ptr [rip + 0x2144ff]
    0x000000000000bd89: lea rsi, [rip + 0xd3d8]
    0x000000000000bd90: mov edx, 5
    0x000000000000bd95: xor edi, edi
    0x000000000000bd97: call 0x3930
    0x000000000000bd9c: mov rsi, rbx
    0x000000000000bd9f: mov rdi, rax
    0x000000000000bda2: call 0x3af0
    0x000000000000bda7: mov rbx, qword ptr [rip + 0x2144da]
    0x000000000000bdae: lea rsi, [rip + 0xd4e3]
    0x000000000000bdb5: mov edx, 5
    0x000000000000bdba: xor edi, edi
    0x000000000000bdbc: call 0x3930
    0x000000000000bdc1: mov rsi, rbx
    0x000000000000bdc4: mov rdi, rax
    0x000000000000bdc7: call 0x3af0
    0x000000000000bdcc: mov rbx, qword ptr [rip + 0x2144b5]
    0x000000000000bdd3: lea rsi, [rip + 0xd6be]
    0x000000000000bdda: mov edx, 5
    0x000000000000bddf: xor edi, edi
    0x000000000000bde1: call 0x3930
    0x000000000000bde6: mov rsi, rbx
    0x000000000000bde9: mov rdi, rax
    0x000000000000bdec: call 0x3af0
    0x000000000000bdf1: mov rbx, qword ptr [rip + 0x214490]
    0x000000000000bdf8: lea rsi, [rip + 0xd761]
    0x000000000000bdff: mov edx, 5
    0x000000000000be04: xor edi, edi
    0x000000000000be06: call 0x3930
    0x000000000000be0b: mov rsi, rbx
    0x000000000000be0e: mov rdi, rax
    0x000000000000be11: call 0x3af0
    0x000000000000be16: mov rbx, qword ptr [rip + 0x21446b]
    0x000000000000be1d: lea rsi, [rip + 0xd944]
    0x000000000000be24: mov edx, 5
    0x000000000000be29: xor edi, edi
    0x000000000000be2b: call 0x3930
    0x000000000000be30: mov rsi, rbx
    0x000000000000be33: mov rdi, rax
    0x000000000000be36: call 0x3af0
    0x000000000000be3b: mov rbx, qword ptr [rip + 0x214446]
    0x000000000000be42: lea rsi, [rip + 0xdb37]
    0x000000000000be49: mov edx, 5
    0x000000000000be4e: xor edi, edi
    0x000000000000be50: call 0x3930
    0x000000000000be55: mov rsi, rbx
    0x000000000000be58: mov rdi, rax
    0x000000000000be5b: call 0x3af0
    0x000000000000be60: mov rbx, qword ptr [rip + 0x214421]
    0x000000000000be67: lea rsi, [rip + 0xdba2]
    0x000000000000be6e: mov edx, 5
    0x000000000000be73: xor edi, edi
    0x000000000000be75: call 0x3930
    0x000000000000be7a: mov rsi, rbx
    0x000000000000be7d: mov rdi, rax
    0x000000000000be80: call 0x3af0
    0x000000000000be85: mov rbx, qword ptr [rip + 0x2143fc]
    0x000000000000be8c: lea rsi, [rip + 0xdcf5]
    0x000000000000be93: xor edi, edi
    0x000000000000be95: mov edx, 5
    0x000000000000be9a: call 0x3930
    0x000000000000be9f: mov rsi, rbx
    0x000000000000bea2: mov rdi, rax
    0x000000000000bea5: call 0x3af0
    0x000000000000beaa: mov rbx, qword ptr [rip + 0x2143d7]
    0x000000000000beb1: lea rsi, [rip + 0xde40]
    0x000000000000beb8: mov edx, 5
    0x000000000000bebd: xor edi, edi
    0x000000000000bebf: call 0x3930
    0x000000000000bec4: mov rsi, rbx
    0x000000000000bec7: mov rdi, rax
    0x000000000000beca: call 0x3af0
    0x000000000000becf: mov rbx, qword ptr [rip + 0x2143b2]
    0x000000000000bed6: lea rsi, [rip + 0xde4b]
    0x000000000000bedd: mov edx, 5
    0x000000000000bee2: xor edi, edi
    0x000000000000bee4: call 0x3930
    0x000000000000bee9: mov rsi, rbx
    0x000000000000beec: mov rdi, rax
    0x000000000000beef: call 0x3af0
    0x000000000000bef4: mov rbx, qword ptr [rip + 0x21438d]
    0x000000000000befb: lea rsi, [rip + 0xde5e]
    0x000000000000bf02: mov edx, 5
    0x000000000000bf07: xor edi, edi
    0x000000000000bf09: call 0x3930
    0x000000000000bf0e: mov rsi, rbx
    0x000000000000bf11: mov rdi, rax
    0x000000000000bf14: call 0x3af0
    0x000000000000bf19: mov rbx, qword ptr [rip + 0x214368]
    0x000000000000bf20: lea rsi, [rip + 0xded9]
    0x000000000000bf27: mov edx, 5
    0x000000000000bf2c: xor edi, edi
    0x000000000000bf2e: call 0x3930
    0x000000000000bf33: mov rsi, rbx
    0x000000000000bf36: mov rdi, rax
    0x000000000000bf39: call 0x3af0
    0x000000000000bf3e: mov rbx, qword ptr [rip + 0x214343]
    0x000000000000bf45: lea rsi, [rip + 0xdfd4]
    0x000000000000bf4c: xor edi, edi
    0x000000000000bf4e: mov edx, 5
    0x000000000000bf53: call 0x3930
    0x000000000000bf58: mov rsi, rbx
    0x000000000000bf5b: mov rdi, rax
    0x000000000000bf5e: call 0x3af0
    0x000000000000bf63: mov eax, dword ptr [rip + 0x214277]
    0x000000000000bf69: cmp eax, 1
    0x000000000000bf6c: je 0xbf83
then
    L := 0xbf83 (2)
else
    0x000000000000bf6e: cmp eax, 2
    0x000000000000bf71: lea rbp, [rip + 0xbd86]
    0x000000000000bf78: lea rax, [rip + 0xbd80]
    0x000000000000bf7f: cmove rbp, rax
    L := 0xbf83 (2)
fi

0xdb7c:
if
    0x000000000000db7c: mov r15, qword ptr [rbx]
    0x000000000000db7f: mov rdi, rbp
    0x000000000000db82: mov rsi, r15
    0x000000000000db85: call 0xd950
    0x000000000000db8a: cmp qword ptr [rax], 0
    0x000000000000db8e: mov rdx, qword ptr [rbx + 8]
    0x000000000000db92: jne 0xdb68
then
    if
        0x000000000000db68: mov rcx, qword ptr [rax + 8]
        0x000000000000db6c: test rdx, rdx
        0x000000000000db6f: mov qword ptr [rbx + 8], rcx
        0x000000000000db73: mov qword ptr [rax + 8], rbx
        0x000000000000db77: mov rbx, rdx
        0x000000000000db7a: je 0xdbb7
    then
        L := 0xdbb7 (2)
    else
        L := 0xdb7c (3)
    fi
else
    if
        0x000000000000db94: mov qword ptr [rax], r15
        0x000000000000db97: add qword ptr [rbp + 0x18], 1
        0x000000000000db9c: test rdx, rdx
        0x000000000000db9f: mov qword ptr [rbx], 0
        0x000000000000dba6: mov rax, qword ptr [rbp + 0x48]
        0x000000000000dbaa: mov qword ptr [rbx + 8], rax
        0x000000000000dbae: mov qword ptr [rbp + 0x48], rbx
        0x000000000000dbb2: mov rbx, rdx
        0x000000000000dbb5: jne 0xdb7c
    then
        L := 0xdb7c (3)
    else
        L := 0xdbb7 (2)
    fi
fi

0x3b80:
0x0000000000003b80: jmp qword ptr [rip + 0x21c2ca]
L := 0x21fe50 (1)

0x9b82:
if
    0x0000000000009b82: mov r11d, dword ptr [rip + 0x2177af]
    0x0000000000009b89: test r11d, r11d
    0x0000000000009b8c: je 0x9ea0
then
    L := 0x9ea0 (2)
else
    if
        0x0000000000009b92: cmp byte ptr [rip + 0x2177cc], 0
        0x0000000000009b99: jne 0x9ea0
    then
        L := 0x9ea0 (2)
    else
        L := 0x9b9f (2)
    fi
fi

0x13b99:
0x0000000000013b99: call 0x3970
0x0000000000013b9e: nop 
L := 0x13ba0 (2)

0x9b9f:
if
    0x0000000000009b9f: mov eax, dword ptr [rbx + 0x30]
    0x0000000000009ba2: and eax, 0xf000
    0x0000000000009ba7: cmp eax, 0xa000
    0x0000000000009bac: je 0xa478
then
    L := 0xa478 (2)
else
    L := 0x9bb2 (3)
fi

0x13ba0:
if
    0x0000000000013ba0: sub rsp, 0x48
    0x0000000000013ba4: mov r9, rcx
    0x0000000000013ba7: mov rcx, qword ptr [rip + 0x20d9a2]
    0x0000000000013bae: movdqa xmm0, xmmword ptr [rip + 0x20d96a]
    0x0000000000013bb6: mov rax, qword ptr fs:[0x28]
    0x0000000000013bbf: mov qword ptr [rsp + 0x38], rax
    0x0000000000013bc4: xor eax, eax
    0x0000000000013bc6: movaps xmmword ptr [rsp], xmm0
    0x0000000000013bca: test rsi, rsi
    0x0000000000013bcd: mov qword ptr [rsp + 0x30], rcx
    0x0000000000013bd2: mov dword ptr [rsp], 0xa
    0x0000000000013bd9: movdqa xmm0, xmmword ptr [rip + 0x20d94f]
    0x0000000000013be1: movaps xmmword ptr [rsp + 0x10], xmm0
    0x0000000000013be6: movdqa xmm0, xmmword ptr [rip + 0x20d952]
    0x0000000000013bee: movaps xmmword ptr [rsp + 0x20], xmm0
    0x0000000000013bf3: je 0x13c27
then
    L := 0x13c27 (2)
else
    if
        0x0000000000013bf5: test rdx, rdx
        0x0000000000013bf8: je 0x13c27
    then
        L := 0x13c27 (2)
    else
        if
            0x0000000000013bfa: mov qword ptr [rsp + 0x28], rsi
            0x0000000000013bff: mov qword ptr [rsp + 0x30], rdx
            0x0000000000013c04: mov rcx, rsp
            0x0000000000013c07: mov rdx, r8
            0x0000000000013c0a: mov rsi, r9
            0x0000000000013c0d: call 0x133a0
            0x0000000000013c12: mov rdi, qword ptr [rsp + 0x38]
            0x0000000000013c17: xor rdi, qword ptr fs:[0x28]
            0x0000000000013c20: jne 0x13c2c
        then
            L := 0x13c2c (2)
        else
            0x0000000000013c22: add rsp, 0x48
            0x0000000000013c26: ret 
            L := 0x0 (130)
        fi
    fi
fi

0x3ba0:
0x0000000000003ba0: jmp qword ptr [rip + 0x21c2ba]
L := 0x21fe60 (1)

0x9bb2:
if
    0x0000000000009bb2: cmp eax, 0x4000
    0x0000000000009bb7: je 0xa520
then
    if
        0x000000000000a520: test r13b, r13b
        0x000000000000a523: je 0xa540
    then
        L := 0xa540 (2)
    else
        if
            0x000000000000a525: cmp byte ptr [rip + 0x216dc9], 0
            0x000000000000a52c: jne 0xa540
        then
            L := 0xa540 (2)
        else
            0x000000000000a52e: mov dword ptr [rbx + 0xa8], 9
            0x000000000000a538: jmp 0x9bc7
            L := 0x9bc7 (4)
        fi
    fi
else
    0x0000000000009bbd: mov dword ptr [rbx + 0xa8], 5
    L := 0x9bc7 (4)
fi

0xdbb7:
0x000000000000dbb7: mov r15, qword ptr [r12]
L := 0xdbbb (2)

0xdbbb:
if
    0x000000000000dbbb: test r14b, r14b
    0x000000000000dbbe: mov qword ptr [r12 + 8], 0
    0x000000000000dbc7: jne 0xdc0a
then
    L := 0xdc0a (3)
else
    if
        0x000000000000dbc9: mov rsi, r15
        0x000000000000dbcc: mov rdi, rbp
        0x000000000000dbcf: call 0xd950
        0x000000000000dbd4: cmp qword ptr [rax], 0
        0x000000000000dbd8: mov rbx, rax
        0x000000000000dbdb: je 0xdc30
    then
        0x000000000000dc30: mov qword ptr [rax], r15
        0x000000000000dc33: add qword ptr [rbp + 0x18], 1
        0x000000000000dc38: jmp 0xdbfd
        L := 0xdbfd (2)
    else
        if
            0x000000000000dbdd: mov rax, qword ptr [rbp + 0x48]
            0x000000000000dbe1: test rax, rax
            0x000000000000dbe4: je 0xdc40
        then
            if
                0x000000000000dc40: mov edi, 0x10
                0x000000000000dc45: call 0x3e78
                0x000000000000dc4a: test rax, rax
                0x000000000000dc4d: jne 0xdbee
            then
                L := 0xdbee (2)
            else
                0x000000000000dc4f: add rsp, 8
                0x000000000000dc53: xor eax, eax
                0x000000000000dc55: pop rbx
                0x000000000000dc56: pop rbp
                0x000000000000dc57: pop r12
                0x000000000000dc59: pop r13
                0x000000000000dc5b: pop r14
                0x000000000000dc5d: pop r15
                0x000000000000dc5f: ret 
                L := 0x0 (130)
            fi
        else
            0x000000000000dbe6: mov rdx, qword ptr [rax + 8]
            0x000000000000dbea: mov qword ptr [rbp + 0x48], rdx
            L := 0xdbee (2)
        fi
    fi
fi

0x3bc0:
0x0000000000003bc0: jmp qword ptr [rip + 0x21c2aa]
L := 0x21fe70 (1)

0x9bc7:
if
    0x0000000000009bc7: mov edi, dword ptr [rip + 0x21776b]
    0x0000000000009bcd: mov r12, qword ptr [rbx + 0x58]
    0x0000000000009bd1: test edi, edi
    0x0000000000009bd3: je 0x9bde
then
    L := 0x9bde (2)
else
    if
        0x0000000000009bd5: cmp byte ptr [rip + 0x217750], 0
        0x0000000000009bdc: je 0x9c4f
    then
        L := 0x9c4f (4)
    else
        L := 0x9bde (2)
    fi
fi

0x3bd0:
0x0000000000003bd0: jmp qword ptr [rip + 0x21c2a2]
L := 0x21fe78 (1)

0x9bde:
if
    0x0000000000009bde: mov r8, qword ptr [rip + 0x21773b]
    0x0000000000009be5: mov edx, dword ptr [rip + 0x21773d]
    0x0000000000009beb: lea r13, [rbp - 0x2d0]
    0x0000000000009bf2: mov ecx, 0x200
    0x0000000000009bf7: mov rdi, r12
    0x0000000000009bfa: mov rsi, r13
    0x0000000000009bfd: call 0xed10
    0x0000000000009c02: xor esi, esi
    0x0000000000009c04: mov rdi, rax
    0x0000000000009c07: call 0x10370
    0x0000000000009c0c: cmp eax, dword ptr [rip + 0x21774a]
    0x0000000000009c12: jle 0x9c1a
then
    L := 0x9c1a (2)
else
    0x0000000000009c14: mov dword ptr [rip + 0x217742], eax
    L := 0x9c1a (2)
fi

0x3be0:
0x0000000000003be0: jmp qword ptr [rip + 0x21c29a]
L := 0x21fe80 (1)

0xdbee:
0x000000000000dbee: mov rdx, qword ptr [rbx + 8]
0x000000000000dbf2: mov qword ptr [rax], r15
0x000000000000dbf5: mov qword ptr [rax + 8], rdx
0x000000000000dbf9: mov qword ptr [rbx + 8], rax
L := 0xdbfd (2)

0x3bf0:
0x0000000000003bf0: jmp qword ptr [rip + 0x21c292]
L := 0x21fe88 (1)

0x7bf8:
0x0000000000007bf8: add qword ptr [rip + 0x2195f8], 1
0x0000000000007c00: jmp 0x7983
L := 0x7983 (3)

0xdbfd:
0x000000000000dbfd: mov qword ptr [r12], 0
0x000000000000dc05: sub qword ptr [r13 + 0x18], 1
L := 0xdc0a (3)

0x3c00:
0x0000000000003c00: jmp qword ptr [rip + 0x21c28a]
L := 0x21fe90 (1)

0xdc0a:
if
    0x000000000000dc0a: add r12, 0x10
    0x000000000000dc0e: cmp qword ptr [r13 + 8], r12
    0x000000000000dc12: ja 0xdb48
then
    L := 0xdb48 (2)
else
    L := 0xdc18 (2)
fi

0x3c10:
0x0000000000003c10: jmp qword ptr [rip + 0x21c282]
L := 0x21fe98 (1)

0xdc18:
0x000000000000dc18: add rsp, 8
0x000000000000dc1c: mov eax, 1
0x000000000000dc21: pop rbx
0x000000000000dc22: pop rbp
0x000000000000dc23: pop r12
0x000000000000dc25: pop r13
0x000000000000dc27: pop r14
0x000000000000dc29: pop r15
0x000000000000dc2b: ret 
L := 0x0 (130)

0x7c1a:
0x0000000000007c1a: mov rdi, qword ptr [rsp + 0x28]
0x0000000000007c1f: mov rcx, qword ptr [rip + 0x218662]
0x0000000000007c26: mov rdx, r10
0x0000000000007c29: mov esi, 1
0x0000000000007c2e: add rdi, r9
0x0000000000007c31: call 0x3c80
0x0000000000007c36: add qword ptr [rip + 0x2195bb], rbp
0x0000000000007c3d: jmp 0x7ae0
L := 0x7ae0 (3)

0x9c1a:
if
    0x0000000000009c1a: mov esi, dword ptr [rip + 0x217718]
    0x0000000000009c20: test esi, esi
    0x0000000000009c22: jne 0xa660
then
    if
        0x000000000000a660: cmp byte ptr [rip + 0x216cfe], 0
        0x000000000000a667: jne 0x9c58
    then
        L := 0x9c58 (2)
    else
        0x000000000000a66d: jmp 0x9c7e
        L := 0x9c7e (5)
    fi
else
    if
        0x0000000000009c28: cmp byte ptr [rip + 0x2163f2], 0
        0x0000000000009c2f: jne 0xa638
    then
        if
            0x000000000000a638: mov edi, dword ptr [rbx + 0x34]
            0x000000000000a63b: call 0x9910
            0x000000000000a640: cmp eax, dword ptr [rip + 0x216d0a]
            0x000000000000a646: jle 0x9c35
        then
            L := 0x9c35 (3)
        else
            0x000000000000a64c: mov dword ptr [rip + 0x216cfe], eax
            0x000000000000a652: jmp 0x9c35
            L := 0x9c35 (3)
        fi
    else
        L := 0x9c35 (3)
    fi
fi

0x3c20:
0x0000000000003c20: jmp qword ptr [rip + 0x21c27a]
L := 0x21fea0 (1)

0x13c27:
0x0000000000013c27: call 0x37e0
L := 0x13c2c (2)

0x13c2c:
0x0000000000013c2c: call 0x3970
0x0000000000013c31: nop dword ptr [rax + rax]
0x0000000000013c36: nop word ptr cs:[rax + rax]
0x0000000000013c40: mov r8, -1
0x0000000000013c47: jmp 0x13ba0
L := 0x13ba0 (2)

0x3c30:
0x0000000000003c30: jmp qword ptr [rip + 0x21c272]
L := 0x21fea8 (1)

0x9c35:
if
    0x0000000000009c35: cmp byte ptr [rip + 0x2163e4], 0
    0x0000000000009c3c: jne 0xa5b0
then
    if
        0x000000000000a5b0: cmp byte ptr [rip + 0x216d76], 0
        0x000000000000a5b7: mov r14d, dword ptr [rbx + 0x38]
        0x000000000000a5bb: je 0xa7a0
    then
        if
            0x000000000000a7a0: mov edi, r14d
            0x000000000000a7a3: call 0xfab0
            0x000000000000a7a8: test rax, rax
            0x000000000000a7ab: mov rdi, rax
            0x000000000000a7ae: je 0xa5c1
        then
            L := 0xa5c1 (2)
        else
            0x000000000000a7b4: xor esi, esi
            0x000000000000a7b6: call 0x10370
            0x000000000000a7bb: mov edx, 0
            0x000000000000a7c0: test eax, eax
            0x000000000000a7c2: cmovs eax, edx
            0x000000000000a7c5: jmp 0xa61c
            L := 0xa61c (2)
        fi
    else
        L := 0xa5c1 (2)
    fi
else
    L := 0x9c42 (3)
fi

0x3c40:
0x0000000000003c40: jmp qword ptr [rip + 0x21c26a]
L := 0x21feb0 (1)

0x9c42:
if
    0x0000000000009c42: cmp byte ptr [rip + 0x2176e5], 0
    0x0000000000009c49: jne 0xa590
then
    if
        0x000000000000a590: mov edi, dword ptr [rbx + 0x34]
        0x000000000000a593: call 0x9910
        0x000000000000a598: cmp eax, dword ptr [rip + 0x216daa]
        0x000000000000a59e: jle 0x9c4f
    then
        L := 0x9c4f (4)
    else
        0x000000000000a5a4: mov dword ptr [rip + 0x216d9e], eax
        0x000000000000a5aa: jmp 0x9c4f
        L := 0x9c4f (4)
    fi
else
    L := 0x9c4f (4)
fi

0x15c40:
if
    0x0000000000015c40: cmp edi, 0x16
    0x0000000000015c43: je 0x15c65
then
    L := 0x15c65 (4)
else
    if
        0x0000000000015c45: jle 0x15c60
    then
        if
            0x0000000000015c60: cmp edi, 0x10
            0x0000000000015c63: jne 0x15c51
        then
            L := 0x15c51 (2)
        else
            L := 0x15c65 (4)
        fi
    else
        if
            0x0000000000015c47: cmp edi, 0x26
            0x0000000000015c4a: je 0x15c65
        then
            L := 0x15c65 (4)
        else
            if
                0x0000000000015c4c: cmp edi, 0x5f
                0x0000000000015c4f: je 0x15c65
            then
                L := 0x15c65 (4)
            else
                L := 0x15c51 (2)
            fi
        fi
    fi
fi

0x5c50:
if
    0x0000000000005c50: lea rax, [rip + 0x21a409]
    0x0000000000005c57: mov edi, edi
    0x0000000000005c59: shl rdi, 4
    0x0000000000005c5d: add rdi, rax
    0x0000000000005c60: xor eax, eax
    0x0000000000005c62: mov rdx, qword ptr [rdi]
    0x0000000000005c65: test rdx, rdx
    0x0000000000005c68: je 0x5c90
then
    L := 0x5c90 (3)
else
    if
        0x0000000000005c6a: cmp rdx, 1
        0x0000000000005c6e: mov rsi, qword ptr [rdi + 8]
        0x0000000000005c72: je 0x5c98
    then
        0x0000000000005c98: cmp byte ptr [rsi], 0x30
        0x0000000000005c9b: setne al
        0x0000000000005c9e: ret 
        L := 0x0 (130)
    else
        if
            0x0000000000005c74: cmp rdx, 2
            0x0000000000005c78: mov eax, 1
            0x0000000000005c7d: jne 0x5c90
        then
            L := 0x5c90 (3)
        else
            0x0000000000005c7f: lea rdi, [rip + 0x11f67]
            0x0000000000005c86: mov ecx, 2
            0x0000000000005c8b: repe cmpsb byte ptr [rsi], byte ptr [rdi]
            0x0000000000005c8d: setne al
            L := 0x5c90 (3)
        fi
    fi
fi

0x9c4f:
if
    0x0000000000009c4f: cmp byte ptr [rip + 0x21770f], 0
    0x0000000000009c56: je 0x9c70
then
    L := 0x9c70 (3)
else
    L := 0x9c58 (2)
fi

0x15c51:
0x0000000000015c51: mov eax, 1
0x0000000000015c56: ret 
L := 0x0 (130)

0x9c58:
if
    0x0000000000009c58: mov rdi, qword ptr [rbx + 0xb0]
    0x0000000000009c5f: call 0x3950
    0x0000000000009c64: cmp eax, dword ptr [rip + 0x2176ea]
    0x0000000000009c6a: jg 0xa420
then
    0x000000000000a420: mov dword ptr [rip + 0x216f2e], eax
    0x000000000000a426: jmp 0x9c70
    L := 0x9c70 (3)
else
    L := 0x9c70 (3)
fi

0x15c65:
0x0000000000015c65: xor eax, eax
0x0000000000015c67: ret 
L := 0x0 (130)

0x9c70:
if
    0x0000000000009c70: mov ecx, dword ptr [rip + 0x2176c2]
    0x0000000000009c76: test ecx, ecx
    0x0000000000009c78: je 0xa1c0
then
    if
        0x000000000000a1c0: mov rdi, qword ptr [rbx + 0x28]
        0x000000000000a1c4: lea rsi, [rbp - 0x2f0]
        0x000000000000a1cb: call 0xfcf0
        0x000000000000a1d0: mov rdi, rax
        0x000000000000a1d3: call 0x3950
        0x000000000000a1d8: cmp eax, dword ptr [rip + 0x21717a]
        0x000000000000a1de: jle 0xa1e6
    then
        L := 0xa1e6 (2)
    else
        0x000000000000a1e0: mov dword ptr [rip + 0x217172], eax
        L := 0xa1e6 (2)
    fi
else
    L := 0x9c7e (5)
fi

0x3c70:
0x0000000000003c70: jmp qword ptr [rip + 0x21c252]
L := 0x21fec8 (1)

0x9c7e:
if
    0x0000000000009c7e: movzx eax, byte ptr [rip + 0x217677]
    0x0000000000009c85: test al, al
    0x0000000000009c87: jne 0xa190
then
    if
        0x000000000000a190: mov rdi, qword ptr [rbx + 0x20]
        0x000000000000a194: lea rsi, [rbp - 0x2d0]
        0x000000000000a19b: call 0xfcf0
        0x000000000000a1a0: mov rdi, rax
        0x000000000000a1a3: call 0x3950
        0x000000000000a1a8: cmp eax, dword ptr [rip + 0x2171b2]
        0x000000000000a1ae: jle 0x9c8d
    then
        L := 0x9c8d (8)
    else
        0x000000000000a1b4: mov dword ptr [rip + 0x2171a6], eax
        0x000000000000a1ba: jmp 0x9c8d
        L := 0x9c8d (8)
    fi
else
    L := 0x9c8d (8)
fi

0xdc80:
0x000000000000dc80: mov rax, qword ptr [rdi + 0x20]
0x000000000000dc84: ret 
L := 0x0 (130)

0x9c8d:
0x0000000000009c8d: mov rdi, qword ptr [rbp - 0x388]
0x0000000000009c94: call 0x146b0
0x0000000000009c99: add qword ptr [rip + 0x21770f], 1
0x0000000000009ca1: mov qword ptr [rbx], rax
L := 0x9ca4 (3)

0x3c90:
0x0000000000003c90: jmp qword ptr [rip + 0x21c242]
L := 0x21fed8 (1)

0x5c90:
0x0000000000005c90: ret 
L := 0x0 (130)

0x5ca0:
if
    0x0000000000005ca0: sub rsp, 0x18
    0x0000000000005ca4: lea r8, [rip + 0x11f9f]
    0x0000000000005cab: xor edx, edx
    0x0000000000005cad: xor esi, esi
    0x0000000000005caf: mov rcx, rsp
    0x0000000000005cb2: mov rax, qword ptr fs:[0x28]
    0x0000000000005cbb: mov qword ptr [rsp + 8], rax
    0x0000000000005cc0: xor eax, eax
    0x0000000000005cc2: call 0x14e20
    0x0000000000005cc7: test eax, eax
    0x0000000000005cc9: je 0x5d08
then
    0x0000000000005d08: mov rax, qword ptr [rsp]
    0x0000000000005d0c: mov qword ptr [rip + 0x21b59d], rax
    0x0000000000005d13: mov eax, 1
    0x0000000000005d18: jmp 0x5cd2
    L := 0x5cd2 (3)
else
    if
        0x0000000000005ccb: cmp eax, 1
        0x0000000000005cce: je 0x5cf0
    then
        0x0000000000005cf0: mov qword ptr [rip + 0x21b5b5], -1
        0x0000000000005cfb: mov eax, 1
        0x0000000000005d00: jmp 0x5cd2
        L := 0x5cd2 (3)
    else
        0x0000000000005cd0: xor eax, eax
        L := 0x5cd2 (3)
    fi
fi

0x3ca0:
0x0000000000003ca0: jmp qword ptr [rip + 0x21c23a]
L := 0x21fee0 (1)

0x9ca4:
if
    0x0000000000009ca4: mov rsi, qword ptr [rbp - 0x38]
    0x0000000000009ca8: xor rsi, qword ptr fs:[0x28]
    0x0000000000009cb1: mov rax, r12
    0x0000000000009cb4: jne 0xa847
then
    0x000000000000a847: call 0x3970
    L := 0xa84c (2)
else
    0x0000000000009cba: lea rsp, [rbp - 0x28]
    0x0000000000009cbe: pop rbx
    0x0000000000009cbf: pop r12
    0x0000000000009cc1: pop r13
    0x0000000000009cc3: pop r14
    0x0000000000009cc5: pop r15
    0x0000000000009cc7: pop rbp
    0x0000000000009cc8: ret 
    L := 0x0 (130)
fi

0x3cb0:
0x0000000000003cb0: jmp qword ptr [rip + 0x21c232]
L := 0x21fee8 (1)

0x3cc0:
0x0000000000003cc0: jmp qword ptr [rip + 0x21c22a]
L := 0x21fef0 (1)

0x13cc0:
0x0000000000013cc0: lea rcx, [rip + 0x20c539]
0x0000000000013cc7: mov rdx, -1
0x0000000000013cce: jmp 0x133a0
L := 0x133a0 (3)

0x5cd2:
if
    0x0000000000005cd2: mov rdx, qword ptr [rsp + 8]
    0x0000000000005cd7: xor rdx, qword ptr fs:[0x28]
    0x0000000000005ce0: jne 0x5d1a
then
    0x0000000000005d1a: call 0x3970
    0x0000000000005d1f: nop 
    0x0000000000005d20: push r15
    0x0000000000005d22: push r14
    0x0000000000005d24: xor esi, esi
    0x0000000000005d26: push r13
    0x0000000000005d28: push r12
    0x0000000000005d2a: push rbp
    0x0000000000005d2b: push rbx
    0x0000000000005d2c: sub rsp, 0x658
    0x0000000000005d33: lea rdi, [rsp + 0x30]
    0x0000000000005d38: mov rax, qword ptr fs:[0x28]
    0x0000000000005d41: mov qword ptr [rsp + 0x648], rax
    0x0000000000005d49: xor eax, eax
    0x0000000000005d4b: mov qword ptr [rsp + 0x10], rdi
    L := 0x5d50 (2)
else
    0x0000000000005ce2: add rsp, 0x18
    0x0000000000005ce6: ret 
    L := 0x0 (130)
fi

0x3cd0:
0x0000000000003cd0: jmp qword ptr [rip + 0x21c222]
L := 0x21fef8 (1)

0x13ce0:
0x0000000000013ce0: lea rcx, [rip + 0x20c519]
0x0000000000013ce7: mov rsi, rdi
0x0000000000013cea: mov rdx, -1
0x0000000000013cf1: xor edi, edi
0x0000000000013cf3: jmp 0x133a0
L := 0x133a0 (3)

0xfcf0:
0x000000000000fcf0: lea rcx, [rsi + 0x14]
0x000000000000fcf4: mov byte ptr [rsi + 0x14], 0
0x000000000000fcf8: movabs rsi, 0xcccccccccccccccd
0x000000000000fd02: nop word ptr [rax + rax]
L := 0xfd08 (2)

0x9cf0:
if
    0x0000000000009cf0: movzx eax, byte ptr [rip + 0x217605]
    0x0000000000009cf7: test al, al
    0x0000000000009cf9: jne 0x9d30
then
    if
        0x0000000000009d30: test r14d, r14d
        0x0000000000009d33: sete dl
        0x0000000000009d36: cmp r14d, 6
        0x0000000000009d3a: je 0x9d44
    then
        L := 0x9d44 (4)
    else
        if
            0x0000000000009d3c: test dl, dl
            0x0000000000009d3e: je 0x9e10
        then
            L := 0x9e10 (15)
        else
            L := 0x9d44 (4)
        fi
    fi
else
    if
        0x0000000000009cfb: cmp byte ptr [rip + 0x21759e], 0
        0x0000000000009d02: je 0x9d20
    then
        L := 0x9d20 (3)
    else
        if
            0x0000000000009d04: test r14d, r14d
            0x0000000000009d07: sete cl
            0x0000000000009d0a: cmp r14d, 6
            0x0000000000009d0e: mov edx, ecx
            0x0000000000009d10: je 0x9d44
        then
            L := 0x9d44 (4)
        else
            if
                0x0000000000009d12: test cl, cl
                0x0000000000009d14: jne 0x9d44
            then
                L := 0x9d44 (4)
            else
                if
                    0x0000000000009d16: cmp byte ptr [rip + 0x217583], 0
                    0x0000000000009d1d: jne 0x9d84
                then
                    L := 0x9d84 (2)
                else
                    0x0000000000009d1f: nop 
                    L := 0x9d20 (3)
                fi
            fi
        fi
    fi
fi

0x3d00:
0x0000000000003d00: jmp qword ptr [rip + 0x21c20a]
L := 0x21ff10 (1)

0xfd08:
if
    0x000000000000fd08: mov rax, rdi
    0x000000000000fd0b: sub rcx, 1
    0x000000000000fd0f: mul rsi
    0x000000000000fd12: shr rdx, 3
    0x000000000000fd16: lea rax, [rdx + rdx*4]
    0x000000000000fd1a: add rax, rax
    0x000000000000fd1d: sub rdi, rax
    0x000000000000fd20: add edi, 0x30
    0x000000000000fd23: test rdx, rdx
    0x000000000000fd26: mov byte ptr [rcx], dil
    0x000000000000fd29: mov rdi, rdx
    0x000000000000fd2c: jne 0xfd08
then
    L := 0xfd08 (2)
else
    0x000000000000fd2e: mov rax, rcx
    0x000000000000fd31: ret 
    L := 0x0 (130)
fi

0x15d10:
if
    0x0000000000015d10: movsx rcx, byte ptr [rdi]
    0x0000000000015d14: test cl, cl
    0x0000000000015d16: je 0x15d40
then
    0x0000000000015d40: xor edx, edx
    0x0000000000015d42: mov rax, rdx
    0x0000000000015d45: ret 
    L := 0x0 (130)
else
    0x0000000000015d18: xor eax, eax
    0x0000000000015d1a: nop word ptr [rax + rax]
    L := 0x15d20 (2)
fi

0x3d10:
0x0000000000003d10: jmp qword ptr [rip + 0x21c202]
L := 0x21ff18 (1)

0x15d20:
if
    0x0000000000015d20: rol rax, 9
    0x0000000000015d24: add rdi, 1
    0x0000000000015d28: add rax, rcx
    0x0000000000015d2b: movsx rcx, byte ptr [rdi]
    0x0000000000015d2f: test cl, cl
    0x0000000000015d31: jne 0x15d20
then
    L := 0x15d20 (2)
else
    0x0000000000015d33: xor edx, edx
    0x0000000000015d35: div rsi
    0x0000000000015d38: mov rax, rdx
    0x0000000000015d3b: ret 
    L := 0x0 (130)
fi

0x9d20:
0x0000000000009d20: xor r12d, r12d
0x0000000000009d23: jmp 0x9c8d
L := 0x9c8d (8)

0x3d30:
0x0000000000003d30: jmp qword ptr [rip + 0x21c1f2]
L := 0x21ff28 (1)

0xfd40:
if
    0x000000000000fd40: push r15
    0x000000000000fd42: push r14
    0x000000000000fd44: mov r14, rdi
    0x000000000000fd47: push r13
    0x000000000000fd49: push r12
    0x000000000000fd4b: mov r13, rsi
    0x000000000000fd4e: push rbp
    0x000000000000fd4f: push rbx
    0x000000000000fd50: mov ebx, r9d
    0x000000000000fd53: mov r12, rcx
    0x000000000000fd56: sub rsp, 0x38
    0x000000000000fd5a: mov qword ptr [rsp + 0x10], rdx
    0x000000000000fd5f: mov dword ptr [rsp + 0x1c], r8d
    0x000000000000fd64: call 0x3950
    0x000000000000fd69: test bl, 2
    0x000000000000fd6c: mov r15, rax
    0x000000000000fd6f: mov qword ptr [rsp + 8], rax
    0x000000000000fd74: je 0xfee0
then
    if
        0x000000000000fee0: call 0x3940
        0x000000000000fee5: cmp rax, 1
        0x000000000000fee9: jbe 0xfd7a
    then
        L := 0xfd7a (3)
    else
        if
            0x000000000000feef: xor edx, edx
            0x000000000000fef1: xor edi, edi
            0x000000000000fef3: mov rsi, r14
            0x000000000000fef6: call 0x38a0
            0x000000000000fefb: cmp rax, -1
            0x000000000000feff: jne 0xff30
        then
            if
                0x000000000000ff30: lea rbp, [rax + 1]
                0x000000000000ff34: lea rax, [rbp*4]
                0x000000000000ff3c: mov rdi, rax
                0x000000000000ff3f: mov qword ptr [rsp + 0x20], rax
                0x000000000000ff44: call 0x3e78
                0x000000000000ff49: test rax, rax
                0x000000000000ff4c: mov qword ptr [rsp], rax
                0x000000000000ff50: je 0x100d5
            then
                if
                    0x00000000000100d5: test bl, 1
                    0x00000000000100d8: mov rbp, r15
                    0x00000000000100db: mov qword ptr [rsp + 8], 0
                    0x00000000000100e4: jne 0xfd8e
                then
                    L := 0xfd8e (5)
                else
                    0x00000000000100ea: jmp 0xff0a
                    L := 0xff0a (2)
                fi
            else
                if
                    0x000000000000ff56: mov rdi, qword ptr [rsp]
                    0x000000000000ff5a: mov rdx, rbp
                    0x000000000000ff5d: mov rsi, r14
                    0x000000000000ff60: call 0x38a0
                    0x000000000000ff65: test rax, rax
                    0x000000000000ff68: je 0x10074
                then
                    0x0000000000010074: mov rbp, r15
                    0x0000000000010077: mov qword ptr [rsp + 8], 0
                    0x0000000000010080: jmp 0xfd8e
                    L := 0xfd8e (5)
                else
                    if
                        0x000000000000ff6e: mov rax, qword ptr [rsp]
                        0x000000000000ff72: mov rcx, qword ptr [rsp + 0x20]
                        0x000000000000ff77: mov dword ptr [rax + rcx - 4], 0
                        0x000000000000ff7f: mov edi, dword ptr [rax]
                        0x000000000000ff81: mov rdx, rax
                        0x000000000000ff84: test edi, edi
                        0x000000000000ff86: je 0x10085
                    then
                        0x0000000000010085: mov rdi, qword ptr [rsp]
                        0x0000000000010089: mov rsi, rbp
                        0x000000000001008c: call 0x3880
                        0x0000000000010091: movsxd rbp, eax
                        0x0000000000010094: nop dword ptr [rax]
                        L := 0x10098 (2)
                    else
                        0x000000000000ff8c: mov byte ptr [rsp + 0x20], 0
                        0x000000000000ff91: nop dword ptr [rax]
                        L := 0xff98 (2)
                    fi
                fi
            fi
        else
            if
                0x000000000000ff01: test bl, 1
                0x000000000000ff04: jne 0xfd7a
            then
                L := 0xfd7a (3)
            else
                L := 0xff0a (2)
            fi
        fi
    fi
else
    L := 0xfd7a (3)
fi

0x9d44:
if
    0x0000000000009d44: cmp dword ptr [rip + 0x2175ad], 5
    0x0000000000009d4b: je 0x9e10
then
    L := 0x9e10 (15)
else
    if
        0x0000000000009d51: cmp byte ptr [rip + 0x217638], 0
        0x0000000000009d58: jne 0x9e10
    then
        L := 0x9e10 (15)
    else
        if
            0x0000000000009d5e: cmp byte ptr [rip + 0x217598], 0
            0x0000000000009d65: jne 0x9e10
        then
            L := 0x9e10 (15)
        else
            if
                0x0000000000009d6b: test al, al
                0x0000000000009d6d: jne 0x9e10
            then
                L := 0x9e10 (15)
            else
                if
                    0x0000000000009d73: cmp byte ptr [rip + 0x217526], 0
                    0x0000000000009d7a: je 0x9d20
                then
                    L := 0x9d20 (3)
                else
                    if
                        0x0000000000009d7c: test dl, dl
                        0x0000000000009d7e: jne 0x9e10
                    then
                        L := 0x9e10 (15)
                    else
                        L := 0x9d84 (2)
                    fi
                fi
            fi
        fi
    fi
fi

0x5d50:
if
    0x0000000000005d50: lea rax, [rip + 0x21a2e9]
    0x0000000000005d57: mov rax, qword ptr [rax + rsi]
    0x0000000000005d5b: movzx edx, byte ptr [rax]
    0x0000000000005d5e: test dl, dl
    0x0000000000005d60: je 0x5d7b
then
    L := 0x5d7b (2)
else
    0x0000000000005d62: nop word ptr [rax + rax]
    L := 0x5d68 (2)
fi

0x7d52:
0x0000000000007d52: mov edx, dword ptr [r14 + 0xc4]
0x0000000000007d59: mov rsi, qword ptr [rip + 0x219570]
0x0000000000007d60: sub rsp, 8
0x0000000000007d64: xor r15d, 1
0x0000000000007d68: push qword ptr [r14 + 0x10]
0x0000000000007d6c: mov r9, r13
0x0000000000007d6f: movzx r8d, r15b
0x0000000000007d73: xor ecx, ecx
0x0000000000007d75: mov rdi, rbp
0x0000000000007d78: call 0x7910
0x0000000000007d7d: mov rbx, rax
0x0000000000007d80: call 0x7360
0x0000000000007d85: pop rax
0x0000000000007d86: pop rdx
L := 0x7d87 (4)

0x15d50:
if
    0x0000000000015d50: push r15
    0x0000000000015d52: push r14
    0x0000000000015d54: mov edi, 0xe
    0x0000000000015d59: push r13
    0x0000000000015d5b: push r12
    0x0000000000015d5d: push rbp
    0x0000000000015d5e: push rbx
    0x0000000000015d5f: sub rsp, 0xa8
    0x0000000000015d66: mov rax, qword ptr fs:[0x28]
    0x0000000000015d6f: mov qword ptr [rsp + 0x98], rax
    0x0000000000015d77: xor eax, eax
    0x0000000000015d79: call 0x3c20
    0x0000000000015d7e: mov r15, qword ptr [rip + 0x20b7d3]
    0x0000000000015d85: test rax, rax
    0x0000000000015d88: mov rbx, rax
    0x0000000000015d8b: lea rax, [rip + 0x1eb8]
    0x0000000000015d92: cmove rbx, rax
    0x0000000000015d96: test r15, r15
    0x0000000000015d99: jne 0x15dba
then
    L := 0x15dba (3)
else
    0x0000000000015d9b: jmp 0x15e30
    if
        0x0000000000015e30: lea rdi, [rip + 0x534c]
        0x0000000000015e37: call 0x37a0
        0x0000000000015e3c: test rax, rax
        0x0000000000015e3f: mov r13, rax
        0x0000000000015e42: je 0x15e90
    then
        L := 0x15e90 (2)
    else
        if
            0x0000000000015e44: cmp byte ptr [rax], 0
            0x0000000000015e47: je 0x15e90
        then
            L := 0x15e90 (2)
        else
            if
                0x0000000000015e49: mov rdi, rax
                0x0000000000015e4c: call 0x3950
                0x0000000000015e51: test rax, rax
                0x0000000000015e54: mov r12, rax
                0x0000000000015e57: mov r14, rax
                0x0000000000015e5a: jne 0x1617b
            then
                if
                    0x000000000001617b: cmp byte ptr [r13 + rax - 1], 0x2f
                    0x0000000000016181: jne 0x16191
                then
                    L := 0x16191 (2)
                else
                    0x0000000000016183: lea rdi, [rax + 0xe]
                    0x0000000000016187: jmp 0x15e65
                    L := 0x15e65 (2)
                fi
            else
                0x0000000000015e60: mov edi, 0xe
                L := 0x15e65 (2)
            fi
        fi
    fi
fi

0x3d60:
0x0000000000003d60: jmp qword ptr [rip + 0x21c1da]
L := 0x21ff40 (1)

0x5d68:
if
    0x0000000000005d68: cmp dl, 0x25
    0x0000000000005d6b: movzx ecx, byte ptr [rax + 1]
    0x0000000000005d6f: je 0x5d80
then
    if
        0x0000000000005d80: cmp cl, 0x25
        0x0000000000005d83: je 0x5e40
    then
        0x0000000000005e40: movzx edx, byte ptr [rax + 2]
        0x0000000000005e44: add rax, 1
        0x0000000000005e48: jmp 0x5d73
        L := 0x5d73 (2)
    else
        if
            0x0000000000005d89: cmp cl, 0x62
            0x0000000000005d8c: jne 0x5d71
        then
            L := 0x5d71 (2)
        else
            L := 0x5d8e (2)
        fi
    fi
else
    L := 0x5d71 (2)
fi

0x5d71:
0x0000000000005d71: mov edx, ecx
L := 0x5d73 (2)

0x3d70:
0x0000000000003d70: jmp qword ptr [rip + 0x21c1d2]
L := 0x21ff48 (1)

0x5d73:
if
    0x0000000000005d73: add rax, 1
    0x0000000000005d77: test dl, dl
    0x0000000000005d79: jne 0x5d68
then
    L := 0x5d68 (2)
else
    L := 0x5d7b (2)
fi

0xfd7a:
0x000000000000fd7a: mov rbp, r15
0x000000000000fd7d: mov qword ptr [rsp], 0
0x000000000000fd85: mov qword ptr [rsp + 8], 0
L := 0xfd8e (5)

0x5d7b:
0x0000000000005d7b: xor eax, eax
0x0000000000005d7d: jmp 0x5d8e
L := 0x5d8e (2)

0x3d80:
0x0000000000003d80: jmp qword ptr [rip + 0x21c1ca]
L := 0x21ff50 (1)

0x9d84:
if
    0x0000000000009d84: xor r12d, r12d
    0x0000000000009d87: cmp r14d, 5
    0x0000000000009d8b: jne 0x9c8d
then
    L := 0x9c8d (8)
else
    if
        0x0000000000009d91: cmp dword ptr [rip + 0x21757c], 3
        0x0000000000009d98: je 0x9e10
    then
        L := 0x9e10 (15)
    else
        if
            0x0000000000009d9a: cmp byte ptr [rip + 0x217571], 0
            0x0000000000009da1: mov byte ptr [rbp - 0x390], r8b
            0x0000000000009da8: je 0x9c8d
        then
            L := 0x9c8d (8)
        else
            if
                0x0000000000009dae: mov edi, 0xe
                0x0000000000009db3: call 0x5c50
                0x0000000000009db8: test al, al
                0x0000000000009dba: movzx r8d, byte ptr [rbp - 0x390]
                0x0000000000009dc2: jne 0x9e10
            then
                L := 0x9e10 (15)
            else
                if
                    0x0000000000009dc4: mov edi, 0x10
                    0x0000000000009dc9: call 0x5c50
                    0x0000000000009dce: test al, al
                    0x0000000000009dd0: movzx r8d, byte ptr [rbp - 0x390]
                    0x0000000000009dd8: jne 0x9e10
                then
                    L := 0x9e10 (15)
                else
                    if
                        0x0000000000009dda: mov edi, 0x11
                        0x0000000000009ddf: call 0x5c50
                        0x0000000000009de4: test al, al
                        0x0000000000009de6: movzx r8d, byte ptr [rbp - 0x390]
                        0x0000000000009dee: jne 0x9e10
                    then
                        L := 0x9e10 (15)
                    else
                        if
                            0x0000000000009df0: mov edi, 0x15
                            0x0000000000009df5: call 0x5c50
                            0x0000000000009dfa: test al, al
                            0x0000000000009dfc: movzx r8d, byte ptr [rbp - 0x390]
                            0x0000000000009e04: je 0x9c8d
                        then
                            L := 0x9c8d (8)
                        else
                            0x0000000000009e0a: nop word ptr [rax + rax]
                            L := 0x9e10 (15)
                        fi
                    fi
                fi
            fi
        fi
    fi
fi

0x7d87:
0x0000000000007d87: add rsp, 0x18
0x0000000000007d8b: mov rax, rbx
0x0000000000007d8e: pop rbx
0x0000000000007d8f: pop rbp
0x0000000000007d90: pop r12
0x0000000000007d92: pop r13
0x0000000000007d94: pop r14
0x0000000000007d96: pop r15
0x0000000000007d98: ret 
L := 0x0 (130)

0x5d8e:
if
    0x0000000000005d8e: mov qword ptr [rdi + rsi], rax
    0x0000000000005d92: add rsi, 8
    0x0000000000005d96: cmp rsi, 0x10
    0x0000000000005d9a: jne 0x5d50
then
    L := 0x5d50 (2)
else
    if
        0x0000000000005d9c: cmp qword ptr [rsp + 0x30], 0
        0x0000000000005da2: mov r13d, 5
        0x0000000000005da8: je 0x5e91
    then
        if
            0x0000000000005e91: cmp qword ptr [rsp + 0x38], 0
            0x0000000000005e97: jne 0x5dae
        then
            L := 0x5dae (2)
        else
            0x0000000000005e9d: jmp 0x5e68
            L := 0x5e68 (6)
        fi
    else
        L := 0x5dae (2)
    fi
fi

0xfd8e:
if
    0x000000000000fd8e: mov rax, qword ptr [r12]
    0x000000000000fd92: cmp rax, rbp
    0x000000000000fd95: jae 0xfea9
then
    L := 0xfea9 (2)
else
    0x000000000000fd9b: mov r15, rax
    0x000000000000fd9e: xor edx, edx
    L := 0xfda0 (2)
fi

0x3d90:
0x0000000000003d90: jmp qword ptr [rip + 0x21c1c2]
L := 0x21ff58 (1)

0xfda0:
if
    0x000000000000fda0: mov qword ptr [r12], rax
    0x000000000000fda4: mov eax, dword ptr [rsp + 0x1c]
    0x000000000000fda8: test eax, eax
    0x000000000000fdaa: je 0xfecb
then
    L := 0xfecb (2)
else
    L := 0xfdb0 (2)
fi

0x15da0:
0x0000000000015da0: mov rdi, r15
0x0000000000015da3: call 0x3950
0x0000000000015da8: lea rbp, [r15 + rax + 1]
0x0000000000015dad: mov rdi, rbp
0x0000000000015db0: call 0x3950
0x0000000000015db5: lea r15, [rbp + rax + 1]
L := 0x15dba (3)

0x5dae:
0x0000000000005dae: lea rax, [rsp + 0x40]
0x0000000000005db3: mov qword ptr [rsp + 8], rax
0x0000000000005db8: lea rax, [rsp + 0x28]
0x0000000000005dbd: mov qword ptr [rsp], rax
L := 0x5dc1 (2)

0xfdb0:
if
    0x000000000000fdb0: xor ebp, ebp
    0x000000000000fdb2: cmp eax, 1
    0x000000000000fdb5: je 0xfdc3
then
    L := 0xfdc3 (3)
else
    0x000000000000fdb7: mov rbp, rdx
    0x000000000000fdba: and edx, 1
    0x000000000000fdbd: shr rbp, 1
    0x000000000000fdc0: add rdx, rbp
    L := 0xfdc3 (3)
fi

0x3db0:
0x0000000000003db0: jmp qword ptr [rip + 0x21c1b2]
L := 0x21ff68 (1)

0x15dba:
if
    0x0000000000015dba: movzx ebp, byte ptr [r15]
    0x0000000000015dbe: test bpl, bpl
    0x0000000000015dc1: je 0x15dec
then
    L := 0x15dec (2)
else
    if
        0x0000000000015dc3: mov rsi, r15
        0x0000000000015dc6: mov rdi, rbx
        0x0000000000015dc9: call 0x3b20
        0x0000000000015dce: test eax, eax
        0x0000000000015dd0: je 0x15ddf
    then
        L := 0x15ddf (2)
    else
        if
            0x0000000000015dd2: cmp bpl, 0x2a
            0x0000000000015dd6: jne 0x15da0
        then
            L := 0x15da0 (2)
        else
            if
                0x0000000000015dd8: cmp byte ptr [r15 + 1], 0
                0x0000000000015ddd: jne 0x15da0
            then
                L := 0x15da0 (2)
            else
                L := 0x15ddf (2)
            fi
        fi
    fi
fi

0x7dbb:
0x0000000000007dbb: mov r8d, dword ptr [r14 + 0x30]
L := 0x7dbf (3)

0x7dbf:
if
    0x0000000000007dbf: movzx ecx, byte ptr [r14 + 0xb8]
    0x0000000000007dc7: test cl, cl
    0x0000000000007dc9: jne 0x7f12
then
    L := 0x7f12 (2)
else
    L := 0x7dcf (2)
fi

0x5dc1:
0x0000000000005dc1: mov rbx, qword ptr [rsp + 8]
0x0000000000005dc6: mov r12d, 0x2000e
0x0000000000005dcc: xor ebp, ebp
0x0000000000005dce: lea r14, [rbx + 0x600]
0x0000000000005dd5: nop dword ptr [rax]
L := 0x5dd8 (2)

0x3dc0:
0x0000000000003dc0: jmp qword ptr [rip + 0x21c1aa]
L := 0x21ff70 (1)

0xfdc3:
if
    0x000000000000fdc3: test bl, 4
    0x000000000000fdc6: lea r12, [rdx + r15]
    0x000000000000fdca: je 0xfdd1
then
    L := 0xfdd1 (2)
else
    0x000000000000fdcc: mov r12, r15
    0x000000000000fdcf: xor edx, edx
    L := 0xfdd1 (2)
fi

0x7dcf:
if
    0x0000000000007dcf: mov ecx, dword ptr [r14 + 0xa8]
    0x0000000000007dd6: lea rax, [rip + 0xecc3]
    0x0000000000007ddd: mov eax, dword ptr [rax + rcx*4]
    0x0000000000007de0: cmp eax, 7
    0x0000000000007de3: sete cl
    0x0000000000007de6: cmp eax, 5
    0x0000000000007de9: je 0x7fa0
then
    L := 0x7fa0 (3)
else
    L := 0x7def (2)
fi

0x3dd0:
0x0000000000003dd0: jmp qword ptr [rip + 0x21c1a2]
L := 0x21ff78 (1)

0xfdd1:
if
    0x000000000000fdd1: and ebx, 8
    0x000000000000fdd4: jne 0xfed8
then
    0x000000000000fed8: xor ebp, ebp
    0x000000000000feda: jmp 0xfddd
    L := 0xfddd (2)
else
    0x000000000000fdda: add r12, rbp
    L := 0xfddd (2)
fi

0x5dd8:
if
    0x0000000000005dd8: mov edi, r12d
    0x0000000000005ddb: mov qword ptr [rsp + 0x28], r13
    0x0000000000005de0: call 0x3c20
    0x0000000000005de5: mov esi, 0x25
    0x0000000000005dea: mov rdi, rax
    0x0000000000005ded: mov r15, rax
    0x0000000000005df0: call 0x39a0
    0x0000000000005df5: test rax, rax
    0x0000000000005df8: jne 0x5e68
then
    L := 0x5e68 (6)
else
    if
        0x0000000000005dfa: mov rcx, qword ptr [rsp]
        0x0000000000005dfe: xor r9d, r9d
        0x0000000000005e01: xor r8d, r8d
        0x0000000000005e04: mov edx, 0x80
        0x0000000000005e09: mov rsi, rbx
        0x0000000000005e0c: mov rdi, r15
        0x0000000000005e0f: call 0xfd40
        0x0000000000005e14: cmp rax, 0x7f
        0x0000000000005e18: ja 0x5e68
    then
        L := 0x5e68 (6)
    else
        if
            0x0000000000005e1a: mov rax, qword ptr [rsp + 0x28]
            0x0000000000005e1f: cmp rbp, rax
            0x0000000000005e22: cmovb rbp, rax
            0x0000000000005e26: sub rbx, -0x80
            0x0000000000005e2a: add r12d, 1
            0x0000000000005e2e: cmp rbx, r14
            0x0000000000005e31: jne 0x5dd8
        then
            L := 0x5dd8 (2)
        else
            if
                0x0000000000005e33: cmp r13, rbp
                0x0000000000005e36: jbe 0x5e9f
            then
                0x0000000000005e9f: xor r14d, r14d
                0x0000000000005ea2: mov qword ptr [rsp + 0x18], rbx
                L := 0x5ea7 (2)
            else
                0x0000000000005e38: mov r13, rbp
                0x0000000000005e3b: jmp 0x5dc1
                L := 0x5dc1 (2)
            fi
        fi
    fi
fi

0xfddd:
if
    0x000000000000fddd: mov rax, qword ptr [rsp + 0x10]
    0x000000000000fde2: test rax, rax
    0x000000000000fde5: je 0xfe71
then
    L := 0xfe71 (4)
else
    if
        0x000000000000fdeb: lea rbx, [r13 + rax - 1]
        0x000000000000fdf0: lea rax, [rdx - 1]
        0x000000000000fdf4: cmp r13, rbx
        0x000000000000fdf7: jae 0xfe1f
    then
        L := 0xfe1f (3)
    else
        if
            0x000000000000fdf9: test rdx, rdx
            0x000000000000fdfc: je 0xfe1f
        then
            L := 0xfe1f (3)
        else
            0x000000000000fdfe: nop 
            L := 0xfe00 (2)
        fi
    fi
fi

0x15ddf:
0x0000000000015ddf: mov rdi, r15
0x0000000000015de2: call 0x3950
0x0000000000015de7: lea rbx, [r15 + rax + 1]
L := 0x15dec (2)

0x3de0:
0x0000000000003de0: jmp qword ptr [rip + 0x21c19a]
L := 0x21ff80 (1)

0x15dec:
if
    0x0000000000015dec: cmp byte ptr [rbx], 0
    0x0000000000015def: lea rax, [rip + 0x536d]
    0x0000000000015df6: cmove rbx, rax
    0x0000000000015dfa: mov rcx, qword ptr [rsp + 0x98]
    0x0000000000015e02: xor rcx, qword ptr fs:[0x28]
    0x0000000000015e0b: mov rax, rbx
    0x0000000000015e0e: jne 0x1618c
then
    0x000000000001618c: call 0x3970
    L := 0x16191 (2)
else
    0x0000000000015e14: add rsp, 0xa8
    0x0000000000015e1b: pop rbx
    0x0000000000015e1c: pop rbp
    0x0000000000015e1d: pop r12
    0x0000000000015e1f: pop r13
    0x0000000000015e21: pop r14
    0x0000000000015e23: pop r15
    0x0000000000015e25: ret 
    L := 0x0 (130)
fi

0x7def:
if
    0x0000000000007def: test edx, edx
    0x0000000000007df1: jne 0x816c
then
    L := 0x816c (2)
else
    if
        0x0000000000007df7: test cl, cl
        0x0000000000007df9: je 0x816c
    then
        L := 0x816c (2)
    else
        if
            0x0000000000007dff: cmp byte ptr [rip + 0x21958a], 0
            0x0000000000007e06: mov ecx, 0xd0
            0x0000000000007e0b: jne 0x7e27
        then
            L := 0x7e27 (18)
        else
            0x0000000000007e0d: mov edi, 0xd
            0x0000000000007e12: call 0x5c50
            0x0000000000007e17: cmp al, 1
            0x0000000000007e19: sbb rcx, rcx
            0x0000000000007e1c: and rcx, 0xffffffffffffffa0
            0x0000000000007e20: add rcx, 0xd0
            L := 0x7e27 (18)
        fi
    fi
fi

0x3df0:
0x0000000000003df0: jmp qword ptr [rip + 0x21c192]
L := 0x21ff88 (1)

0xfe00:
if
    0x000000000000fe00: add r13, 1
    0x000000000000fe04: mov byte ptr [r13 - 1], 0x20
    0x000000000000fe09: cmp rbx, r13
    0x000000000000fe0c: seta sil
    0x000000000000fe10: test rax, rax
    0x000000000000fe13: setne dl
    0x000000000000fe16: sub rax, 1
    0x000000000000fe1a: test sil, dl
    0x000000000000fe1d: jne 0xfe00
then
    L := 0xfe00 (2)
else
    L := 0xfe1f (3)
fi

0x3e00:
0x0000000000003e00: jmp qword ptr [rip + 0x21c18a]
L := 0x21ff90 (1)

0x3e10:
0x0000000000003e10: jmp qword ptr [rip + 0x21c182]
L := 0x21ff98 (1)

0x9e10:
if
    0x0000000000009e10: mov rax, qword ptr [rbp - 0x388]
    0x0000000000009e17: movzx edx, byte ptr [rax]
    0x0000000000009e1a: cmp dl, 0x2f
    0x0000000000009e1d: jne 0xa508
then
    if
        0x000000000000a508: movzx ecx, byte ptr [r15]
        0x000000000000a50c: test cl, cl
        0x000000000000a50e: jne 0xa31b
    then
        L := 0xa31b (3)
    else
        0x000000000000a514: mov r12, qword ptr [rbp - 0x388]
        0x000000000000a51b: jmp 0x9b1c
        L := 0x9b1c (4)
    fi
else
    if
        0x0000000000009e23: mov eax, dword ptr [rip + 0x2174cf]
        0x0000000000009e29: lea r15, [rbx + 0x18]
        0x0000000000009e2d: cmp eax, 3
        0x0000000000009e30: jb 0x9e47
    then
        L := 0x9e47 (3)
    else
        if
            0x0000000000009e32: cmp eax, 4
            0x0000000000009e35: jbe 0x9e47
        then
            L := 0x9e47 (3)
        else
            if
                0x0000000000009e37: cmp eax, 5
                0x0000000000009e3a: mov r12, qword ptr [rbp - 0x388]
                0x0000000000009e41: je 0x9b41
            then
                L := 0x9b41 (2)
            else
                L := 0x9e47 (3)
            fi
        fi
    fi
fi

0xfe1f:
if
    0x000000000000fe1f: mov rdx, rbx
    0x000000000000fe22: mov byte ptr [r13], 0
    0x000000000000fe27: mov rsi, r14
    0x000000000000fe2a: sub rdx, r13
    0x000000000000fe2d: mov rdi, r13
    0x000000000000fe30: cmp rdx, r15
    0x000000000000fe33: cmova rdx, r15
    0x000000000000fe37: call 0x3d00
    0x000000000000fe3c: cmp rbx, rax
    0x000000000000fe3f: lea rdx, [rbp - 1]
    0x000000000000fe43: jbe 0xfe6e
then
    L := 0xfe6e (3)
else
    if
        0x000000000000fe45: test rbp, rbp
        0x000000000000fe48: je 0xfe6e
    then
        L := 0xfe6e (3)
    else
        0x000000000000fe4a: nop word ptr [rax + rax]
        L := 0xfe50 (2)
    fi
fi

0x3e20:
0x0000000000003e20: jmp qword ptr [rip + 0x21c17a]
L := 0x21ffa0 (1)

0x7e27:
0x0000000000007e27: lea rbx, [rip + 0x218232]
0x0000000000007e2e: add rcx, rbx
L := 0x7e31 (2)

0x3e30:
0x0000000000003e30: jmp qword ptr [rip + 0x21c172]
L := 0x21ffa8 (1)

0x7e31:
if
    0x0000000000007e31: cmp qword ptr [rcx + 8], 0
    0x0000000000007e36: jne 0x7e4c
then
    L := 0x7e4c (2)
else
    if
        0x0000000000007e38: mov edi, 4
        0x0000000000007e3d: call 0x5c50
        0x0000000000007e42: test al, al
        0x0000000000007e44: je 0x7d52
    then
        L := 0x7d52 (3)
    else
        0x0000000000007e4a: xor ecx, ecx
        L := 0x7e4c (2)
    fi
fi

0x9e47:
0x0000000000009e47: mov r12, qword ptr [rbp - 0x388]
0x0000000000009e4e: nop 
L := 0x9e50 (6)

0x7e4c:
if
    0x0000000000007e4c: mov rsi, qword ptr [rip + 0x21947d]
    0x0000000000007e53: mov edx, dword ptr [r14 + 0xc4]
    0x0000000000007e5a: sub rsp, 8
    0x0000000000007e5e: xor r15d, 1
    0x0000000000007e62: push qword ptr [r14 + 0x10]
    0x0000000000007e66: mov rdi, rbp
    0x0000000000007e69: mov r9, r13
    0x0000000000007e6c: movzx r8d, r15b
    0x0000000000007e70: call 0x7910
    0x0000000000007e75: mov rbx, rax
    0x0000000000007e78: call 0x7360
    0x0000000000007e7d: call 0x72a0
    0x0000000000007e82: mov rcx, qword ptr [rip + 0x219427]
    0x0000000000007e89: pop rsi
    0x0000000000007e8a: pop rdi
    0x0000000000007e8b: test rcx, rcx
    0x0000000000007e8e: je 0x7d87
then
    L := 0x7d87 (4)
else
    if
        0x0000000000007e94: xor edx, edx
        0x0000000000007e96: mov rax, r12
        0x0000000000007e99: div rcx
        0x0000000000007e9c: xor edx, edx
        0x0000000000007e9e: mov rsi, rax
        0x0000000000007ea1: lea rax, [rbx + r12 - 1]
        0x0000000000007ea6: div rcx
        0x0000000000007ea9: cmp rsi, rax
        0x0000000000007eac: je 0x7d87
    then
        L := 0x7d87 (4)
    else
        0x0000000000007eb2: lea rdi, [rip + 0x218317]
        0x0000000000007eb9: call 0x72f0
        0x0000000000007ebe: jmp 0x7d87
        L := 0x7d87 (4)
    fi
fi

0x3e50:
0x0000000000003e50: jmp qword ptr [rip + 0x21c162]
L := 0x21ffb8 (1)

0xfe50:
if
    0x000000000000fe50: add rax, 1
    0x000000000000fe54: test rdx, rdx
    0x000000000000fe57: mov byte ptr [rax - 1], 0x20
    0x000000000000fe5b: setne sil
    0x000000000000fe5f: cmp rbx, rax
    0x000000000000fe62: seta cl
    0x000000000000fe65: sub rdx, 1
    0x000000000000fe69: test sil, cl
    0x000000000000fe6c: jne 0xfe50
then
    L := 0xfe50 (2)
else
    L := 0xfe6e (3)
fi

0x9e50:
if
    0x0000000000009e50: mov rdx, r15
    0x0000000000009e53: mov rsi, r12
    0x0000000000009e56: mov edi, 1
    0x0000000000009e5b: call 0x3960
    0x0000000000009e60: xor edx, edx
    0x0000000000009e62: test eax, eax
    0x0000000000009e64: je 0x9b5e
then
    L := 0x9b5e (3)
else
    L := 0x9e6a (2)
fi

0x3e60:
0x0000000000003e60: jmp qword ptr [rip + 0x21c15a]
L := 0x21ffc0 (1)

0x15e65:
if
    0x0000000000015e65: call 0x3e78
    0x0000000000015e6a: test rax, rax
    0x0000000000015e6d: mov rbp, rax
    0x0000000000015e70: jne 0x15f18
then
    0x0000000000015f18: mov rdx, r14
    0x0000000000015f1b: mov rsi, r13
    0x0000000000015f1e: mov rdi, rbp
    0x0000000000015f21: call 0x3b80
    0x0000000000015f26: jmp 0x15ec9
    L := 0x15ec9 (2)
else
    L := 0x15e76 (2)
fi

0x5e68:
if
    0x0000000000005e68: mov rax, qword ptr [rsp + 0x648]
    0x0000000000005e70: xor rax, qword ptr fs:[0x28]
    0x0000000000005e79: jne 0x5f6c
then
    0x0000000000005f6c: call 0x3970
    0x0000000000005f71: nop dword ptr [rax + rax]
    0x0000000000005f76: nop word ptr cs:[rax + rax]
    if
        0x0000000000005f80: push r13
        0x0000000000005f82: push r12
        0x0000000000005f84: mov r12, rsi
        0x0000000000005f87: push rbp
        0x0000000000005f88: push rbx
        0x0000000000005f89: mov rbp, rdi
        0x0000000000005f8c: mov edi, 0x20
        0x0000000000005f91: mov r13d, edx
        0x0000000000005f94: sub rsp, 8
        0x0000000000005f98: call 0x14480
        0x0000000000005f9d: mov rbx, rax
        0x0000000000005fa0: xor eax, eax
        0x0000000000005fa2: test r12, r12
        0x0000000000005fa5: je 0x5faf
    then
        L := 0x5faf (2)
    else
        0x0000000000005fa7: mov rdi, r12
        0x0000000000005faa: call 0x146b0
        L := 0x5faf (2)
    fi
else
    0x0000000000005e7f: add rsp, 0x658
    0x0000000000005e86: pop rbx
    0x0000000000005e87: pop rbp
    0x0000000000005e88: pop r12
    0x0000000000005e8a: pop r13
    0x0000000000005e8c: pop r14
    0x0000000000005e8e: pop r15
    0x0000000000005e90: ret 
    L := 0x0 (130)
fi

0x9e6a:
if
    0x0000000000009e6a: lea rsi, [rip + 0xde0c]
    0x0000000000009e71: xor edi, edi
    0x0000000000009e73: mov edx, 5
    0x0000000000009e78: call 0x3930
    0x0000000000009e7d: mov rdx, r12
    0x0000000000009e80: movzx edi, r13b
    0x0000000000009e84: mov rsi, rax
    0x0000000000009e87: call 0x69a0
    0x0000000000009e8c: xor r12d, r12d
    0x0000000000009e8f: test r13b, r13b
    0x0000000000009e92: jne 0x9ca4
then
    L := 0x9ca4 (3)
else
    0x0000000000009e98: jmp 0x9c8d
    L := 0x9c8d (8)
fi

0xfe6e:
0x000000000000fe6e: mov byte ptr [rax], 0
L := 0xfe71 (4)

0x3e70:
0x0000000000003e70: jmp qword ptr [rip + 0x21c152]
L := 0x21ffc8 (1)

0xfe71:
0x000000000000fe71: mov rdi, qword ptr [rsp]
0x000000000000fe75: call 0x3e70
0x000000000000fe7a: mov rdi, qword ptr [rsp + 8]
0x000000000000fe7f: call 0x3e70
0x000000000000fe84: add rsp, 0x38
0x000000000000fe88: mov rax, r12
0x000000000000fe8b: pop rbx
0x000000000000fe8c: pop rbp
0x000000000000fe8d: pop r12
0x000000000000fe8f: pop r13
0x000000000000fe91: pop r14
0x000000000000fe93: pop r15
0x000000000000fe95: ret 
L := 0x0 (130)

0x15e76:
0x0000000000015e76: lea r15, [rip + 0x1dcd]
L := 0x15e7d (2)

0x3e78:
0x0000000000003e78: jmp qword ptr [rip + 0x21c16a]
L := 0x21ffe8 (1)

0x15e7d:
0x0000000000015e7d: mov qword ptr [rip + 0x20b6d4], r15
0x0000000000015e84: jmp 0x15dba
L := 0x15dba (3)

0x3e90:
if
    0x0000000000003e90: push r15
    0x0000000000003e92: push r14
    0x0000000000003e94: push r13
    0x0000000000003e96: push r12
    0x0000000000003e98: push rbp
    0x0000000000003e99: push rbx
    0x0000000000003e9a: mov ebp, edi
    0x0000000000003e9c: mov rbx, rsi
    0x0000000000003e9f: sub rsp, 0x58
    0x0000000000003ea3: mov rdi, qword ptr [rsi]
    0x0000000000003ea6: mov rax, qword ptr fs:[0x28]
    0x0000000000003eaf: mov qword ptr [rsp + 0x48], rax
    0x0000000000003eb4: xor eax, eax
    0x0000000000003eb6: call 0x11fd0
    0x0000000000003ebb: lea rsi, [rip + 0x13d88]
    0x0000000000003ec2: mov edi, 6
    0x0000000000003ec7: call 0x3cc0
    0x0000000000003ecc: lea rsi, [rip + 0x13ec2]
    0x0000000000003ed3: lea rdi, [rip + 0x13ea1]
    0x0000000000003eda: call 0x3920
    0x0000000000003edf: lea rdi, [rip + 0x13e95]
    0x0000000000003ee6: call 0x38e0
    0x0000000000003eeb: lea rdi, [rip + 0x8dae]
    0x0000000000003ef2: mov dword ptr [rip + 0x21c2fc], 2
    0x0000000000003efc: call 0x16340
    0x0000000000003f01: movabs rax, 0x8000000000000000
    0x0000000000003f0b: mov dword ptr [rip + 0x21d2fb], 0
    0x0000000000003f15: mov byte ptr [rip + 0x21d39c], 1
    0x0000000000003f1c: mov qword ptr [rip + 0x21d44d], rax
    0x0000000000003f23: mov eax, dword ptr [rip + 0x21c2b7]
    0x0000000000003f29: mov qword ptr [rip + 0x21d44c], 0
    0x0000000000003f34: mov qword ptr [rip + 0x21d439], -1
    0x0000000000003f3f: mov byte ptr [rip + 0x21d392], 0
    0x0000000000003f46: cmp eax, 2
    0x0000000000003f49: je 0x4ce7
then
    0x0000000000004ce7: mov esi, 7
    0x0000000000004cec: xor edi, edi
    0x0000000000004cee: mov dword ptr [rip + 0x21c640], 2
    0x0000000000004cf8: call 0x135b0
    0x0000000000004cfd: jmp 0x3f78
    L := 0x3f78 (4)
else
    if
        0x0000000000003f4f: cmp eax, 3
        0x0000000000003f52: je 0x3f62
    then
        L := 0x3f62 (2)
    else
        if
            0x0000000000003f54: sub eax, 1
            0x0000000000003f57: je 0x4857
        then
            if
                0x0000000000004857: mov edi, 1
                0x000000000000485c: call 0x3850
                0x0000000000004861: test eax, eax
                0x0000000000004863: jne 0x5311
            then
                0x0000000000005311: mov esi, 3
                0x0000000000005316: xor edi, edi
                0x0000000000005318: mov dword ptr [rip + 0x21c016], 2
                0x0000000000005322: call 0x135b0
                0x0000000000005327: mov byte ptr [rip + 0x21bfaa], 1
                0x000000000000532e: jmp 0x3f78
                L := 0x3f78 (4)
            else
                0x0000000000004869: mov dword ptr [rip + 0x21cac5], 1
                0x0000000000004873: jmp 0x3f78
                L := 0x3f78 (4)
            fi
        else
            0x0000000000003f5d: call 0x37e0
            L := 0x3f62 (2)
        fi
    fi
fi

0xde90:
if
    0x000000000000de90: push r12
    0x000000000000de92: push rbp
    0x000000000000de93: mov r12, rdi
    0x000000000000de96: push rbx
    0x000000000000de97: mov rbp, rsi
    0x000000000000de9a: call 0xd950
    0x000000000000de9f: mov rsi, qword ptr [rax]
    0x000000000000dea2: test rsi, rsi
    0x000000000000dea5: je 0xdecd
then
    L := 0xdecd (2)
else
    0x000000000000dea7: mov rbx, rax
    0x000000000000deaa: jmp 0xdeb3
    L := 0xdeb3 (2)
fi

0x15e90:
0x0000000000015e90: lea r13, [rip + 0x52d2]
0x0000000000015e97: mov edi, 0x28
0x0000000000015e9c: mov r12d, 0x1a
0x0000000000015ea2: mov r14d, 0x19
L := 0x15ea8 (2)

0x9ea0:
if
    0x0000000000009ea0: mov rax, qword ptr [rip + 0x216449]
    0x0000000000009ea7: cmp qword ptr [rbx + 0x18], rax
    0x0000000000009eab: je 0xa826
then
    0x000000000000a826: call 0x37f0
    0x000000000000a82b: mov dword ptr [rax], 0x5f
    0x000000000000a831: mov rcx, rax
    0x000000000000a834: lea rax, [rip + 0x2157e7]
    0x000000000000a83b: mov qword ptr [rbx + 0xb0], rax
    0x000000000000a842: jmp 0xa2e4
    L := 0xa2e4 (2)
else
    if
        0x0000000000009eb1: test dl, dl
        0x0000000000009eb3: lea rsi, [rbx + 0xb0]
        0x0000000000009eba: mov rdi, r12
        0x0000000000009ebd: je 0xa290
    then
        if
            0x000000000000a290: call 0x152d0
            0x000000000000a295: test eax, eax
            0x000000000000a297: jns 0x9ed0
        then
            L := 0x9ed0 (2)
        else
            L := 0xa29d (2)
        fi
    else
        if
            0x0000000000009ec3: call 0x152b0
            0x0000000000009ec8: test eax, eax
            0x0000000000009eca: js 0xa29d
        then
            L := 0xa29d (2)
        else
            L := 0x9ed0 (2)
        fi
    fi
fi

0x5ea7:
0x0000000000005ea7: lea rax, [rip + 0x21a192]
0x0000000000005eae: mov qword ptr [rsp], r14
0x0000000000005eb2: mov rbp, qword ptr [rsp + 8]
0x0000000000005eb7: imul r10, r14, 0xc0
0x0000000000005ebe: mov r13, qword ptr [rax + r14]
0x0000000000005ec2: mov rax, qword ptr [rsp + 0x10]
0x0000000000005ec7: mov r15, qword ptr [rax + r14]
0x0000000000005ecb: lea rax, [rip + 0x21a50e]
0x0000000000005ed2: lea rbx, [rax + r10]
0x0000000000005ed6: mov r12, r15
0x0000000000005ed9: mov r14, r15
0x0000000000005edc: mov r15, qword ptr [rsp + 0x18]
0x0000000000005ee1: sub r12, r13
0x0000000000005ee4: jmp 0x5f4c
L := 0x5f4c (2)

0xfea9:
if
    0x000000000000fea9: cmp rbp, rax
    0x000000000000feac: jae 0x100fa
then
    0x00000000000100fa: mov rax, rbp
    0x00000000000100fd: xor edx, edx
    0x00000000000100ff: jmp 0xfda0
    L := 0xfda0 (2)
else
    if
        0x000000000000feb2: sub rax, rbp
        0x000000000000feb5: mov rdx, rax
        0x000000000000feb8: mov rax, rbp
        0x000000000000febb: mov qword ptr [r12], rax
        0x000000000000febf: mov eax, dword ptr [rsp + 0x1c]
        0x000000000000fec3: test eax, eax
        0x000000000000fec5: jne 0xfdb0
    then
        L := 0xfdb0 (2)
    else
        L := 0xfecb (2)
    fi
fi

0x15ea8:
if
    0x0000000000015ea8: call 0x3e78
    0x0000000000015ead: test rax, rax
    0x0000000000015eb0: mov rbp, rax
    0x0000000000015eb3: je 0x15e76
then
    L := 0x15e76 (2)
else
    0x0000000000015eb5: mov rdx, r14
    0x0000000000015eb8: mov rsi, r13
    0x0000000000015ebb: mov rdi, rbp
    0x0000000000015ebe: call 0x3b80
    0x0000000000015ec3: mov byte ptr [rbp + r14], 0x2f
    L := 0x15ec9 (2)
fi

0xdeb3:
if
    0x000000000000deb3: cmp rsi, rbp
    0x000000000000deb6: je 0xdecf
then
    L := 0xdecf (2)
else
    if
        0x000000000000deb8: mov rdi, rbp
        0x000000000000debb: call qword ptr [r12 + 0x38]
        0x000000000000dec0: test al, al
        0x000000000000dec2: jne 0xdee0
    then
        0x000000000000dee0: mov rsi, qword ptr [rbx]
        0x000000000000dee3: pop rbx
        0x000000000000dee4: pop rbp
        0x000000000000dee5: mov rax, rsi
        0x000000000000dee8: pop r12
        0x000000000000deea: ret 
        L := 0x0 (130)
    else
        if
            0x000000000000dec4: mov rbx, qword ptr [rbx + 8]
            0x000000000000dec8: test rbx, rbx
            0x000000000000decb: jne 0xdeb0
        then
            0x000000000000deb0: mov rsi, qword ptr [rbx]
            L := 0xdeb3 (2)
        else
            L := 0xdecd (2)
        fi
    fi
fi

0x15ec9:
if
    0x0000000000015ec9: add r12, rbp
    0x0000000000015ecc: movabs rax, 0x2e74657372616863
    0x0000000000015ed6: mov esi, 0x20000
    0x0000000000015edb: mov qword ptr [r12], rax
    0x0000000000015edf: mov eax, 0x73
    0x0000000000015ee4: mov dword ptr [r12 + 8], 0x61696c61
    0x0000000000015eed: mov word ptr [r12 + 0xc], ax
    0x0000000000015ef3: mov rdi, rbp
    0x0000000000015ef6: xor eax, eax
    0x0000000000015ef8: call 0x3d30
    0x0000000000015efd: test eax, eax
    0x0000000000015eff: mov r12d, eax
    0x0000000000015f02: jns 0x15f28
then
    if
        0x0000000000015f28: lea rsi, [rip + 0x203b]
        0x0000000000015f2f: mov edi, eax
        0x0000000000015f31: xor r15d, r15d
        0x0000000000015f34: call 0x3cb0
        0x0000000000015f39: test rax, rax
        0x0000000000015f3c: mov r14, rax
        0x0000000000015f3f: mov qword ptr [rsp], 0
        0x0000000000015f47: je 0x16123
    then
        0x0000000000016123: mov edi, r12d
        0x0000000000016126: call 0x3aa0
        0x000000000001612b: jmp 0x15f04
        L := 0x15f04 (3)
    else
        0x0000000000015f4d: lea rax, [rsp + 0x60]
        0x0000000000015f52: mov qword ptr [rsp + 8], rax
        0x0000000000015f57: lea rax, [rsp + 0x20]
        0x0000000000015f5c: mov qword ptr [rsp + 0x10], rax
        L := 0x15f61 (4)
    fi
else
    L := 0x15f04 (3)
fi

0xfecb:
0x000000000000fecb: mov rbp, rdx
0x000000000000fece: xor edx, edx
0x000000000000fed0: jmp 0xfdc3
L := 0xfdc3 (3)

0xdecd:
0x000000000000decd: xor esi, esi
L := 0xdecf (2)

0xdecf:
0x000000000000decf: pop rbx
0x000000000000ded0: mov rax, rsi
0x000000000000ded3: pop rbp
0x000000000000ded4: pop r12
0x000000000000ded6: ret 
L := 0x0 (130)

0x9ed0:
if
    0x0000000000009ed0: mov rdi, qword ptr [rbx + 0xb0]
    0x0000000000009ed7: lea rsi, [rip + 0xddcd]
    0x0000000000009ede: mov ecx, 0xa
    0x0000000000009ee3: mov edx, dword ptr [rip + 0x21744f]
    0x0000000000009ee9: repe cmpsb byte ptr [rsi], byte ptr [rdi]
    0x0000000000009eeb: setne r14b
    0x0000000000009eef: test edx, edx
    0x0000000000009ef1: je 0xa498
then
    0x000000000000a498: call 0x37f0
    0x000000000000a49d: mov rcx, rax
    L := 0xa4a0 (2)
else
    0x0000000000009ef7: mov ecx, r14d
    0x0000000000009efa: xor eax, eax
    L := 0x9efc (2)
fi

0x9efc:
if
    0x0000000000009efc: xor edx, edx
    0x0000000000009efe: test r14b, r14b
    0x0000000000009f01: je 0x9f11
then
    L := 0x9f11 (3)
else
    0x0000000000009f03: mov ecx, r14d
    0x0000000000009f06: mov edx, ecx
    0x0000000000009f08: shl edx, 0x1f
    0x0000000000009f0b: sar edx, 0x1f
    0x0000000000009f0e: add edx, 2
    L := 0x9f11 (3)
fi

0x15f04:
0x0000000000015f04: lea r15, [rip + 0x1d3f]
L := 0x15f0b (3)

0xff0a:
0x000000000000ff0a: mov qword ptr [rsp], 0
0x000000000000ff12: mov qword ptr [rsp + 8], 0
0x000000000000ff1b: mov r12, -1
0x000000000000ff22: jmp 0xfe71
L := 0xfe71 (4)

0x15f0b:
0x0000000000015f0b: mov rdi, rbp
0x0000000000015f0e: call 0x3e70
0x0000000000015f13: jmp 0x15e7d
L := 0x15e7d (2)

0x9f11:
if
    0x0000000000009f11: or byte ptr [rip + 0x21744d], cl
    0x0000000000009f17: test eax, eax
    0x0000000000009f19: mov dword ptr [rbx + 0xbc], edx
    0x0000000000009f1f: jne 0xa55a
then
    L := 0xa55a (2)
else
    L := 0x9f25 (2)
fi

0x7f12:
if
    0x0000000000007f12: mov eax, r8d
    0x0000000000007f15: and eax, 0xf000
    0x0000000000007f1a: cmp eax, 0x8000
    0x0000000000007f1f: je 0x8010
then
    if
        0x0000000000008010: test r8d, 0x800
        0x0000000000008017: je 0x8038
    then
        L := 0x8038 (2)
    else
        if
            0x0000000000008019: mov edi, 0x10
            0x000000000000801e: call 0x5c50
            0x0000000000008023: test al, al
            0x0000000000008025: je 0x8038
        then
            L := 0x8038 (2)
        else
            0x0000000000008027: mov ecx, 0x100
            0x000000000000802c: jmp 0x7e27
            L := 0x7e27 (18)
        fi
    fi
else
    if
        0x0000000000007f25: cmp eax, 0x4000
        0x0000000000007f2a: je 0x8090
    then
        if
            0x0000000000008090: mov eax, r8d
            0x0000000000008093: and eax, 0x202
            0x0000000000008098: cmp eax, 0x202
            0x000000000000809d: je 0x8150
        then
            if
                0x0000000000008150: mov edi, 0x14
                0x0000000000008155: call 0x5c50
                0x000000000000815a: test al, al
                0x000000000000815c: mov ecx, 0x140
                0x0000000000008161: jne 0x7e27
            then
                L := 0x7e27 (18)
            else
                0x0000000000008167: jmp 0x80a3
                L := 0x80a3 (2)
            fi
        else
            L := 0x80a3 (2)
        fi
    else
        if
            0x0000000000007f30: cmp eax, 0xa000
            0x0000000000007f35: je 0x80f0
        then
            0x00000000000080f0: mov eax, 7
            0x00000000000080f5: jmp 0x7def
            L := 0x7def (2)
        else
            if
                0x0000000000007f3b: cmp eax, 0x1000
                0x0000000000007f40: mov ecx, 0x80
                0x0000000000007f45: je 0x7e27
            then
                L := 0x7e27 (18)
            else
                if
                    0x0000000000007f4b: cmp eax, 0xc000
                    0x0000000000007f50: mov ecx, 0x90
                    0x0000000000007f55: je 0x7e27
                then
                    L := 0x7e27 (18)
                else
                    if
                        0x0000000000007f5b: cmp eax, 0x6000
                        0x0000000000007f60: mov ecx, 0xa0
                        0x0000000000007f65: je 0x7e27
                    then
                        L := 0x7e27 (18)
                    else
                        0x0000000000007f6b: cmp eax, 0x2000
                        0x0000000000007f70: mov ecx, 0xd0
                        0x0000000000007f75: mov ebx, 0xb0
                        0x0000000000007f7a: cmove rcx, rbx
                        0x0000000000007f7e: jmp 0x7e27
                        L := 0x7e27 (18)
                    fi
                fi
            fi
        fi
    fi
fi

0x9f25:
if
    0x0000000000009f25: mov eax, dword ptr [rbx + 0x30]
    0x0000000000009f28: and eax, 0xf000
    0x0000000000009f2d: cmp eax, 0xa000
    0x0000000000009f32: jne 0x9bb2
then
    L := 0x9bb2 (3)
else
    if
        0x0000000000009f38: mov r10d, dword ptr [rip + 0x2173f9]
        0x0000000000009f3f: test r10d, r10d
        0x0000000000009f42: jne 0xa478
    then
        L := 0xa478 (2)
    else
        L := 0x9f48 (2)
    fi
fi

0x5f32:
if
    0x0000000000005f32: cmp eax, 0x7f
    0x0000000000005f35: ja 0x5e68
then
    L := 0x5e68 (6)
else
    if
        0x0000000000005f3b: sub rbp, -0x80
        0x0000000000005f3f: sub rbx, -0x80
        0x0000000000005f43: cmp rbp, r15
        0x0000000000005f46: je 0x5e4d
    then
        if
            0x0000000000005e4d: mov r14, qword ptr [rsp]
            0x0000000000005e51: add r14, 8
            0x0000000000005e55: cmp r14, 0x10
            0x0000000000005e59: jne 0x5ea7
        then
            L := 0x5ea7 (2)
        else
            0x0000000000005e5b: mov byte ptr [rip + 0x21a566], 1
            0x0000000000005e62: nop word ptr [rax + rax]
            L := 0x5e68 (6)
        fi
    else
        L := 0x5f4c (2)
    fi
fi

0x9f48:
if
    0x0000000000009f48: mov rsi, qword ptr [rbx + 0x48]
    0x0000000000009f4c: mov rdi, r12
    0x0000000000009f4f: call 0xc1c0
    0x0000000000009f54: test rax, rax
    0x0000000000009f57: mov r14, rax
    0x0000000000009f5a: mov qword ptr [rbx + 8], rax
    0x0000000000009f5e: je 0xa6f0
then
    if
        0x000000000000a6f0: lea rsi, [rip + 0xd597]
        0x000000000000a6f7: xor edi, edi
        0x000000000000a6f9: mov edx, 5
        0x000000000000a6fe: call 0x3930
        0x000000000000a703: movzx edi, r13b
        0x000000000000a707: mov rdx, r12
        0x000000000000a70a: mov rsi, rax
        0x000000000000a70d: call 0x69a0
        0x000000000000a712: mov r14, qword ptr [rbx + 8]
        0x000000000000a716: test r14, r14
        0x000000000000a719: jne 0x9f64
    then
        L := 0x9f64 (2)
    else
        0x000000000000a71f: nop 
        L := 0xa720 (2)
    fi
else
    L := 0x9f64 (2)
fi

0x5f4c:
if
    0x0000000000005f4c: test r14, r14
    0x0000000000005f4f: jne 0x5ef0
then
    if
        0x0000000000005ef0: cmp r12, 0x80
        0x0000000000005ef7: jg 0x5e68
    then
        L := 0x5e68 (6)
    else
        0x0000000000005efd: lea rax, [r14 + 2]
        0x0000000000005f01: sub rsp, 8
        0x0000000000005f05: lea r8, [rip + 0x11ce4]
        0x0000000000005f0c: mov r9d, r12d
        0x0000000000005f0f: mov rcx, -1
        0x0000000000005f16: mov edx, 1
        0x0000000000005f1b: push rax
        0x0000000000005f1c: push rbp
        0x0000000000005f1d: mov esi, 0x80
        0x0000000000005f22: push r13
        0x0000000000005f24: mov rdi, rbx
        0x0000000000005f27: xor eax, eax
        0x0000000000005f29: call 0x37c0
        0x0000000000005f2e: add rsp, 0x20
        L := 0x5f32 (2)
    fi
else
    0x0000000000005f51: lea rdx, [rip + 0x143a4]
    0x0000000000005f58: mov rcx, r13
    0x0000000000005f5b: mov esi, 0x80
    0x0000000000005f60: mov rdi, rbx
    0x0000000000005f63: xor eax, eax
    0x0000000000005f65: call 0x39c0
    0x0000000000005f6a: jmp 0x5f32
    L := 0x5f32 (2)
fi

0x15f61:
if
    0x0000000000015f61: mov rax, qword ptr [r14 + 8]
    0x0000000000015f65: cmp rax, qword ptr [r14 + 0x10]
    0x0000000000015f69: jae 0x160ba
then
    L := 0x160ba (2)
else
    L := 0x15f6f (2)
fi

0x3f62:
0x0000000000003f62: mov esi, 7
0x0000000000003f67: xor edi, edi
0x0000000000003f69: mov dword ptr [rip + 0x21d3c5], 0
0x0000000000003f73: call 0x135b0
L := 0x3f78 (4)

0x9f64:
if
    0x0000000000009f64: cmp byte ptr [r14], 0x2f
    0x0000000000009f68: je 0xa688
then
    L := 0xa688 (2)
else
    if
        0x0000000000009f6e: mov rdi, r12
        0x0000000000009f71: call 0xcd50
        0x0000000000009f76: test rax, rax
        0x0000000000009f79: je 0xa688
    then
        L := 0xa688 (2)
    else
        if
            0x0000000000009f7f: mov rdi, r14
            0x0000000000009f82: mov qword ptr [rbp - 0x390], rax
            0x0000000000009f89: call 0x3950
            0x0000000000009f8e: mov rdx, qword ptr [rbp - 0x390]
            0x0000000000009f95: lea rdi, [rdx + rax + 2]
            0x0000000000009f9a: call 0x14480
            0x0000000000009f9f: mov rdx, qword ptr [rbp - 0x390]
            0x0000000000009fa6: mov r15, rax
            0x0000000000009fa9: cmp byte ptr [r12 + rdx - 1], 0x2f
            0x0000000000009faf: je 0x9fb5
        then
            L := 0x9fb5 (2)
        else
            0x0000000000009fb1: add rdx, 1
            L := 0x9fb5 (2)
        fi
    fi
fi

0x15f6f:
0x0000000000015f6f: lea rdx, [rax + 1]
0x0000000000015f73: mov qword ptr [r14 + 8], rdx
0x0000000000015f77: movzx edi, byte ptr [rax]
L := 0x15f7a (2)

0x3f78:
if
    0x0000000000003f78: lea rdi, [rip + 0x13e28]
    0x0000000000003f7f: mov dword ptr [rip + 0x21d3ab], 0
    0x0000000000003f89: mov dword ptr [rip + 0x21d39d], 0
    0x0000000000003f93: mov byte ptr [rip + 0x21d395], 0
    0x0000000000003f9a: mov byte ptr [rip + 0x21d38c], 0
    0x0000000000003fa1: mov byte ptr [rip + 0x21d384], 0
    0x0000000000003fa8: mov dword ptr [rip + 0x21d362], 0
    0x0000000000003fb2: mov byte ptr [rip + 0x21d343], 0
    0x0000000000003fb9: mov dword ptr [rip + 0x21d335], 1
    0x0000000000003fc3: mov byte ptr [rip + 0x21d32c], 0
    0x0000000000003fca: mov byte ptr [rip + 0x21d324], 0
    0x0000000000003fd1: mov dword ptr [rip + 0x21d315], 0
    0x0000000000003fdb: mov qword ptr [rip + 0x21d302], 0
    0x0000000000003fe6: mov qword ptr [rip + 0x21d2ef], 0
    0x0000000000003ff1: mov byte ptr [rip + 0x21d36d], 0
    0x0000000000003ff8: call 0x37a0
    0x0000000000003ffd: test rax, rax
    0x0000000000004000: mov r12, rax
    0x0000000000004003: je 0x403b
then
    L := 0x403b (3)
else
    if
        0x0000000000004005: lea rdx, [rip + 0x16b54]
        0x000000000000400c: lea rsi, [rip + 0x21b9cd]
        0x0000000000004013: mov ecx, 4
        0x0000000000004018: mov rdi, rax
        0x000000000000401b: call 0xc2c0
        0x0000000000004020: test eax, eax
        0x0000000000004022: js 0x4d02
    then
        0x0000000000004d02: mov rdi, r12
        0x0000000000004d05: call 0x13ce0
        0x0000000000004d0a: lea rsi, [rip + 0x1536f]
        0x0000000000004d11: mov r12, rax
        0x0000000000004d14: xor edi, edi
        0x0000000000004d16: mov edx, 5
        0x0000000000004d1b: call 0x3930
        0x0000000000004d20: mov rcx, r12
        0x0000000000004d23: mov rdx, rax
        0x0000000000004d26: xor esi, esi
        0x0000000000004d28: xor edi, edi
        0x0000000000004d2a: xor eax, eax
        0x0000000000004d2c: call 0x3d20
        0x0000000000004d31: jmp 0x403b
        L := 0x403b (3)
    else
        0x0000000000004028: lea rdx, [rip + 0x16b31]
        0x000000000000402f: cdqe 
        0x0000000000004031: xor edi, edi
        0x0000000000004033: mov esi, dword ptr [rdx + rax*4]
        0x0000000000004036: call 0x135b0
        L := 0x403b (3)
    fi
fi

0x15f7a:
if
    0x0000000000015f7a: lea eax, [rdi - 9]
    0x0000000000015f7d: cmp eax, 1
    0x0000000000015f80: jbe 0x15f61
then
    L := 0x15f61 (4)
else
    if
        0x0000000000015f82: cmp edi, 0x20
        0x0000000000015f85: je 0x15f61
    then
        L := 0x15f61 (4)
    else
        if
            0x0000000000015f87: cmp edi, 0x23
            0x0000000000015f8a: je 0x16109
        then
            L := 0x16109 (2)
        else
            if
                0x0000000000015f90: mov rsi, r14
                0x0000000000015f93: call 0x3c30
                0x0000000000015f98: mov r13, qword ptr [rsp + 0x10]
                0x0000000000015f9d: mov rcx, qword ptr [rsp + 8]
                0x0000000000015fa2: lea rsi, [rip + 0x51ea]
                0x0000000000015fa9: xor eax, eax
                0x0000000000015fab: mov rdi, r14
                0x0000000000015fae: mov rdx, r13
                0x0000000000015fb1: call 0x3a70
                0x0000000000015fb6: cmp eax, 1
                0x0000000000015fb9: jle 0x160cd
            then
                L := 0x160cd (3)
            else
                0x0000000000015fbf: mov rdx, r13
                L := 0x15fc2 (2)
            fi
        fi
    fi
fi

0xbf83:
0x000000000000bf83: lea rax, [rip + 0xbd79]
0x000000000000bf8a: lea rcx, [rip + 0xbdb1]
0x000000000000bf91: lea rsi, [rip + 0xc1a5]
0x000000000000bf98: mov qword ptr [rsp + 0x60], 0
0x000000000000bfa1: mov qword ptr [rsp + 0x68], 0
0x000000000000bfaa: mov rbx, rsp
0x000000000000bfad: mov qword ptr [rsp + 8], rax
0x000000000000bfb2: lea rax, [rip + 0xbdc2]
0x000000000000bfb9: mov qword ptr [rsp + 0x30], rcx
0x000000000000bfbe: lea rcx, [rip + 0xbd87]
0x000000000000bfc5: mov qword ptr [rsp], rsi
0x000000000000bfc9: mov qword ptr [rsp + 0x10], rax
0x000000000000bfce: lea rax, [rip + 0xbd3e]
0x000000000000bfd5: mov qword ptr [rsp + 0x40], rcx
0x000000000000bfda: lea rcx, [rip + 0xbd75]
0x000000000000bfe1: mov qword ptr [rsp + 0x18], rax
0x000000000000bfe6: lea rax, [rip + 0xbd3c]
0x000000000000bfed: mov qword ptr [rsp + 0x50], rcx
0x000000000000bff2: mov qword ptr [rsp + 0x20], rax
0x000000000000bff7: lea rax, [rip + 0xbd35]
0x000000000000bffe: mov qword ptr [rsp + 0x28], rax
0x000000000000c003: mov qword ptr [rsp + 0x38], rax
0x000000000000c008: mov qword ptr [rsp + 0x48], rax
0x000000000000c00d: mov qword ptr [rsp + 0x58], rax
0x000000000000c012: jmp 0xc024
L := 0xc024 (2)

0xff98:
if
    0x000000000000ff98: mov qword ptr [rsp + 0x28], rdx
    0x000000000000ff9d: call 0x3e20
    0x000000000000ffa2: test eax, eax
    0x000000000000ffa4: mov rdx, qword ptr [rsp + 0x28]
    0x000000000000ffa9: jne 0xffb6
then
    L := 0xffb6 (2)
else
    0x000000000000ffab: mov dword ptr [rdx], 0xfffd
    0x000000000000ffb1: mov byte ptr [rsp + 0x20], 1
    L := 0xffb6 (2)
fi

0x7fa0:
if
    0x0000000000007fa0: mov rdi, rbp
    0x0000000000007fa3: call 0x3950
    0x0000000000007fa8: mov rbx, qword ptr [rip + 0x219359]
    0x0000000000007faf: mov rcx, rax
    0x0000000000007fb2: test rbx, rbx
    0x0000000000007fb5: je 0x7ff1
then
    L := 0x7ff1 (2)
else
    0x0000000000007fb7: nop word ptr [rax + rax]
    L := 0x7fc0 (2)
fi

0x5faf:
if
    0x0000000000005faf: mov qword ptr [rbx + 8], rax
    0x0000000000005fb3: xor eax, eax
    0x0000000000005fb5: test rbp, rbp
    0x0000000000005fb8: je 0x5fc2
then
    L := 0x5fc2 (2)
else
    0x0000000000005fba: mov rdi, rbp
    0x0000000000005fbd: call 0x146b0
    L := 0x5fc2 (2)
fi

0x9fb5:
0x0000000000009fb5: mov rsi, r12
0x0000000000009fb8: mov rdi, r15
0x0000000000009fbb: call 0x3ca0
0x0000000000009fc0: mov rsi, r14
0x0000000000009fc3: mov rdi, rax
0x0000000000009fc6: call 0x3830
L := 0x9fcb (2)

0xffb6:
if
    0x000000000000ffb6: add rdx, 4
    0x000000000000ffba: mov edi, dword ptr [rdx]
    0x000000000000ffbc: test edi, edi
    0x000000000000ffbe: jne 0xff98
then
    L := 0xff98 (2)
else
    if
        0x000000000000ffc0: mov rdi, qword ptr [rsp]
        0x000000000000ffc4: mov rsi, rbp
        0x000000000000ffc7: call 0x3880
        0x000000000000ffcc: cmp byte ptr [rsp + 0x20], 0
        0x000000000000ffd1: movsxd rbp, eax
        0x000000000000ffd4: je 0x10098
    then
        L := 0x10098 (2)
    else
        0x000000000000ffda: mov rsi, qword ptr [rsp]
        0x000000000000ffde: xor edx, edx
        0x000000000000ffe0: xor edi, edi
        0x000000000000ffe2: call 0x3d80
        0x000000000000ffe7: add rax, 1
        0x000000000000ffeb: mov qword ptr [rsp + 0x20], rax
        L := 0xfff0 (2)
    fi
fi

0x5fc2:
0x0000000000005fc2: mov qword ptr [rbx], rax
0x0000000000005fc5: mov rax, qword ptr [rip + 0x21b3b4]
0x0000000000005fcc: mov byte ptr [rbx + 0x10], r13b
0x0000000000005fd0: mov qword ptr [rip + 0x21b3a9], rbx
0x0000000000005fd7: mov qword ptr [rbx + 0x18], rax
0x0000000000005fdb: add rsp, 8
0x0000000000005fdf: pop rbx
0x0000000000005fe0: pop rbp
0x0000000000005fe1: pop r12
0x0000000000005fe3: pop r13
0x0000000000005fe5: ret 
L := 0x0 (130)

0x7fc0:
if
    0x0000000000007fc0: mov rdx, qword ptr [rbx]
    0x0000000000007fc3: cmp rcx, rdx
    0x0000000000007fc6: jb 0x7fe8
then
    L := 0x7fe8 (2)
else
    if
        0x0000000000007fc8: mov rdi, rcx
        0x0000000000007fcb: mov rsi, qword ptr [rbx + 8]
        0x0000000000007fcf: mov qword ptr [rsp + 8], rcx
        0x0000000000007fd4: sub rdi, rdx
        0x0000000000007fd7: add rdi, rbp
        0x0000000000007fda: call 0x3800
        0x0000000000007fdf: test eax, eax
        0x0000000000007fe1: mov rcx, qword ptr [rsp + 8]
        0x0000000000007fe6: je 0x8000
    then
        0x0000000000008000: lea rcx, [rbx + 0x10]
        0x0000000000008004: jmp 0x7e31
        L := 0x7e31 (2)
    else
        L := 0x7fe8 (2)
    fi
fi

0x15fc2:
if
    0x0000000000015fc2: mov ecx, dword ptr [rdx]
    0x0000000000015fc4: add rdx, 4
    0x0000000000015fc8: lea eax, [rcx - 0x1010101]
    0x0000000000015fce: not ecx
    0x0000000000015fd0: and eax, ecx
    0x0000000000015fd2: and eax, 0x80808080
    0x0000000000015fd7: je 0x15fc2
then
    L := 0x15fc2 (2)
else
    0x0000000000015fd9: mov ecx, eax
    0x0000000000015fdb: mov r13, qword ptr [rsp + 8]
    0x0000000000015fe0: shr ecx, 0x10
    0x0000000000015fe3: test eax, 0x8080
    0x0000000000015fe8: cmove eax, ecx
    0x0000000000015feb: lea rcx, [rdx + 2]
    0x0000000000015fef: cmove rdx, rcx
    0x0000000000015ff3: mov ecx, eax
    0x0000000000015ff5: add cl, al
    0x0000000000015ff7: sbb rdx, 3
    0x0000000000015ffb: sub rdx, qword ptr [rsp + 0x10]
    L := 0x16000 (2)
fi

0x9fcb:
if
    0x0000000000009fcb: test r15, r15
    0x0000000000009fce: je 0xa720
then
    L := 0xa720 (2)
else
    if
        0x0000000000009fd4: mov r9d, dword ptr [rbx + 0xc4]
        0x0000000000009fdb: test r9d, r9d
        0x0000000000009fde: je 0xa7d0
    then
        if
            0x000000000000a7d0: mov rdi, qword ptr [rbx + 8]
            0x000000000000a7d4: call 0x6190
            0x000000000000a7d9: test al, al
            0x000000000000a7db: je 0x9fe4
        then
            L := 0x9fe4 (3)
        else
            0x000000000000a7e1: mov dword ptr [rbx + 0xc4], 0xffffffff
            0x000000000000a7eb: jmp 0x9fe4
            L := 0x9fe4 (3)
        fi
    else
        L := 0x9fe4 (3)
    fi
fi

0x11fd0:
if
    0x0000000000011fd0: test rdi, rdi
    0x0000000000011fd3: push rbx
    0x0000000000011fd4: je 0x12047
then
    if
        0x0000000000012047: mov rcx, qword ptr [rip + 0x20e272]
        0x000000000001204e: lea rdi, [rip + 0x8613]
        0x0000000000012055: mov edx, 0x37
        0x000000000001205a: mov esi, 1
        0x000000000001205f: call 0x3de0
        0x0000000000012064: call 0x37e0
        0x0000000000012069: nop dword ptr [rax]
        0x0000000000012070: push rbp
        0x0000000000012071: push rbx
        0x0000000000012072: mov rbp, rdi
        0x0000000000012075: mov ebx, esi
        0x0000000000012077: sub rsp, 8
        0x000000000001207b: call 0x15d50
        0x0000000000012080: movzx edx, byte ptr [rax]
        0x0000000000012083: and edx, 0xffffffdf
        0x0000000000012086: cmp dl, 0x55
        0x0000000000012089: je 0x12100
    then
        if
            0x0000000000012100: movzx edx, byte ptr [rax + 1]
            0x0000000000012104: and edx, 0xffffffdf
            0x0000000000012107: cmp dl, 0x54
            0x000000000001210a: jne 0x12090
        then
            L := 0x12090 (13)
        else
            if
                0x000000000001210c: movzx edx, byte ptr [rax + 2]
                0x0000000000012110: and edx, 0xffffffdf
                0x0000000000012113: cmp dl, 0x46
                0x0000000000012116: jne 0x12090
            then
                L := 0x12090 (13)
            else
                if
                    0x000000000001211c: cmp byte ptr [rax + 3], 0x2d
                    0x0000000000012120: jne 0x12090
                then
                    L := 0x12090 (13)
                else
                    if
                        0x0000000000012126: cmp byte ptr [rax + 4], 0x38
                        0x000000000001212a: jne 0x12090
                    then
                        L := 0x12090 (13)
                    else
                        if
                            0x0000000000012130: cmp byte ptr [rax + 5], 0
                            0x0000000000012134: jne 0x12090
                        then
                            L := 0x12090 (13)
                        else
                            0x000000000001213a: cmp byte ptr [rbp], 0x60
                            0x000000000001213e: lea rax, [rip + 0x8567]
                            0x0000000000012145: lea rdx, [rip + 0x8564]
                            0x000000000001214c: cmovne rax, rdx
                            0x0000000000012150: add rsp, 8
                            0x0000000000012154: pop rbx
                            0x0000000000012155: pop rbp
                            0x0000000000012156: ret 
                            L := 0x0 (130)
                        fi
                    fi
                fi
            fi
        fi
    else
        if
            0x000000000001208b: cmp dl, 0x47
            0x000000000001208e: je 0x120b0
        then
            if
                0x00000000000120b0: movzx edx, byte ptr [rax + 1]
                0x00000000000120b4: and edx, 0xffffffdf
                0x00000000000120b7: cmp dl, 0x42
                0x00000000000120ba: jne 0x12090
            then
                L := 0x12090 (13)
            else
                if
                    0x00000000000120bc: cmp byte ptr [rax + 2], 0x31
                    0x00000000000120c0: jne 0x12090
                then
                    L := 0x12090 (13)
                else
                    if
                        0x00000000000120c2: cmp byte ptr [rax + 3], 0x38
                        0x00000000000120c6: jne 0x12090
                    then
                        L := 0x12090 (13)
                    else
                        if
                            0x00000000000120c8: cmp byte ptr [rax + 4], 0x30
                            0x00000000000120cc: jne 0x12090
                        then
                            L := 0x12090 (13)
                        else
                            if
                                0x00000000000120ce: cmp byte ptr [rax + 5], 0x33
                                0x00000000000120d2: jne 0x12090
                            then
                                L := 0x12090 (13)
                            else
                                if
                                    0x00000000000120d4: cmp byte ptr [rax + 6], 0x30
                                    0x00000000000120d8: jne 0x12090
                                then
                                    L := 0x12090 (13)
                                else
                                    if
                                        0x00000000000120da: cmp byte ptr [rax + 7], 0
                                        0x00000000000120de: jne 0x12090
                                    then
                                        L := 0x12090 (13)
                                    else
                                        0x00000000000120e0: cmp byte ptr [rbp], 0x60
                                        0x00000000000120e4: lea rax, [rip + 0x85c9]
                                        0x00000000000120eb: lea rdx, [rip + 0x85c6]
                                        0x00000000000120f2: cmovne rax, rdx
                                        0x00000000000120f6: add rsp, 8
                                        0x00000000000120fa: pop rbx
                                        0x00000000000120fb: pop rbp
                                        0x00000000000120fc: ret 
                                        L := 0x0 (130)
                                    fi
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        else
            L := 0x12090 (13)
        fi
    fi
else
    if
        0x0000000000011fd6: mov esi, 0x2f
        0x0000000000011fdb: mov rbx, rdi
        0x0000000000011fde: call 0x39e0
        0x0000000000011fe3: test rax, rax
        0x0000000000011fe6: je 0x12037
    then
        L := 0x12037 (5)
    else
        if
            0x0000000000011fe8: lea rdx, [rax + 1]
            0x0000000000011fec: mov rcx, rdx
            0x0000000000011fef: sub rcx, rbx
            0x0000000000011ff2: cmp rcx, 6
            0x0000000000011ff6: jle 0x12037
        then
            L := 0x12037 (5)
        else
            if
                0x0000000000011ff8: lea rsi, [rax - 6]
                0x0000000000011ffc: lea rdi, [rip + 0x869d]
                0x0000000000012003: mov ecx, 7
                0x0000000000012008: repe cmpsb byte ptr [rsi], byte ptr [rdi]
                0x000000000001200a: jne 0x12037
            then
                L := 0x12037 (5)
            else
                if
                    0x000000000001200c: lea rdi, [rip + 0x8695]
                    0x0000000000012013: mov ecx, 3
                    0x0000000000012018: mov rsi, rdx
                    0x000000000001201b: mov rbx, rdx
                    0x000000000001201e: repe cmpsb byte ptr [rsi], byte ptr [rdi]
                    0x0000000000012020: seta sil
                    0x0000000000012024: setb cl
                    0x0000000000012027: cmp sil, cl
                    0x000000000001202a: jne 0x12037
                then
                    L := 0x12037 (5)
                else
                    0x000000000001202c: lea rbx, [rax + 4]
                    0x0000000000012030: mov qword ptr [rip + 0x20e249], rbx
                    L := 0x12037 (5)
                fi
            fi
        fi
    fi
fi

0x9fe4:
if
    0x0000000000009fe4: cmp dword ptr [rip + 0x217329], 1
    0x0000000000009feb: ja 0x9ff6
then
    L := 0x9ff6 (2)
else
    if
        0x0000000000009fed: cmp byte ptr [rip + 0x217309], 0
        0x0000000000009ff4: je 0xa046
    then
        L := 0xa046 (5)
    else
        L := 0x9ff6 (2)
    fi
fi

0x7fe8:
if
    0x0000000000007fe8: mov rbx, qword ptr [rbx + 0x20]
    0x0000000000007fec: test rbx, rbx
    0x0000000000007fef: jne 0x7fc0
then
    L := 0x7fc0 (2)
else
    L := 0x7ff1 (2)
fi

0xfff0:
if
    0x000000000000fff0: mov rdi, qword ptr [rsp + 0x20]
    0x000000000000fff5: call 0x3e78
    0x000000000000fffa: test rax, rax
    0x000000000000fffd: mov qword ptr [rsp + 8], rax
    0x0000000000010002: je 0x100c0
then
    if
        0x00000000000100c0: test bl, 1
        0x00000000000100c3: jne 0xfd8e
    then
        L := 0xfd8e (5)
    else
        0x00000000000100c9: mov r12, -1
        0x00000000000100d0: jmp 0xfe71
        L := 0xfe71 (4)
    fi
else
    if
        0x0000000000010008: mov r15, qword ptr [rsp]
        0x000000000001000c: mov r14, qword ptr [r12]
        0x0000000000010010: mov edi, dword ptr [r15]
        0x0000000000010013: test edi, edi
        0x0000000000010015: je 0x100ef
    then
        0x00000000000100ef: mov r15, qword ptr [rsp]
        0x00000000000100f3: xor ebp, ebp
        0x00000000000100f5: jmp 0x1004f
        L := 0x1004f (3)
    else
        0x000000000001001b: xor ebp, ebp
        0x000000000001001d: jmp 0x1002e
        L := 0x1002e (2)
    fi
fi

0x7ff1:
0x0000000000007ff1: mov ecx, 0x50
0x0000000000007ff6: jmp 0x7e27
L := 0x7e27 (18)

0x9ff6:
if
    0x0000000000009ff6: lea rdx, [rbp - 0x380]
    0x0000000000009ffd: mov rsi, r15
    0x000000000000a000: mov edi, 1
    0x000000000000a005: call 0x3be0
    0x000000000000a00a: test eax, eax
    0x000000000000a00c: jne 0xa046
then
    L := 0xa046 (5)
else
    if
        0x000000000000a00e: test r13b, r13b
        0x000000000000a011: mov byte ptr [rbx + 0xb9], 1
        0x000000000000a018: mov eax, dword ptr [rbp - 0x368]
        0x000000000000a01e: je 0xa040
    then
        L := 0xa040 (3)
    else
        if
            0x000000000000a020: mov r8d, dword ptr [rip + 0x217311]
            0x000000000000a027: test r8d, r8d
            0x000000000000a02a: je 0xa040
        then
            L := 0xa040 (3)
        else
            if
                0x000000000000a02c: mov edx, eax
                0x000000000000a02e: and edx, 0xf000
                0x000000000000a034: cmp edx, 0x4000
                0x000000000000a03a: je 0xa046
            then
                L := 0xa046 (5)
            else
                0x000000000000a03c: nop dword ptr [rax]
                L := 0xa040 (3)
            fi
        fi
    fi
fi

